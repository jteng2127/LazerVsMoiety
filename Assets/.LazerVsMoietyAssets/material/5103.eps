%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1709.m10.i311.n004.S.c12.532157530 Pixel game buttons, navigation and notation elements and symbols vector set.eps
%%Creator: Adobe Illustrator(R) 21.1
%%For: ≈фим “уркин
%%CreationDate: 9/27/2017
%%BoundingBox: 0 0 600 450
%%HiResBoundingBox: 0 0 600 450
%%CropBox: 0 0 600 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.1.0 x326 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="пїњ" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">–Ь–Є–Ї—А–Њ–≤–µ–Ї—В–Њ—А</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2017-09-27T16:22:40+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-09-27T16:22:40+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-09-27T16:22:39+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8xKvJgo6k0+/K3LRtxp6&#xA;xRuQxLx0LVHwkH+U4aYiSBwMnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYqihZxiBJpJeAkrQcSenywsbQxpU0NR2OBk3GaSKaVoRsMVTG8eb98zKwR1UBK&#xA;glehqVB2wsAnP5a+QLrzv5jj0a3uYbUuksjTTlggEUbSGpVXPRfDKckyCAOZdlo9NGUZZJ3wQqwO&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:0a3e46c9-f4e4-bc46-b479-2e1f989ac5cb</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:0a3e46c9-f4e4-bc46-b479-2e1f989ac5cb</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:2d81a58d-a5ff-4b31-a1af-6349ba060a73</stRef:instanceID>
            <stRef:documentID>xmp.did:fe25f917-a461-624c-b079-26e6fef8b881</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fe25f917-a461-624c-b079-26e6fef8b881</stEvt:instanceID>
                  <stEvt:when>2017-09-26T16:31:25+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0a3e46c9-f4e4-bc46-b479-2e1f989ac5cb</stEvt:instanceID>
                  <stEvt:when>2017-09-27T16:22:40+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>–У—А—Г–њ–њ–∞ –Њ–±—А–∞–Ј—Ж–Њ–≤ –њ–Њ —Г–Љ–Њ–ї—З–∞–љ–Є—О</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
600 450 li
600 0 li
cp
clp
600 0 mo
600 450 li
0 450 li
0 0 li
600 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.0901961 .0156863 .0156863 rgb
f
539 214 mo
545 214 li
545 211 li
539 211 li
539 214 li
cp
536 211 mo
539 211 li
539 28 li
536 28 li
536 211 li
cp
545 211 mo
548 211 li
548 28 li
545 28 li
545 211 li
cp
539 25 mo
545 25 li
545 28 li
539 28 li
539 25 li
cp
.270588 .270588 .270588 rgb
f
539 28 mo
539 211 li
545 211 li
545 28 li
539 28 li
cp
.180392 .145098 .145098 rgb
f
545 67 mo
545 70 li
548 70 li
548 67 li
545 67 li
cp
539 67 mo
539 70 li
536 70 li
536 67 li
539 67 li
cp
f
539 70 mo
545 70 li
545 67 li
539 67 li
539 70 li
cp
536 67 mo
539 67 li
539 46 li
536 46 li
536 67 li
cp
545 67 mo
548 67 li
548 46 li
545 46 li
545 67 li
cp
539 43 mo
545 43 li
545 46 li
539 46 li
539 43 li
cp
.556863 .741176 .129412 rgb
f
539 46 mo
539 67 li
545 67 li
545 46 li
539 46 li
cp
.576471 .87451 .160784 rgb
f
539 49 mo
539 52 li
545 52 li
545 49 li
539 49 li
cp
.364706 .490196 .0862745 rgb
f
539 55 mo
539 58 li
545 58 li
545 55 li
539 55 li
cp
f
539 61 mo
539 64 li
545 64 li
545 61 li
539 61 li
cp
f
542 424 mo
545 424 li
545 421 li
542 421 li
542 424 li
cp
539 421 mo
542 421 li
542 238 li
539 238 li
539 421 li
cp
545 421 mo
548 421 li
548 238 li
545 238 li
545 421 li
cp
542 235 mo
545 235 li
545 238 li
542 238 li
542 235 li
cp
.270588 .270588 .270588 rgb
f
542 238 mo
542 421 li
545 421 li
545 238 li
542 238 li
cp
.180392 .145098 .145098 rgb
f
545 307 mo
545 310 li
548 310 li
548 307 li
545 307 li
cp
542 307 mo
542 310 li
539 310 li
539 307 li
542 307 li
cp
f
548 283 mo
548 286 li
542 286 li
542 307 li
539 307 li
539 283 li
548 283 li
cp
.968627 .882353 .164706 rgb
f
539 310 mo
539 307 li
545 307 li
545 286 li
548 286 li
548 310 li
539 310 li
cp
.937255 .533333 .0392157 rgb
f
542 286 mo
542 307 li
545 307 li
545 286 li
542 286 li
cp
1 1 1 rgb
f
573 436 mo
573 421 li
579 421 li
579 418 li
570 418 li
570 421 li
567 421 li
567 436 li
570 436 li
570 439 li
579 439 li
579 436 li
573 436 li
cp
579 421 mo
582 421 li
582 436 li
579 436 li
579 421 li
cp
.180392 .145098 .145098 rgb
f
579 403 mo
573 403 li
573 397 li
579 397 li
579 403 li
cp
567 394 mo
567 406 li
579 406 li
579 412 li
570 412 li
570 409 li
567 409 li
567 415 li
582 415 li
582 394 li
567 394 li
cp
f
579 379 mo
573 379 li
573 373 li
579 373 li
579 379 li
cp
579 388 mo
573 388 li
573 382 li
579 382 li
579 388 li
cp
567 370 mo
567 391 li
582 391 li
582 370 li
567 370 li
cp
f
567 346 mo
567 349 li
576 349 li
576 352 li
573 352 li
573 361 li
570 361 li
570 367 li
576 367 li
576 361 li
579 361 li
579 352 li
582 352 li
582 346 li
567 346 li
cp
f
579 334 mo
579 340 li
573 340 li
573 334 li
579 334 li
cp
567 322 mo
567 343 li
582 343 li
582 331 li
573 331 li
573 325 li
582 325 li
582 322 li
567 322 li
cp
f
567 298 mo
567 310 li
576 310 li
576 316 li
570 316 li
570 313 li
567 313 li
567 319 li
582 319 li
582 307 li
570 307 li
570 301 li
582 301 li
582 298 li
567 298 li
cp
f
576 274 mo
576 283 li
570 283 li
570 274 li
567 274 li
567 286 li
576 286 li
576 295 li
582 295 li
582 274 li
576 274 li
cp
f
579 250 mo
570 250 li
570 253 li
576 253 li
576 259 li
570 259 li
570 262 li
576 262 li
576 268 li
570 268 li
570 271 li
579 271 li
579 268 li
582 268 li
582 262 li
579 262 li
579 259 li
582 259 li
582 253 li
579 253 li
579 250 li
cp
567 265 mo
567 268 li
570 268 li
570 265 li
567 265 li
cp
567 253 mo
570 253 li
570 256 li
567 256 li
567 253 li
cp
f
579 226 mo
570 226 li
570 229 li
576 229 li
576 235 li
573 235 li
573 238 li
570 238 li
570 241 li
567 241 li
567 247 li
582 247 li
582 241 li
579 241 li
579 244 li
573 244 li
573 241 li
576 241 li
576 238 li
579 238 li
579 235 li
582 235 li
582 229 li
579 229 li
579 226 li
cp
567 229 mo
570 229 li
570 232 li
567 232 li
567 229 li
cp
f
576 202 mo
570 202 li
570 205 li
567 205 li
567 208 li
570 208 li
570 220 li
567 220 li
567 223 li
579 223 li
579 220 li
576 220 li
576 202 li
cp
f
567 178 mo
567 181 li
576 181 li
576 184 li
573 184 li
573 187 li
570 187 li
570 190 li
567 190 li
567 199 li
582 199 li
582 196 li
573 196 li
573 193 li
576 193 li
576 190 li
579 190 li
579 187 li
582 187 li
582 178 li
567 178 li
cp
f
576 154 mo
576 163 li
573 163 li
573 154 li
567 154 li
567 166 li
576 166 li
576 172 li
567 172 li
567 175 li
582 175 li
582 154 li
576 154 li
cp
f
576 130 mo
576 136 li
573 136 li
573 130 li
567 130 li
567 136 li
570 136 li
570 145 li
567 145 li
567 151 li
573 151 li
573 145 li
576 145 li
576 151 li
582 151 li
582 145 li
579 145 li
579 136 li
582 136 li
582 130 li
576 130 li
cp
f
582 121 mo
579 121 li
579 109 li
576 109 li
576 121 li
573 121 li
573 106 li
567 106 li
567 124 li
570 124 li
570 127 li
576 127 li
576 124 li
579 124 li
579 127 li
585 127 li
585 106 li
582 106 li
582 121 li
cp
f
579 97 mo
576 97 li
576 100 li
573 100 li
573 82 li
567 82 li
567 100 li
570 100 li
570 103 li
579 103 li
579 100 li
582 100 li
582 82 li
579 82 li
579 97 li
cp
f
576 58 mo
576 76 li
573 76 li
573 58 li
567 58 li
567 76 li
570 76 li
570 79 li
579 79 li
579 76 li
582 76 li
582 58 li
576 58 li
cp
f
567 34 mo
567 37 li
573 37 li
573 55 li
579 55 li
579 37 li
585 37 li
585 34 li
567 34 li
cp
f
567 10 mo
567 22 li
576 22 li
576 28 li
567 28 li
567 31 li
582 31 li
582 19 li
573 19 li
573 13 li
582 13 li
582 10 li
567 10 li
cp
f
27 440.449 mo
30 440.449 li
30 431.449 li
27 431.449 li
27 440.449 li
cp
27 428.449 mo
30 428.449 li
30 422.449 li
27 422.449 li
27 428.449 li
cp
27 428.449 mo
27 431.449 li
21 431.449 li
21 440.449 li
15 440.449 li
15 422.449 li
18 422.449 li
18 419.449 li
27 419.449 li
27 422.449 li
21 422.449 li
21 428.449 li
27 428.449 li
cp
f
27 413.449 mo
27 410.449 li
21 410.449 li
21 395.449 li
24 395.449 li
24 398.449 li
27 398.449 li
27 410.449 li
30 410.449 li
30 395.449 li
27 395.449 li
27 392.449 li
18 392.449 li
18 395.449 li
15 395.449 li
15 410.449 li
18 410.449 li
18 413.449 li
24 413.449 li
24 416.449 li
33 416.449 li
33 413.449 li
27 413.449 li
cp
f
30 377.449 mo
33 377.449 li
33 371.449 li
30 371.449 li
30 377.449 li
cp
30 377.449 mo
30 380.449 li
24 380.449 li
24 389.449 li
18 389.449 li
18 368.449 li
30 368.449 li
30 371.449 li
24 371.449 li
24 377.449 li
30 377.449 li
cp
f
30 350.449 mo
30 359.449 li
27 359.449 li
27 362.449 li
24 362.449 li
24 347.449 li
27 347.449 li
27 350.449 li
30 350.449 li
cp
30 344.449 mo
21 344.449 li
21 347.449 li
18 347.449 li
18 362.449 li
21 362.449 li
21 365.449 li
30 365.449 li
30 362.449 li
33 362.449 li
33 347.449 li
30 347.449 li
30 344.449 li
cp
f
24 323.449 mo
21 323.449 li
21 320.449 li
15 320.449 li
15 341.449 li
21 341.449 li
21 329.449 li
24 329.449 li
24 323.449 li
cp
27 329.449 mo
24 329.449 li
24 335.449 li
27 335.449 li
27 329.449 li
cp
30 320.449 mo
33 320.449 li
33 341.449 li
27 341.449 li
27 335.449 li
30 335.449 li
30 320.449 li
cp
f
24 299.449 mo
21 299.449 li
21 296.449 li
15 296.449 li
15 317.449 li
21 317.449 li
21 305.449 li
24 305.449 li
24 299.449 li
cp
24 308.449 mo
27 308.449 li
27 305.449 li
24 305.449 li
24 308.449 li
cp
30 296.449 mo
33 296.449 li
33 317.449 li
30 317.449 li
30 305.449 li
27 305.449 li
27 299.449 li
30 299.449 li
30 296.449 li
cp
f
30 290.449 mo
24 290.449 li
24 272.449 li
18 272.449 li
18 293.449 li
33 293.449 li
33 287.449 li
30 287.449 li
30 290.449 li
cp
f
27 248.449 mo
27 257.449 li
24 257.449 li
24 248.449 li
18 248.449 li
18 269.449 li
24 269.449 li
24 260.449 li
27 260.449 li
27 269.449 li
33 269.449 li
33 260.449 li
30 260.449 li
30 254.449 li
33 254.449 li
33 248.449 li
27 248.449 li
cp
f
33 245.449 mo
33 224.449 li
27 224.449 li
27 242.449 li
24 242.449 li
24 239.449 li
18 239.449 li
18 245.449 li
33 245.449 li
cp
f
33 221.449 mo
33 218.449 li
30 218.449 li
30 203.449 li
33 203.449 li
33 200.449 li
21 200.449 li
21 203.449 li
24 203.449 li
24 218.449 li
21 218.449 li
21 221.449 li
33 221.449 li
cp
f
30 185.449 mo
24 185.449 li
24 176.449 li
18 176.449 li
18 197.449 li
24 197.449 li
24 188.449 li
30 188.449 li
30 197.449 li
33 197.449 li
33 176.449 li
30 176.449 li
30 185.449 li
cp
f
30 158.449 mo
33 158.449 li
33 155.449 li
30 155.449 li
30 158.449 li
cp
30 152.449 mo
30 155.449 li
24 155.449 li
24 170.449 li
30 170.449 li
30 167.449 li
27 167.449 li
27 164.449 li
33 164.449 li
33 173.449 li
21 173.449 li
21 170.449 li
18 170.449 li
18 155.449 li
21 155.449 li
21 152.449 li
30 152.449 li
cp
f
18 128.449 mo
18 149.449 li
24 149.449 li
24 140.449 li
30 140.449 li
30 137.449 li
24 137.449 li
24 131.449 li
33 131.449 li
33 128.449 li
18 128.449 li
cp
f
18 104.449 mo
18 125.449 li
33 125.449 li
33 122.449 li
24 122.449 li
24 116.449 li
30 116.449 li
30 113.449 li
24 113.449 li
24 107.449 li
33 107.449 li
33 104.449 li
18 104.449 li
cp
f
30 86.4492 mo
30 95.4492 li
27 95.4492 li
27 98.4492 li
24 98.4492 li
24 83.4492 li
27 83.4492 li
27 86.4492 li
30 86.4492 li
cp
30 80.4492 mo
18 80.4492 li
18 101.449 li
30 101.449 li
30 98.4492 li
33 98.4492 li
33 83.4492 li
30 83.4492 li
30 80.4492 li
cp
f
30 62.4492 mo
33 62.4492 li
33 59.4492 li
30 59.4492 li
30 62.4492 li
cp
21 56.4492 mo
21 59.4492 li
18 59.4492 li
18 74.4492 li
21 74.4492 li
21 77.4492 li
30 77.4492 li
30 74.4492 li
24 74.4492 li
24 59.4492 li
30 59.4492 li
30 56.4492 li
21 56.4492 li
cp
33 74.4492 mo
30 74.4492 li
30 71.4492 li
33 71.4492 li
33 74.4492 li
cp
f
30 50.4492 mo
33 50.4492 li
33 44.4492 li
30 44.4492 li
30 50.4492 li
cp
30 41.4492 mo
33 41.4492 li
33 35.4492 li
30 35.4492 li
30 41.4492 li
cp
30 41.4492 mo
30 44.4492 li
24 44.4492 li
24 50.4492 li
30 50.4492 li
30 53.4492 li
18 53.4492 li
18 35.4492 li
21 35.4492 li
21 32.4492 li
30 32.4492 li
30 35.4492 li
24 35.4492 li
24 41.4492 li
30 41.4492 li
cp
f
30 14.4492 mo
30 17.4492 li
24 17.4492 li
24 11.4492 li
27 11.4492 li
27 14.4492 li
30 14.4492 li
cp
30 8.44922 mo
21 8.44922 li
21 11.4492 li
18 11.4492 li
18 29.4492 li
24 29.4492 li
24 20.4492 li
30 20.4492 li
30 29.4492 li
33 29.4492 li
33 11.4492 li
30 11.4492 li
30 8.44922 li
cp
f
439 220 mo
436 220 li
436 217 li
433 217 li
433 211 li
430 211 li
430 205 li
427 205 li
427 199 li
424 199 li
424 193 li
421 193 li
421 187 li
424 187 li
424 184 li
433 184 li
433 178 li
436 178 li
436 175 li
448 175 li
448 178 li
451 178 li
451 184 li
460 184 li
460 187 li
463 187 li
463 193 li
460 193 li
460 199 li
457 199 li
457 205 li
454 205 li
454 211 li
451 211 li
451 217 li
448 217 li
448 220 li
445 220 li
445 223 li
439 223 li
439 220 li
cp
.270588 .270588 .270588 rgb
f
439 220 mo
439 220 li
439 217 li
436 217 li
436 211 li
433 211 li
433 205 li
430 205 li
430 199 li
427 199 li
427 193 li
424 193 li
424 187 li
436 187 li
436 178 li
448 178 li
448 187 li
460 187 li
460 193 li
457 193 li
457 199 li
454 199 li
454 205 li
451 205 li
451 211 li
448 211 li
448 217 li
445 217 li
445 220 li
445 220 li
445 220 li
439 220 li
439 220 li
cp
.576471 .87451 .160784 rgb
f
442 178 mo
448 178 li
448 187 li
460 187 li
460 193 li
457 193 li
457 199 li
454 199 li
454 205 li
451 205 li
451 211 li
448 211 li
448 217 li
445 217 li
445 220 li
442 220 li
442 178 li
cp
.556863 .741176 .129412 rgb
f
454 202 mo
454 205 li
451 205 li
451 202 li
454 202 li
cp
.364706 .490196 .0862745 rgb
f
445 187 mo
445 178 li
448 178 li
448 187 li
445 187 li
cp
f
436 187 mo
436 178 li
439 178 li
439 187 li
436 187 li
cp
.556863 .741176 .129412 rgb
f
460 187 mo
460 193 li
457 193 li
457 187 li
460 187 li
cp
.364706 .490196 .0862745 rgb
f
457 196 mo
457 199 li
454 199 li
454 196 li
457 196 li
cp
f
451 208 mo
451 211 li
448 211 li
448 208 li
451 208 li
cp
f
448 214 mo
448 217 li
445 217 li
445 214 li
448 214 li
cp
f
445 217 mo
445 220 li
442 220 li
442 217 li
445 217 li
cp
f
430 202 mo
430 205 li
433 205 li
433 202 li
430 202 li
cp
.556863 .741176 .129412 rgb
f
424 190 mo
424 193 li
427 193 li
427 190 li
424 190 li
cp
f
427 196 mo
427 199 li
430 199 li
430 196 li
427 196 li
cp
f
433 208 mo
433 211 li
436 211 li
436 208 li
433 208 li
cp
f
436 214 mo
436 217 li
439 217 li
439 214 li
436 214 li
cp
f
439 217 mo
439 220 li
442 220 li
442 217 li
439 217 li
cp
f
427 187 mo
427 190 li
436 190 li
436 187 li
427 187 li
cp
1 1 1 rgb
f
439 181 mo
439 184 li
442 184 li
442 181 li
439 181 li
cp
f
439 82 mo
436 82 li
436 85 li
433 85 li
433 91 li
430 91 li
430 97 li
427 97 li
427 103 li
424 103 li
424 109 li
421 109 li
421 115 li
424 115 li
424 118 li
433 118 li
433 124 li
436 124 li
436 127 li
448 127 li
448 124 li
451 124 li
451 118 li
460 118 li
460 115 li
463 115 li
463 109 li
460 109 li
460 103 li
457 103 li
457 97 li
454 97 li
454 91 li
451 91 li
451 85 li
448 85 li
448 82 li
445 82 li
445 79 li
439 79 li
439 82 li
cp
.270588 .270588 .270588 rgb
f
439 82 mo
439 82 li
439 85 li
436 85 li
436 91 li
433 91 li
433 97 li
430 97 li
430 103 li
427 103 li
427 109 li
424 109 li
424 115 li
436 115 li
436 124 li
448 124 li
448 115 li
460 115 li
460 109 li
457 109 li
457 103 li
454 103 li
454 97 li
451 97 li
451 91 li
448 91 li
448 85 li
445 85 li
445 82 li
445 82 li
445 82 li
439 82 li
439 82 li
cp
.576471 .87451 .160784 rgb
f
442 124 mo
448 124 li
448 115 li
460 115 li
460 109 li
457 109 li
457 103 li
454 103 li
454 97 li
451 97 li
451 91 li
448 91 li
448 85 li
445 85 li
445 82 li
442 82 li
442 124 li
cp
.556863 .741176 .129412 rgb
f
454 100 mo
454 97 li
451 97 li
451 100 li
454 100 li
cp
.364706 .490196 .0862745 rgb
f
445 115 mo
445 124 li
448 124 li
448 115 li
445 115 li
cp
f
442 121 mo
442 124 li
448 124 li
448 121 li
442 121 li
cp
f
448 112 mo
448 115 li
457 115 li
457 112 li
448 112 li
cp
f
424 112 mo
424 115 li
436 115 li
436 112 li
424 112 li
cp
.556863 .741176 .129412 rgb
f
436 121 mo
436 124 li
442 124 li
442 121 li
436 121 li
cp
f
436 115 mo
436 124 li
439 124 li
439 115 li
436 115 li
cp
f
460 115 mo
460 109 li
457 109 li
457 115 li
460 115 li
cp
.364706 .490196 .0862745 rgb
f
457 106 mo
457 103 li
454 103 li
454 106 li
457 106 li
cp
f
451 94 mo
451 91 li
448 91 li
448 94 li
451 94 li
cp
f
448 88 mo
448 85 li
445 85 li
445 88 li
448 88 li
cp
f
430 100 mo
430 97 li
433 97 li
433 100 li
430 100 li
cp
.556863 .741176 .129412 rgb
f
424 112 mo
424 109 li
427 109 li
427 112 li
424 112 li
cp
f
427 106 mo
427 103 li
430 103 li
430 106 li
427 106 li
cp
f
433 94 mo
433 91 li
436 91 li
436 94 li
433 94 li
cp
f
436 88 mo
436 85 li
439 85 li
439 88 li
436 88 li
cp
f
433 100 mo
436 100 li
436 97 li
433 97 li
433 100 li
cp
442 85 mo
442 94 li
439 94 li
439 97 li
436 97 li
436 91 li
439 91 li
439 85 li
442 85 li
cp
1 1 1 rgb
f
373 148 mo
373 145 li
376 145 li
376 142 li
382 142 li
382 139 li
388 139 li
388 136 li
394 136 li
394 133 li
400 133 li
400 130 li
406 130 li
406 133 li
409 133 li
409 142 li
415 142 li
415 145 li
418 145 li
418 157 li
415 157 li
415 160 li
409 160 li
409 169 li
406 169 li
406 172 li
400 172 li
400 169 li
394 169 li
394 166 li
388 166 li
388 163 li
382 163 li
382 160 li
376 160 li
376 157 li
373 157 li
373 154 li
370 154 li
370 148 li
373 148 li
cp
.270588 .270588 .270588 rgb
f
373 148 mo
373 148 li
376 148 li
376 145 li
382 145 li
382 142 li
388 142 li
388 139 li
394 139 li
394 136 li
400 136 li
400 133 li
406 133 li
406 145 li
415 145 li
415 157 li
406 157 li
406 169 li
400 169 li
400 166 li
394 166 li
394 163 li
388 163 li
388 160 li
382 160 li
382 157 li
376 157 li
376 154 li
373 154 li
373 154 li
373 154 li
373 148 li
373 148 li
cp
.576471 .87451 .160784 rgb
f
415 151 mo
415 157 li
406 157 li
406 169 li
400 169 li
400 166 li
394 166 li
394 163 li
388 163 li
388 160 li
382 160 li
382 157 li
376 157 li
376 154 li
373 154 li
373 151 li
415 151 li
cp
.556863 .741176 .129412 rgb
f
391 163 mo
388 163 li
388 160 li
391 160 li
391 163 li
cp
.364706 .490196 .0862745 rgb
f
406 154 mo
415 154 li
415 157 li
406 157 li
406 154 li
cp
f
406 145 mo
415 145 li
415 148 li
406 148 li
406 145 li
cp
.556863 .741176 .129412 rgb
f
403 169 mo
400 169 li
400 166 li
403 166 li
403 169 li
cp
.364706 .490196 .0862745 rgb
f
397 166 mo
394 166 li
394 163 li
397 163 li
397 166 li
cp
f
385 160 mo
382 160 li
382 157 li
385 157 li
385 160 li
cp
f
379 157 mo
376 157 li
376 154 li
379 154 li
379 157 li
cp
f
391 139 mo
388 139 li
388 142 li
391 142 li
391 139 li
cp
.556863 .741176 .129412 rgb
f
403 133 mo
400 133 li
400 136 li
403 136 li
403 133 li
cp
f
397 136 mo
394 136 li
394 139 li
397 139 li
397 136 li
cp
f
385 142 mo
382 142 li
382 145 li
385 145 li
385 142 li
cp
f
379 145 mo
376 145 li
376 148 li
379 148 li
379 145 li
cp
f
400 136 mo
400 139 li
403 139 li
403 136 li
400 136 li
cp
394 142 mo
388 142 li
388 145 li
397 145 li
397 142 li
400 142 li
400 139 li
394 139 li
394 142 li
cp
382 148 mo
388 148 li
388 145 li
382 145 li
382 148 li
cp
376 148 mo
382 148 li
382 151 li
376 151 li
376 148 li
cp
1 1 1 rgb
f
505 157 mo
508 157 li
508 154 li
505 154 li
505 157 li
cp
.364706 .490196 .0862745 rgb
f
505 145 mo
508 145 li
508 148 li
505 148 li
505 145 li
cp
.556863 .741176 .129412 rgb
f
493 163 mo
496 163 li
496 160 li
493 160 li
493 163 li
cp
.364706 .490196 .0862745 rgb
f
478 154 mo
469 154 li
469 157 li
478 157 li
478 154 li
cp
f
478 145 mo
469 145 li
469 148 li
478 148 li
478 145 li
cp
.556863 .741176 .129412 rgb
f
481 169 mo
484 169 li
484 166 li
481 166 li
481 169 li
cp
.364706 .490196 .0862745 rgb
f
487 166 mo
490 166 li
490 163 li
487 163 li
487 166 li
cp
f
499 160 mo
502 160 li
502 157 li
499 157 li
499 160 li
cp
f
493 139 mo
496 139 li
496 142 li
493 142 li
493 139 li
cp
.556863 .741176 .129412 rgb
f
481 133 mo
484 133 li
484 136 li
481 136 li
481 133 li
cp
f
487 136 mo
490 136 li
490 139 li
487 139 li
487 136 li
cp
f
499 142 mo
502 142 li
502 145 li
499 145 li
499 142 li
cp
f
511 148 mo
511 145 li
508 145 li
508 142 li
502 142 li
502 139 li
496 139 li
496 136 li
490 136 li
490 133 li
484 133 li
484 130 li
478 130 li
478 133 li
475 133 li
475 142 li
469 142 li
469 145 li
466 145 li
466 157 li
469 157 li
469 160 li
475 160 li
475 169 li
478 169 li
478 172 li
484 172 li
484 169 li
490 169 li
490 166 li
496 166 li
496 163 li
502 163 li
502 160 li
508 160 li
508 157 li
511 157 li
511 154 li
514 154 li
514 148 li
511 148 li
cp
.270588 .270588 .270588 rgb
f
511 148 mo
511 148 li
508 148 li
508 145 li
502 145 li
502 142 li
496 142 li
496 139 li
490 139 li
490 136 li
484 136 li
484 133 li
478 133 li
478 145 li
469 145 li
469 157 li
478 157 li
478 169 li
484 169 li
484 166 li
490 166 li
490 163 li
496 163 li
496 160 li
502 160 li
502 157 li
508 157 li
508 154 li
511 154 li
511 154 li
511 154 li
511 148 li
511 148 li
cp
.576471 .87451 .160784 rgb
f
469 151 mo
469 157 li
478 157 li
478 169 li
484 169 li
484 166 li
490 166 li
490 163 li
496 163 li
496 160 li
502 160 li
502 157 li
508 157 li
508 154 li
511 154 li
511 151 li
469 151 li
cp
.556863 .741176 .129412 rgb
f
484 139 mo
484 136 li
481 136 li
481 142 li
490 142 li
490 139 li
484 139 li
cp
478 148 mo
478 151 li
472 151 li
472 148 li
478 148 li
cp
1 1 1 rgb
f
403 250 mo
403 244 li
400 244 li
400 241 li
397 241 li
397 238 li
391 238 li
391 235 li
382 235 li
382 238 li
376 238 li
376 241 li
373 241 li
373 244 li
370 244 li
370 250 li
367 250 li
367 259 li
370 259 li
370 265 li
373 265 li
373 268 li
376 268 li
376 271 li
382 271 li
382 274 li
391 274 li
391 271 li
397 271 li
397 268 li
400 268 li
400 265 li
403 265 li
403 259 li
406 259 li
406 250 li
403 250 li
cp
.270588 .270588 .270588 rgb
f
400 250 mo
400 244 li
397 244 li
397 241 li
391 241 li
391 238 li
382 238 li
382 241 li
376 241 li
376 244 li
373 244 li
373 250 li
370 250 li
370 259 li
373 259 li
373 265 li
376 265 li
376 268 li
382 268 li
382 271 li
391 271 li
391 268 li
397 268 li
397 265 li
400 265 li
400 259 li
403 259 li
403 250 li
400 250 li
cp
.87451 .164706 .160784 rgb
f
400 256 mo
400 259 li
397 259 li
397 262 li
394 262 li
394 265 li
379 265 li
379 262 li
376 262 li
376 259 li
373 259 li
373 256 li
370 256 li
370 259 li
373 259 li
373 265 li
376 265 li
376 268 li
382 268 li
382 271 li
391 271 li
391 268 li
397 268 li
397 265 li
400 265 li
400 259 li
403 259 li
403 256 li
400 256 li
cp
.686275 .101961 .0980392 rgb
f
379 241 mo
379 244 li
376 244 li
376 250 li
379 250 li
379 247 li
385 247 li
385 244 li
391 244 li
391 241 li
379 241 li
cp
1 .431373 .431373 rgb
f
379 241 mo
379 244 li
376 244 li
376 247 li
382 247 li
382 244 li
385 244 li
385 241 li
379 241 li
cp
1 1 1 rgb
f
457 250 mo
457 244 li
454 244 li
454 241 li
451 241 li
451 238 li
445 238 li
445 235 li
436 235 li
436 238 li
430 238 li
430 241 li
427 241 li
427 244 li
424 244 li
424 250 li
421 250 li
421 259 li
424 259 li
424 265 li
427 265 li
427 268 li
430 268 li
430 271 li
436 271 li
436 274 li
445 274 li
445 271 li
451 271 li
451 268 li
454 268 li
454 265 li
457 265 li
457 259 li
460 259 li
460 250 li
457 250 li
cp
.270588 .270588 .270588 rgb
f
454 250 mo
454 244 li
451 244 li
451 241 li
445 241 li
445 238 li
436 238 li
436 241 li
430 241 li
430 244 li
427 244 li
427 250 li
424 250 li
424 259 li
427 259 li
427 265 li
430 265 li
430 268 li
436 268 li
436 271 li
445 271 li
445 268 li
451 268 li
451 265 li
454 265 li
454 259 li
457 259 li
457 250 li
454 250 li
cp
.45098 .00392157 .00392157 rgb
f
451 250 mo
451 247 li
445 247 li
445 244 li
436 244 li
436 247 li
430 247 li
430 250 li
427 250 li
427 262 li
430 262 li
430 265 li
436 265 li
436 268 li
445 268 li
445 265 li
451 265 li
451 262 li
454 262 li
454 250 li
451 250 li
cp
.686275 .101961 .0980392 rgb
f
511 250 mo
511 244 li
508 244 li
508 241 li
505 241 li
505 238 li
499 238 li
499 235 li
490 235 li
490 238 li
484 238 li
484 241 li
481 241 li
481 244 li
478 244 li
478 250 li
475 250 li
475 259 li
478 259 li
478 265 li
481 265 li
481 268 li
484 268 li
484 271 li
490 271 li
490 274 li
499 274 li
499 271 li
505 271 li
505 268 li
508 268 li
508 265 li
511 265 li
511 259 li
514 259 li
514 250 li
511 250 li
cp
.270588 .270588 .270588 rgb
f
508 250 mo
508 244 li
505 244 li
505 241 li
499 241 li
499 238 li
490 238 li
490 241 li
484 241 li
484 244 li
481 244 li
481 250 li
478 250 li
478 259 li
481 259 li
481 265 li
484 265 li
484 268 li
490 268 li
490 271 li
499 271 li
499 268 li
505 268 li
505 265 li
508 265 li
508 259 li
511 259 li
511 250 li
508 250 li
cp
.180392 .145098 .145098 rgb
f
406 85 mo
406 82 li
403 82 li
403 79 li
376 79 li
376 82 li
373 82 li
373 85 li
370 85 li
370 112 li
373 112 li
373 115 li
376 115 li
376 118 li
403 118 li
403 115 li
406 115 li
406 112 li
409 112 li
409 85 li
406 85 li
cp
.270588 .270588 .270588 rgb
f
403 85 mo
403 82 li
376 82 li
376 85 li
373 85 li
373 112 li
376 112 li
376 115 li
403 115 li
403 112 li
406 112 li
406 85 li
403 85 li
cp
.968627 .882353 .164706 rgb
f
403 109 mo
376 109 li
376 106 li
373 106 li
373 112 li
376 112 li
376 115 li
403 115 li
403 112 li
406 112 li
406 106 li
403 106 li
403 109 li
cp
.937255 .533333 .0392157 rgb
f
376 85 mo
376 94 li
379 94 li
379 91 li
382 91 li
382 88 li
400 88 li
400 85 li
376 85 li
cp
1 .996078 .0980392 rgb
f
376 85 mo
376 91 li
379 91 li
379 88 li
385 88 li
385 85 li
376 85 li
cp
1 1 1 rgb
f
511 85 mo
511 82 li
508 82 li
508 79 li
481 79 li
481 82 li
478 82 li
478 85 li
475 85 li
475 112 li
478 112 li
478 115 li
481 115 li
481 118 li
508 118 li
508 115 li
511 115 li
511 112 li
514 112 li
514 85 li
511 85 li
cp
.270588 .270588 .270588 rgb
f
508 85 mo
508 82 li
481 82 li
481 85 li
478 85 li
478 112 li
481 112 li
481 115 li
508 115 li
508 112 li
511 112 li
511 85 li
508 85 li
cp
.709804 .423529 .00784314 rgb
f
481 88 mo
481 112 li
508 112 li
508 88 li
481 88 li
cp
.937255 .533333 .0392157 rgb
f
481 187 mo
478 187 li
478 190 li
475 190 li
475 217 li
478 217 li
478 220 li
481 220 li
481 223 li
508 223 li
508 220 li
511 220 li
511 217 li
514 217 li
514 190 li
511 190 li
511 187 li
508 187 li
508 184 li
481 184 li
481 187 li
cp
.270588 .270588 .270588 rgb
f
481 190 mo
478 190 li
478 217 li
481 217 li
481 220 li
508 220 li
508 217 li
511 217 li
511 190 li
508 190 li
508 187 li
481 187 li
481 190 li
cp
.180392 .145098 .145098 rgb
f
457 148 mo
457 142 li
454 142 li
454 139 li
451 139 li
451 136 li
445 136 li
445 133 li
439 133 li
439 136 li
433 136 li
433 139 li
430 139 li
430 142 li
427 142 li
427 148 li
424 148 li
424 154 li
427 154 li
427 160 li
430 160 li
430 163 li
433 163 li
433 166 li
439 166 li
439 169 li
445 169 li
445 166 li
451 166 li
451 163 li
454 163 li
454 160 li
457 160 li
457 154 li
460 154 li
460 148 li
457 148 li
cp
.270588 .270588 .270588 rgb
f
454 148 mo
454 142 li
451 142 li
451 139 li
445 139 li
445 136 li
439 136 li
439 139 li
433 139 li
433 142 li
430 142 li
430 148 li
427 148 li
427 154 li
430 154 li
430 160 li
433 160 li
433 163 li
439 163 li
439 166 li
445 166 li
445 163 li
451 163 li
451 160 li
454 160 li
454 154 li
457 154 li
457 148 li
454 148 li
cp
.556863 .741176 .129412 rgb
f
454 151 mo
454 154 li
451 154 li
451 157 li
448 157 li
448 160 li
436 160 li
436 157 li
433 157 li
433 154 li
430 154 li
430 151 li
427 151 li
427 154 li
430 154 li
430 160 li
433 160 li
433 163 li
439 163 li
439 166 li
445 166 li
445 163 li
451 163 li
451 160 li
454 160 li
454 154 li
457 154 li
457 151 li
454 151 li
cp
.364706 .490196 .0862745 rgb
f
436 139 mo
436 142 li
433 142 li
433 148 li
436 148 li
436 145 li
442 145 li
442 142 li
445 142 li
445 139 li
436 139 li
cp
.576471 .87451 .160784 rgb
f
436 139 mo
436 142 li
433 142 li
433 145 li
439 145 li
439 142 li
442 142 li
442 139 li
436 139 li
cp
1 1 1 rgb
f
403 199 mo
403 196 li
400 196 li
400 193 li
394 193 li
394 190 li
388 190 li
388 187 li
382 187 li
382 184 li
373 184 li
373 220 li
382 220 li
382 217 li
388 217 li
388 214 li
394 214 li
394 211 li
400 211 li
400 208 li
403 208 li
403 205 li
406 205 li
406 199 li
403 199 li
cp
.270588 .270588 .270588 rgb
f
400 199 mo
400 196 li
394 196 li
394 193 li
388 193 li
388 190 li
382 190 li
382 187 li
376 187 li
376 217 li
382 217 li
382 214 li
388 214 li
388 211 li
394 211 li
394 208 li
400 208 li
400 205 li
403 205 li
403 199 li
400 199 li
cp
.576471 .87451 .160784 rgb
f
376 202 mo
376 217 li
382 217 li
382 214 li
388 214 li
388 211 li
394 211 li
394 208 li
400 208 li
400 205 li
403 205 li
403 202 li
376 202 li
cp
.556863 .741176 .129412 rgb
f
397 208 mo
400 208 li
400 205 li
397 205 li
397 208 li
cp
.364706 .490196 .0862745 rgb
f
397 196 mo
400 196 li
400 199 li
397 199 li
397 196 li
cp
.556863 .741176 .129412 rgb
f
385 214 mo
388 214 li
388 211 li
385 211 li
385 214 li
cp
.364706 .490196 .0862745 rgb
f
379 217 mo
382 217 li
382 214 li
379 214 li
379 217 li
cp
f
391 211 mo
394 211 li
394 208 li
391 208 li
391 211 li
cp
f
385 190 mo
388 190 li
388 193 li
385 193 li
385 190 li
cp
.556863 .741176 .129412 rgb
f
379 187 mo
382 187 li
382 190 li
379 190 li
379 187 li
cp
f
391 193 mo
394 193 li
394 196 li
391 196 li
391 193 li
cp
f
382 193 mo
382 190 li
379 190 li
379 196 li
388 196 li
388 193 li
382 193 li
cp
1 1 1 rgb
f
511 391 mo
511 385 li
508 385 li
508 382 li
505 382 li
505 379 li
499 379 li
499 376 li
379 376 li
379 379 li
373 379 li
373 382 li
370 382 li
370 385 li
367 385 li
367 391 li
364 391 li
364 409 li
367 409 li
367 415 li
370 415 li
370 418 li
373 418 li
373 421 li
379 421 li
379 424 li
499 424 li
499 421 li
505 421 li
505 418 li
508 418 li
508 415 li
511 415 li
511 409 li
514 409 li
514 391 li
511 391 li
cp
.270588 .270588 .270588 rgb
f
508 391 mo
508 385 li
505 385 li
505 382 li
499 382 li
499 379 li
379 379 li
379 382 li
373 382 li
373 385 li
370 385 li
370 391 li
367 391 li
367 409 li
370 409 li
370 415 li
373 415 li
373 418 li
379 418 li
379 421 li
499 421 li
499 418 li
505 418 li
505 415 li
508 415 li
508 409 li
511 409 li
511 391 li
508 391 li
cp
.556863 .741176 .129412 rgb
f
508 406 mo
508 409 li
505 409 li
505 412 li
502 412 li
502 415 li
376 415 li
376 412 li
373 412 li
373 409 li
370 409 li
370 406 li
367 406 li
367 409 li
370 409 li
370 415 li
373 415 li
373 418 li
379 418 li
379 421 li
499 421 li
499 418 li
505 418 li
505 415 li
508 415 li
508 409 li
511 409 li
511 406 li
508 406 li
cp
.364706 .490196 .0862745 rgb
f
376 382 mo
376 385 li
373 385 li
373 391 li
376 391 li
376 388 li
382 388 li
382 385 li
499 385 li
499 382 li
376 382 li
cp
.576471 .87451 .160784 rgb
f
376 382 mo
376 385 li
373 385 li
373 388 li
379 388 li
379 385 li
382 385 li
382 382 li
376 382 li
cp
1 1 1 rgb
f
469 388 mo
469 397 li
466 397 li
466 388 li
460 388 li
460 400 li
469 400 li
469 406 li
460 406 li
460 409 li
475 409 li
475 388 li
469 388 li
cp
f
451 394 mo
451 397 li
445 397 li
445 391 li
448 391 li
448 394 li
451 394 li
cp
451 388 mo
442 388 li
442 391 li
439 391 li
439 409 li
445 409 li
445 400 li
451 400 li
451 409 li
454 409 li
454 391 li
451 391 li
451 388 li
cp
f
430 406 mo
424 406 li
424 388 li
418 388 li
418 409 li
433 409 li
433 403 li
430 403 li
430 406 li
cp
f
409 397 mo
412 397 li
412 391 li
409 391 li
409 397 li
cp
409 397 mo
409 400 li
403 400 li
403 409 li
397 409 li
397 388 li
409 388 li
409 391 li
403 391 li
403 397 li
409 397 li
cp
f
340 382 mo
340 379 li
337 379 li
337 376 li
199 376 li
199 379 li
196 379 li
196 382 li
193 382 li
193 418 li
196 418 li
196 421 li
199 421 li
199 424 li
337 424 li
337 421 li
340 421 li
340 418 li
343 418 li
343 382 li
340 382 li
cp
.270588 .270588 .270588 rgb
f
337 382 mo
337 379 li
199 379 li
199 382 li
196 382 li
196 418 li
199 418 li
199 421 li
337 421 li
337 418 li
340 418 li
340 382 li
337 382 li
cp
.968627 .882353 .164706 rgb
f
337 415 mo
199 415 li
199 412 li
196 412 li
196 418 li
199 418 li
199 421 li
337 421 li
337 418 li
340 418 li
340 412 li
337 412 li
337 415 li
cp
.937255 .533333 .0392157 rgb
f
199 382 mo
199 391 li
202 391 li
202 388 li
205 388 li
205 385 li
334 385 li
334 382 li
199 382 li
cp
1 .996078 .0980392 rgb
f
199 382 mo
199 388 li
202 388 li
202 385 li
208 385 li
208 382 li
199 382 li
cp
1 1 1 rgb
f
307 391 mo
316 391 li
316 388 li
301 388 li
301 409 li
316 409 li
316 406 li
307 406 li
307 400 li
313 400 li
313 397 li
307 397 li
307 391 li
cp
.45098 .00392157 .00392157 rgb
f
280 388 mo
280 400 li
289 400 li
289 406 li
280 406 li
280 409 li
295 409 li
295 397 li
286 397 li
286 391 li
295 391 li
295 388 li
280 388 li
cp
f
268 388 mo
268 406 li
265 406 li
265 388 li
259 388 li
259 409 li
274 409 li
274 388 li
268 388 li
cp
f
250 394 mo
250 397 li
244 397 li
244 391 li
247 391 li
247 394 li
250 394 li
cp
250 388 mo
241 388 li
241 391 li
238 391 li
238 409 li
244 409 li
244 400 li
250 400 li
250 409 li
253 409 li
253 391 li
250 391 li
250 388 li
cp
f
229 397 mo
232 397 li
232 391 li
229 391 li
229 397 li
cp
229 397 mo
229 400 li
223 400 li
223 409 li
217 409 li
217 388 li
229 388 li
229 391 li
223 391 li
223 397 li
229 397 li
cp
f
521.463 364 mo
524.463 364 li
524.463 355 li
521.463 355 li
521.463 364 li
cp
521.463 346 mo
521.463 352 li
524.463 352 li
524.463 346 li
521.463 346 li
cp
521.463 352 mo
521.463 355 li
515.463 355 li
515.463 364 li
509.463 364 li
509.463 346 li
512.463 346 li
512.463 343 li
521.463 343 li
521.463 346 li
515.463 346 li
515.463 352 li
521.463 352 li
cp
1 1 1 rgb
f
490 343 mo
490 364 li
505 364 li
505 361 li
496 361 li
496 355 li
502 355 li
502 352 li
496 352 li
496 346 li
505 346 li
505 343 li
490 343 li
cp
f
481 358 mo
478 358 li
478 361 li
475 361 li
475 343 li
469 343 li
469 361 li
472 361 li
472 364 li
481 364 li
481 361 li
484 361 li
484 343 li
481 343 li
481 358 li
cp
f
460 349 mo
460 358 li
457 358 li
457 361 li
454 361 li
454 346 li
457 346 li
457 349 li
460 349 li
cp
460 343 mo
451 343 li
451 346 li
448 346 li
448 361 li
451 361 li
451 364 li
460 364 li
460 361 li
463 361 li
463 346 li
460 346 li
460 343 li
cp
f
421 343 mo
421 364 li
436 364 li
436 361 li
427 361 li
427 355 li
433 355 li
433 352 li
427 352 li
427 346 li
436 346 li
436 343 li
421 343 li
cp
f
406 346 mo
403 346 li
403 343 li
397 343 li
397 364 li
403 364 li
403 352 li
406 352 li
406 346 li
cp
406 355 mo
409 355 li
409 352 li
406 352 li
406 355 li
cp
412 343 mo
415 343 li
415 364 li
412 364 li
412 352 li
409 352 li
409 346 li
412 346 li
412 343 li
cp
f
388 349 mo
388 352 li
382 352 li
382 346 li
385 346 li
385 349 li
388 349 li
cp
388 343 mo
379 343 li
379 346 li
376 346 li
376 364 li
382 364 li
382 355 li
388 355 li
388 364 li
391 364 li
391 346 li
388 346 li
388 343 li
cp
f
367 349 mo
370 349 li
370 346 li
367 346 li
367 349 li
cp
367 343 mo
367 346 li
361 346 li
361 361 li
367 361 li
367 358 li
364 358 li
364 355 li
370 355 li
370 364 li
358 364 li
358 361 li
355 361 li
355 346 li
358 346 li
358 343 li
367 343 li
cp
f
511 289 mo
511 286 li
508 286 li
508 283 li
370 283 li
370 286 li
367 286 li
367 289 li
364 289 li
364 325 li
367 325 li
367 328 li
370 328 li
370 331 li
508 331 li
508 328 li
511 328 li
511 325 li
514 325 li
514 289 li
511 289 li
cp
.270588 .270588 .270588 rgb
f
508 289 mo
508 286 li
370 286 li
370 289 li
367 289 li
367 325 li
370 325 li
370 328 li
508 328 li
508 325 li
511 325 li
511 289 li
508 289 li
cp
.968627 .882353 .164706 rgb
f
508 322 mo
370 322 li
370 319 li
367 319 li
367 325 li
370 325 li
370 328 li
508 328 li
508 325 li
511 325 li
511 319 li
508 319 li
508 322 li
cp
.937255 .533333 .0392157 rgb
f
370 289 mo
370 298 li
373 298 li
373 295 li
376 295 li
376 292 li
505 292 li
505 289 li
370 289 li
cp
1 .996078 .0980392 rgb
f
370 289 mo
370 295 li
373 295 li
373 292 li
379 292 li
379 289 li
370 289 li
cp
1 1 1 rgb
f
475 295 mo
475 313 li
472 313 li
472 295 li
466 295 li
466 313 li
469 313 li
469 316 li
478 316 li
478 313 li
481 313 li
481 295 li
475 295 li
cp
.45098 .00392157 .00392157 rgb
f
451 298 mo
448 298 li
448 295 li
442 295 li
442 316 li
448 316 li
448 304 li
451 304 li
451 298 li
cp
454 304 mo
451 304 li
451 310 li
454 310 li
454 304 li
cp
457 295 mo
460 295 li
460 316 li
454 316 li
454 310 li
457 310 li
457 295 li
cp
f
421 295 mo
421 316 li
436 316 li
436 313 li
427 313 li
427 307 li
433 307 li
433 304 li
427 304 li
427 298 li
436 298 li
436 295 li
421 295 li
cp
f
406 298 mo
403 298 li
403 295 li
397 295 li
397 316 li
403 316 li
403 304 li
406 304 li
406 298 li
cp
406 307 mo
409 307 li
409 304 li
406 304 li
406 307 li
cp
412 295 mo
415 295 li
415 316 li
412 316 li
412 304 li
409 304 li
409 298 li
412 298 li
412 295 li
cp
f
340 238 mo
340 232 li
337 232 li
337 229 li
334 229 li
334 226 li
328 226 li
328 223 li
208 223 li
208 226 li
202 226 li
202 229 li
199 229 li
199 232 li
196 232 li
196 238 li
193 238 li
193 256 li
196 256 li
196 262 li
199 262 li
199 265 li
202 265 li
202 268 li
208 268 li
208 271 li
328 271 li
328 268 li
334 268 li
334 265 li
337 265 li
337 262 li
340 262 li
340 256 li
343 256 li
343 238 li
340 238 li
cp
.270588 .270588 .270588 rgb
f
337 238 mo
337 232 li
334 232 li
334 229 li
328 229 li
328 226 li
208 226 li
208 229 li
202 229 li
202 232 li
199 232 li
199 238 li
196 238 li
196 256 li
199 256 li
199 262 li
202 262 li
202 265 li
208 265 li
208 268 li
328 268 li
328 265 li
334 265 li
334 262 li
337 262 li
337 256 li
340 256 li
340 238 li
337 238 li
cp
.87451 .164706 .160784 rgb
f
337 253 mo
337 256 li
334 256 li
334 259 li
331 259 li
331 262 li
205 262 li
205 259 li
202 259 li
202 256 li
199 256 li
199 253 li
196 253 li
196 256 li
199 256 li
199 262 li
202 262 li
202 265 li
208 265 li
208 268 li
328 268 li
328 265 li
334 265 li
334 262 li
337 262 li
337 256 li
340 256 li
340 253 li
337 253 li
cp
.686275 .101961 .0980392 rgb
f
205 229 mo
205 232 li
202 232 li
202 238 li
205 238 li
205 235 li
211 235 li
211 232 li
328 232 li
328 229 li
205 229 li
cp
1 .431373 .431373 rgb
f
205 229 mo
205 232 li
202 232 li
202 235 li
208 235 li
208 232 li
211 232 li
211 229 li
205 229 li
cp
1 1 1 rgb
f
298 236.5 mo
298 245.5 li
295 245.5 li
295 236.5 li
289 236.5 li
289 257.5 li
295 257.5 li
295 248.5 li
298 248.5 li
298 257.5 li
304 257.5 li
304 248.5 li
301 248.5 li
301 242.5 li
304 242.5 li
304 236.5 li
298 236.5 li
cp
f
280 242.5 mo
283 242.5 li
283 239.5 li
280 239.5 li
280 242.5 li
cp
271 236.5 mo
271 239.5 li
268 239.5 li
268 254.5 li
271 254.5 li
271 257.5 li
280 257.5 li
280 254.5 li
274 254.5 li
274 239.5 li
280 239.5 li
280 236.5 li
271 236.5 li
cp
283 254.5 mo
280 254.5 li
280 251.5 li
283 251.5 li
283 254.5 li
cp
f
259 242.5 mo
259 245.5 li
253 245.5 li
253 239.5 li
256 239.5 li
256 242.5 li
259 242.5 li
cp
259 236.5 mo
250 236.5 li
250 239.5 li
247 239.5 li
247 257.5 li
253 257.5 li
253 248.5 li
259 248.5 li
259 257.5 li
262 257.5 li
262 239.5 li
259 239.5 li
259 236.5 li
cp
f
238 254.5 mo
241 254.5 li
241 248.5 li
238 248.5 li
238 254.5 li
cp
238 245.5 mo
241 245.5 li
241 239.5 li
238 239.5 li
238 245.5 li
cp
238 245.5 mo
238 248.5 li
232 248.5 li
232 254.5 li
238 254.5 li
238 257.5 li
226 257.5 li
226 239.5 li
229 239.5 li
229 236.5 li
238 236.5 li
238 239.5 li
232 239.5 li
232 245.5 li
238 245.5 li
cp
f
340 181 mo
340 175 li
337 175 li
337 172 li
334 172 li
334 169 li
328 169 li
328 166 li
208 166 li
208 169 li
202 169 li
202 172 li
199 172 li
199 175 li
196 175 li
196 181 li
193 181 li
193 199 li
196 199 li
196 205 li
199 205 li
199 208 li
202 208 li
202 211 li
208 211 li
208 214 li
328 214 li
328 211 li
334 211 li
334 208 li
337 208 li
337 205 li
340 205 li
340 199 li
343 199 li
343 181 li
340 181 li
cp
.270588 .270588 .270588 rgb
f
337 181 mo
337 175 li
334 175 li
334 172 li
328 172 li
328 169 li
208 169 li
208 172 li
202 172 li
202 175 li
199 175 li
199 181 li
196 181 li
196 199 li
199 199 li
199 205 li
202 205 li
202 208 li
208 208 li
208 211 li
328 211 li
328 208 li
334 208 li
334 205 li
337 205 li
337 199 li
340 199 li
340 181 li
337 181 li
cp
.968627 .882353 .164706 rgb
f
337 196 mo
337 199 li
334 199 li
334 202 li
331 202 li
331 205 li
205 205 li
205 202 li
202 202 li
202 199 li
199 199 li
199 196 li
196 196 li
196 199 li
199 199 li
199 205 li
202 205 li
202 208 li
208 208 li
208 211 li
328 211 li
328 208 li
334 208 li
334 205 li
337 205 li
337 199 li
340 199 li
340 196 li
337 196 li
cp
.937255 .533333 .0392157 rgb
f
205 172 mo
205 175 li
202 175 li
202 181 li
205 181 li
205 178 li
211 178 li
211 175 li
328 175 li
328 172 li
205 172 li
cp
1 .996078 .0980392 rgb
f
205 172 mo
205 175 li
202 175 li
202 178 li
208 178 li
208 175 li
211 175 li
211 172 li
205 172 li
cp
1 1 1 rgb
f
292 178 mo
292 181 li
298 181 li
298 199 li
304 199 li
304 181 li
310 181 li
310 178 li
292 178 li
cp
.45098 .00392157 .00392157 rgb
f
280 178 mo
280 184 li
277 184 li
277 178 li
271 178 li
271 184 li
274 184 li
274 193 li
271 193 li
271 199 li
277 199 li
277 193 li
280 193 li
280 199 li
286 199 li
286 193 li
283 193 li
283 184 li
286 184 li
286 178 li
280 178 li
cp
f
250 178 mo
250 199 li
265 199 li
265 196 li
256 196 li
256 190 li
262 190 li
262 187 li
256 187 li
256 181 li
265 181 li
265 178 li
250 178 li
cp
f
235 181 mo
232 181 li
232 178 li
226 178 li
226 199 li
232 199 li
232 187 li
235 187 li
235 181 li
cp
238 187 mo
235 187 li
235 193 li
238 193 li
238 187 li
cp
241 178 mo
244 178 li
244 199 li
238 199 li
238 193 li
241 193 li
241 178 li
cp
f
514 40 mo
514 34 li
511 34 li
511 31 li
508 31 li
508 28 li
502 28 li
502 25 li
382 25 li
382 28 li
376 28 li
376 31 li
373 31 li
373 34 li
370 34 li
370 40 li
367 40 li
367 58 li
370 58 li
370 64 li
373 64 li
373 67 li
376 67 li
376 70 li
382 70 li
382 73 li
502 73 li
502 70 li
508 70 li
508 67 li
511 67 li
511 64 li
514 64 li
514 58 li
517 58 li
517 40 li
514 40 li
cp
.270588 .270588 .270588 rgb
f
511 40 mo
511 34 li
508 34 li
508 31 li
502 31 li
502 28 li
382 28 li
382 31 li
376 31 li
376 34 li
373 34 li
373 40 li
370 40 li
370 58 li
373 58 li
373 64 li
376 64 li
376 67 li
382 67 li
382 70 li
502 70 li
502 67 li
508 67 li
508 64 li
511 64 li
511 58 li
514 58 li
514 40 li
511 40 li
cp
.556863 .741176 .129412 rgb
f
511 55 mo
511 58 li
508 58 li
508 61 li
505 61 li
505 64 li
379 64 li
379 61 li
376 61 li
376 58 li
373 58 li
373 55 li
370 55 li
370 58 li
373 58 li
373 64 li
376 64 li
376 67 li
382 67 li
382 70 li
502 70 li
502 67 li
508 67 li
508 64 li
511 64 li
511 58 li
514 58 li
514 55 li
511 55 li
cp
.364706 .490196 .0862745 rgb
f
379 31 mo
379 34 li
376 34 li
376 40 li
379 40 li
379 37 li
385 37 li
385 34 li
502 34 li
502 31 li
379 31 li
cp
.576471 .87451 .160784 rgb
f
379 31 mo
379 34 li
376 34 li
376 37 li
382 37 li
382 34 li
385 34 li
385 31 li
379 31 li
cp
1 1 1 rgb
f
472 37 mo
472 40 li
478 40 li
478 58 li
484 58 li
484 40 li
490 40 li
490 37 li
472 37 li
cp
f
466 58 mo
469 58 li
469 49 li
466 49 li
466 58 li
cp
466 46 mo
469 46 li
469 40 li
466 40 li
466 46 li
cp
466 46 mo
466 49 li
460 49 li
460 58 li
454 58 li
454 40 li
457 40 li
457 37 li
466 37 li
466 40 li
460 40 li
460 46 li
466 46 li
cp
f
448 43 mo
448 46 li
442 46 li
442 40 li
445 40 li
445 43 li
448 43 li
cp
448 37 mo
439 37 li
439 40 li
436 40 li
436 58 li
442 58 li
442 49 li
448 49 li
448 58 li
451 58 li
451 40 li
448 40 li
448 37 li
cp
f
415 37 mo
415 40 li
421 40 li
421 58 li
427 58 li
427 40 li
433 40 li
433 37 li
415 37 li
cp
f
397 49 mo
406 49 li
406 55 li
397 55 li
397 58 li
412 58 li
412 46 li
403 46 li
403 40 li
412 40 li
412 37 li
397 37 li
397 49 li
cp
f
238 100 mo
238 97 li
235 97 li
235 91 li
232 91 li
232 85 li
229 85 li
229 79 li
226 79 li
226 76 li
220 76 li
220 79 li
217 79 li
217 85 li
214 85 li
214 91 li
211 91 li
211 97 li
208 97 li
208 100 li
184 100 li
184 106 li
187 106 li
187 109 li
190 109 li
190 112 li
193 112 li
193 115 li
196 115 li
196 118 li
199 118 li
199 121 li
202 121 li
202 130 li
199 130 li
199 136 li
196 136 li
196 142 li
193 142 li
193 148 li
190 148 li
190 154 li
202 154 li
202 151 li
205 151 li
205 148 li
211 148 li
211 145 li
214 145 li
214 142 li
220 142 li
220 139 li
226 139 li
226 142 li
232 142 li
232 145 li
235 145 li
235 148 li
241 148 li
241 151 li
244 151 li
244 154 li
256 154 li
256 148 li
253 148 li
253 142 li
250 142 li
250 136 li
247 136 li
247 130 li
244 130 li
244 121 li
247 121 li
247 118 li
250 118 li
250 115 li
253 115 li
253 112 li
256 112 li
256 109 li
259 109 li
259 106 li
262 106 li
262 100 li
238 100 li
cp
.709804 .423529 .00784314 rgb
f
190 103 mo
190 106 li
196 106 li
196 109 li
202 109 li
202 112 li
214 112 li
214 103 li
190 103 li
cp
226 88 mo
226 103 li
223 103 li
223 112 li
220 112 li
220 103 li
214 103 li
214 94 li
217 94 li
217 88 li
220 88 li
220 82 li
223 82 li
223 88 li
226 88 li
cp
1 1 1 rgb
f
250 148 mo
250 145 li
247 145 li
247 148 li
250 148 li
cp
193 151 mo
196 151 li
196 148 li
193 148 li
193 151 li
cp
196 148 mo
199 148 li
199 145 li
196 145 li
196 148 li
cp
196 109 mo
196 112 li
202 112 li
202 109 li
196 109 li
cp
193 106 mo
193 109 li
196 109 li
196 106 li
193 106 li
cp
235 103 mo
235 100 li
232 100 li
232 97 li
229 97 li
229 91 li
226 91 li
226 103 li
232 103 li
232 112 li
238 112 li
238 109 li
247 109 li
247 106 li
253 106 li
253 103 li
235 103 li
cp
223 112 mo
220 112 li
220 121 li
214 121 li
214 112 li
202 112 li
202 115 li
205 115 li
205 118 li
211 118 li
211 124 li
208 124 li
208 130 li
205 130 li
205 136 li
202 136 li
202 142 li
199 142 li
199 145 li
205 145 li
205 142 li
208 142 li
208 139 li
211 139 li
211 136 li
214 136 li
214 133 li
217 133 li
217 130 li
220 130 li
220 127 li
226 127 li
226 130 li
229 130 li
229 133 li
232 133 li
232 136 li
235 136 li
235 139 li
238 139 li
238 142 li
241 142 li
241 145 li
247 145 li
247 142 li
244 142 li
244 139 li
241 139 li
241 136 li
238 136 li
238 130 li
235 130 li
235 127 li
232 127 li
232 124 li
229 124 li
229 121 li
223 121 li
223 115 li
226 115 li
226 103 li
223 103 li
223 112 li
cp
187 106 mo
190 106 li
190 103 li
187 103 li
187 106 li
cp
214 97 mo
211 97 li
211 103 li
214 103 li
214 97 li
cp
217 91 mo
214 91 li
214 94 li
217 94 li
217 91 li
cp
223 88 mo
226 88 li
226 85 li
223 85 li
223 88 li
cp
220 85 mo
217 85 li
217 88 li
220 88 li
220 85 li
cp
223 82 mo
220 82 li
220 79 li
223 79 li
223 82 li
cp
1 .996078 .0980392 rgb
f
247 148 mo
247 151 li
253 151 li
253 148 li
247 148 li
cp
244 145 mo
244 148 li
247 148 li
247 145 li
244 145 li
cp
250 142 mo
247 142 li
247 145 li
250 145 li
250 142 li
cp
235 142 mo
238 142 li
238 139 li
235 139 li
235 142 li
cp
247 136 mo
244 136 li
244 130 li
241 130 li
241 124 li
238 124 li
238 118 li
241 118 li
241 115 li
244 115 li
244 112 li
247 112 li
247 109 li
238 109 li
238 112 li
232 112 li
232 121 li
229 121 li
229 124 li
232 124 li
232 127 li
235 127 li
235 130 li
238 130 li
238 136 li
241 136 li
241 139 li
244 139 li
244 142 li
247 142 li
247 136 li
cp
232 136 mo
232 139 li
235 139 li
235 136 li
232 136 li
cp
229 133 mo
229 136 li
232 136 li
232 133 li
229 133 li
cp
199 145 mo
199 148 li
196 148 li
196 151 li
202 151 li
202 148 li
205 148 li
205 145 li
199 145 li
cp
205 145 mo
208 145 li
208 142 li
205 142 li
205 145 li
cp
196 142 mo
196 145 li
199 145 li
199 142 li
196 142 li
cp
208 142 mo
211 142 li
211 139 li
208 139 li
208 142 li
cp
202 136 mo
199 136 li
199 142 li
202 142 li
202 136 li
cp
211 139 mo
214 139 li
214 136 li
211 136 li
211 139 li
cp
214 136 mo
217 136 li
217 133 li
214 133 li
214 136 li
cp
205 130 mo
202 130 li
202 136 li
205 136 li
205 130 li
cp
226 130 mo
226 133 li
229 133 li
229 130 li
226 130 li
cp
217 133 mo
220 133 li
220 130 li
217 130 li
217 133 li
cp
220 127 mo
220 130 li
226 130 li
226 127 li
220 127 li
cp
208 124 mo
205 124 li
205 130 li
208 130 li
208 124 li
cp
211 118 mo
205 118 li
205 121 li
208 121 li
208 124 li
211 124 li
211 118 li
cp
226 115 mo
223 115 li
223 121 li
226 121 li
226 115 li
cp
202 115 mo
202 118 li
205 118 li
205 115 li
202 115 li
cp
196 112 mo
196 115 li
202 115 li
202 112 li
196 112 li
cp
193 109 mo
193 112 li
196 112 li
196 109 li
193 109 li
cp
250 106 mo
247 106 li
247 109 li
250 109 li
250 106 li
cp
190 106 mo
190 109 li
193 109 li
193 106 li
190 106 li
cp
253 103 mo
253 106 li
256 106 li
256 103 li
253 103 li
cp
235 100 mo
235 97 li
232 97 li
232 100 li
235 100 li
cp
229 97 mo
232 97 li
232 91 li
229 91 li
229 97 li
cp
226 91 mo
229 91 li
229 85 li
226 85 li
226 91 li
cp
226 85 mo
223 85 li
223 79 li
226 79 li
226 85 li
cp
.968627 .882353 .164706 rgb
f
256 103 mo
256 106 li
259 106 li
259 103 li
256 103 li
cp
244 151 mo
247 151 li
247 148 li
244 148 li
244 151 li
cp
241 145 mo
241 148 li
244 148 li
244 145 li
241 145 li
cp
235 142 mo
235 145 li
241 145 li
241 142 li
235 142 li
cp
232 139 mo
232 142 li
235 142 li
235 139 li
232 139 li
cp
229 136 mo
229 133 li
226 133 li
226 130 li
220 130 li
220 133 li
217 133 li
217 136 li
214 136 li
214 139 li
220 139 li
220 136 li
226 136 li
226 139 li
232 139 li
232 136 li
229 136 li
cp
208 145 mo
211 145 li
211 142 li
208 142 li
208 145 li
cp
211 142 mo
214 142 li
214 139 li
211 139 li
211 142 li
cp
208 124 mo
208 121 li
205 121 li
205 124 li
208 124 li
cp
202 118 mo
202 121 li
205 121 li
205 118 li
202 118 li
cp
199 115 mo
199 118 li
202 118 li
202 115 li
199 115 li
cp
256 106 mo
256 109 li
253 109 li
253 112 li
250 112 li
250 115 li
247 115 li
247 118 li
244 118 li
244 121 li
241 121 li
241 124 li
238 124 li
238 118 li
241 118 li
241 115 li
244 115 li
244 112 li
247 112 li
247 109 li
250 109 li
250 106 li
256 106 li
cp
.937255 .533333 .0392157 rgb
f
226 103 mo
226 115 li
229 115 li
229 103 li
226 103 li
cp
214 103 mo
217 103 li
217 115 li
214 115 li
214 103 li
cp
.270588 .270588 .270588 rgb
f
229 103 mo
229 115 li
226 115 li
226 121 li
232 121 li
232 103 li
229 103 li
cp
217 103 mo
220 103 li
220 121 li
214 121 li
214 115 li
217 115 li
217 103 li
cp
.0901961 .0156863 .0156863 rgb
f
304 43 mo
304 37 li
301 37 li
301 34 li
298 34 li
298 31 li
295 31 li
295 28 li
292 28 li
292 25 li
280 25 li
280 28 li
277 28 li
277 31 li
274 31 li
274 34 li
271 34 li
271 37 li
265 37 li
265 34 li
262 34 li
262 31 li
259 31 li
259 28 li
256 28 li
256 25 li
244 25 li
244 28 li
241 28 li
241 31 li
238 31 li
238 34 li
235 34 li
235 37 li
232 37 li
232 43 li
229 43 li
229 55 li
232 55 li
232 61 li
235 61 li
235 64 li
238 64 li
238 67 li
241 67 li
241 70 li
244 70 li
244 73 li
247 73 li
247 76 li
250 76 li
250 79 li
253 79 li
253 82 li
256 82 li
256 85 li
259 85 li
259 88 li
262 88 li
262 91 li
265 91 li
265 94 li
271 94 li
271 91 li
274 91 li
274 88 li
277 88 li
277 85 li
280 85 li
280 82 li
283 82 li
283 79 li
286 79 li
286 76 li
289 76 li
289 73 li
292 73 li
292 70 li
295 70 li
295 67 li
298 67 li
298 64 li
301 64 li
301 61 li
304 61 li
304 55 li
307 55 li
307 43 li
304 43 li
cp
.45098 .00392157 .00392157 rgb
f
250 40 mo
250 37 li
247 37 li
247 40 li
244 40 li
244 43 li
241 43 li
241 46 li
244 46 li
244 49 li
250 49 li
250 46 li
253 46 li
253 40 li
250 40 li
cp
250 52 mo
253 52 li
253 55 li
250 55 li
250 52 li
cp
1 1 1 rgb
f
253 55 mo
256 55 li
256 52 li
253 52 li
253 55 li
cp
256 37 mo
256 43 li
253 43 li
253 40 li
250 40 li
250 37 li
247 37 li
247 40 li
244 40 li
244 43 li
241 43 li
241 46 li
244 46 li
244 49 li
247 49 li
247 52 li
241 52 li
241 49 li
238 49 li
238 40 li
241 40 li
241 37 li
244 37 li
244 34 li
253 34 li
253 37 li
256 37 li
cp
1 .431373 .431373 rgb
f
292 34 mo
292 37 li
295 37 li
295 34 li
292 34 li
cp
298 40 mo
298 46 li
295 46 li
295 49 li
292 49 li
292 52 li
289 52 li
289 55 li
286 55 li
286 58 li
283 58 li
283 61 li
280 61 li
280 64 li
274 64 li
274 67 li
268 67 li
268 70 li
262 70 li
262 73 li
250 73 li
250 76 li
256 76 li
256 79 li
259 79 li
259 82 li
265 82 li
265 79 li
271 79 li
271 76 li
274 76 li
274 73 li
277 73 li
277 70 li
280 70 li
280 67 li
283 67 li
283 64 li
286 64 li
286 61 li
289 61 li
289 58 li
292 58 li
292 55 li
295 55 li
295 52 li
298 52 li
298 49 li
301 49 li
301 40 li
298 40 li
cp
259 37 mo
259 34 li
256 34 li
256 37 li
259 37 li
cp
277 34 mo
274 34 li
274 37 li
277 37 li
277 34 li
cp
283 28 mo
280 28 li
280 31 li
283 31 li
283 28 li
cp
241 34 mo
238 34 li
238 37 li
241 37 li
241 34 li
cp
235 43 mo
232 43 li
232 55 li
235 55 li
235 43 li
cp
238 61 mo
238 64 li
241 64 li
241 61 li
238 61 li
cp
244 67 mo
244 70 li
247 70 li
247 67 li
244 67 li
cp
247 70 mo
247 73 li
250 73 li
250 70 li
247 70 li
cp
241 64 mo
241 67 li
244 67 li
244 64 li
241 64 li
cp
238 37 mo
235 37 li
235 43 li
238 43 li
238 37 li
cp
292 28 mo
289 28 li
289 34 li
292 34 li
292 28 li
cp
271 43 mo
271 40 li
265 40 li
265 43 li
271 43 li
cp
253 31 mo
253 28 li
244 28 li
244 31 li
253 31 li
cp
274 37 mo
271 37 li
271 40 li
274 40 li
274 37 li
cp
280 31 mo
277 31 li
277 34 li
280 34 li
280 31 li
cp
295 37 mo
295 40 li
298 40 li
298 37 li
295 37 li
cp
265 40 mo
265 37 li
259 37 li
259 40 li
265 40 li
cp
256 34 mo
256 31 li
253 31 li
253 34 li
256 34 li
cp
244 31 mo
241 31 li
241 34 li
244 34 li
244 31 li
cp
238 61 mo
235 61 li
235 55 li
238 55 li
238 61 li
cp
.686275 .101961 .0980392 rgb
f
268 82 mo
268 85 li
274 85 li
274 82 li
268 82 li
cp
268 67 mo
274 67 li
274 64 li
271 64 li
271 61 li
265 61 li
265 64 li
268 64 li
268 67 li
cp
289 40 mo
286 40 li
286 43 li
289 43 li
289 40 li
cp
265 40 mo
262 40 li
262 43 li
265 43 li
265 40 li
cp
262 58 mo
262 61 li
265 61 li
265 58 li
262 58 li
cp
238 58 mo
238 61 li
241 61 li
241 58 li
238 58 li
cp
289 28 mo
286 28 li
286 34 li
289 34 li
289 28 li
cp
274 73 mo
274 76 li
277 76 li
277 73 li
274 73 li
cp
274 64 mo
280 64 li
280 61 li
277 61 li
277 58 li
280 58 li
280 61 li
283 61 li
283 58 li
286 58 li
286 55 li
289 55 li
289 52 li
292 52 li
292 49 li
295 49 li
295 46 li
298 46 li
298 40 li
295 40 li
295 37 li
292 37 li
292 34 li
289 34 li
289 40 li
292 40 li
292 43 li
289 43 li
289 46 li
286 46 li
286 49 li
283 49 li
283 52 li
280 52 li
280 55 li
274 55 li
274 58 li
271 58 li
271 61 li
274 61 li
274 64 li
cp
283 76 mo
283 73 li
280 73 li
280 76 li
283 76 li
cp
280 70 mo
283 70 li
283 67 li
280 67 li
280 70 li
cp
286 70 mo
289 70 li
289 67 li
286 67 li
286 70 li
cp
286 64 mo
289 64 li
289 61 li
286 61 li
286 64 li
cp
292 55 mo
292 58 li
295 58 li
295 55 li
292 55 li
cp
295 31 mo
292 31 li
292 34 li
295 34 li
295 31 li
cp
301 49 mo
298 49 li
298 52 li
301 52 li
301 49 li
cp
301 58 mo
301 55 li
298 55 li
298 58 li
301 58 li
cp
274 40 mo
271 40 li
271 43 li
274 43 li
274 40 li
cp
271 52 mo
271 55 li
274 55 li
274 52 li
271 52 li
cp
271 79 mo
274 79 li
274 76 li
271 76 li
271 79 li
cp
277 79 mo
280 79 li
280 76 li
277 76 li
277 79 li
cp
277 73 mo
280 73 li
280 70 li
277 70 li
277 73 li
cp
283 64 mo
283 67 li
286 67 li
286 64 li
283 64 li
cp
292 67 mo
292 64 li
289 64 li
289 67 li
292 67 li
cp
289 61 mo
292 61 li
292 58 li
289 58 li
289 61 li
cp
295 52 mo
295 55 li
298 55 li
298 52 li
295 52 li
cp
295 61 mo
298 61 li
298 58 li
295 58 li
295 61 li
cp
298 37 mo
298 34 li
295 34 li
295 37 li
298 37 li
cp
256 28 mo
253 28 li
253 31 li
256 31 li
256 28 li
cp
271 46 mo
271 43 li
265 43 li
265 46 li
271 46 li
cp
268 55 mo
265 55 li
265 58 li
268 58 li
268 55 li
cp
265 79 mo
265 82 li
268 82 li
268 79 li
265 79 li
cp
268 70 mo
268 67 li
265 67 li
265 64 li
256 64 li
256 67 li
259 67 li
259 70 li
256 70 li
256 67 li
250 67 li
250 64 li
247 64 li
247 61 li
241 61 li
241 64 li
244 64 li
244 67 li
247 67 li
247 70 li
250 70 li
250 73 li
262 73 li
262 70 li
268 70 li
cp
280 52 mo
280 49 li
274 49 li
274 52 li
280 52 li
cp
283 43 mo
283 46 li
286 46 li
286 43 li
283 43 li
cp
250 64 mo
250 61 li
256 61 li
256 64 li
250 64 li
cp
.780392 .133333 .129412 rgb
f
274 52 mo
274 55 li
280 55 li
280 52 li
274 52 li
cp
277 76 mo
274 76 li
274 79 li
268 79 li
268 82 li
274 82 li
274 85 li
277 85 li
277 82 li
280 82 li
280 79 li
277 79 li
277 76 li
cp
280 79 mo
283 79 li
283 76 li
280 76 li
280 79 li
cp
289 64 mo
286 64 li
286 67 li
289 67 li
289 64 li
cp
295 58 mo
292 58 li
292 61 li
289 61 li
289 64 li
292 64 li
292 67 li
295 67 li
295 64 li
298 64 li
298 61 li
295 61 li
295 58 li
cp
301 61 mo
301 58 li
298 58 li
298 61 li
301 61 li
cp
256 67 mo
256 64 li
250 64 li
250 67 li
256 67 li
cp
250 52 mo
250 55 li
256 55 li
256 52 li
250 52 li
cp
250 61 mo
250 64 li
247 64 li
247 61 li
241 61 li
241 58 li
238 58 li
238 55 li
235 55 li
235 43 li
238 43 li
238 49 li
241 49 li
241 52 li
247 52 li
247 49 li
250 49 li
250 46 li
253 46 li
253 43 li
256 43 li
256 37 li
259 37 li
259 40 li
262 40 li
262 43 li
265 43 li
265 46 li
271 46 li
271 43 li
274 43 li
274 37 li
277 37 li
277 34 li
280 34 li
280 31 li
283 31 li
283 28 li
286 28 li
286 34 li
289 34 li
289 40 li
286 40 li
286 43 li
283 43 li
283 46 li
286 46 li
286 49 li
283 49 li
283 52 li
280 52 li
280 49 li
274 49 li
274 52 li
271 52 li
271 55 li
274 55 li
274 58 li
271 58 li
271 61 li
265 61 li
265 58 li
268 58 li
268 55 li
265 55 li
265 58 li
262 58 li
262 61 li
265 61 li
265 64 li
256 64 li
256 61 li
250 61 li
cp
286 46 mo
289 46 li
289 43 li
286 43 li
286 46 li
cp
301 37 mo
298 37 li
298 40 li
301 40 li
301 37 li
cp
259 31 mo
256 31 li
256 34 li
259 34 li
259 31 li
cp
259 70 mo
259 67 li
256 67 li
256 70 li
259 70 li
cp
244 31 mo
244 34 li
253 34 li
253 31 li
244 31 li
cp
238 40 mo
241 40 li
241 37 li
238 37 li
238 40 li
cp
268 85 mo
268 82 li
259 82 li
259 85 li
262 85 li
262 88 li
265 88 li
265 91 li
271 91 li
271 88 li
274 88 li
274 85 li
268 85 li
cp
256 79 mo
256 82 li
259 82 li
259 79 li
256 79 li
cp
268 67 mo
268 64 li
265 64 li
265 67 li
268 67 li
cp
277 61 mo
280 61 li
280 58 li
277 58 li
277 61 li
cp
292 43 mo
292 40 li
289 40 li
289 43 li
292 43 li
cp
253 34 mo
253 37 li
256 37 li
256 34 li
253 34 li
cp
253 76 mo
253 79 li
256 79 li
256 76 li
253 76 li
cp
241 37 mo
244 37 li
244 34 li
241 34 li
241 37 li
cp
262 37 mo
262 34 li
259 34 li
259 37 li
262 37 li
cp
274 64 mo
274 61 li
271 61 li
271 64 li
274 64 li
cp
280 73 mo
277 73 li
277 76 li
280 76 li
280 73 li
cp
286 67 mo
283 67 li
283 70 li
280 70 li
280 73 li
283 73 li
283 76 li
286 76 li
286 73 li
289 73 li
289 70 li
286 70 li
286 67 li
cp
295 58 mo
298 58 li
298 55 li
295 55 li
295 58 li
cp
301 43 mo
301 52 li
298 52 li
298 55 li
304 55 li
304 43 li
301 43 li
cp
289 67 mo
292 67 li
292 70 li
289 70 li
289 67 li
cp
.87451 .164706 .160784 rgb
f
349 97 mo
349 94 li
346 94 li
346 88 li
343 88 li
343 85 li
340 85 li
340 82 li
334 82 li
334 79 li
328 79 li
328 76 li
310 76 li
310 79 li
304 79 li
304 82 li
298 82 li
298 85 li
295 85 li
295 88 li
292 88 li
292 94 li
289 94 li
289 97 li
286 97 li
286 133 li
289 133 li
289 136 li
292 136 li
292 142 li
295 142 li
295 145 li
298 145 li
298 148 li
304 148 li
304 151 li
310 151 li
310 154 li
328 154 li
328 151 li
334 151 li
334 148 li
340 148 li
340 145 li
343 145 li
343 142 li
346 142 li
346 136 li
349 136 li
349 133 li
352 133 li
352 97 li
349 97 li
cp
.709804 .423529 .00784314 rgb
f
310 91 mo
304 91 li
304 94 li
301 94 li
301 100 li
298 100 li
298 130 li
301 130 li
301 133 li
304 133 li
304 127 li
301 127 li
301 103 li
304 103 li
304 97 li
307 97 li
307 94 li
310 94 li
310 91 li
cp
343 97 mo
343 133 li
346 133 li
346 97 li
343 97 li
cp
313 127 mo
316 127 li
316 106 li
313 106 li
313 127 li
cp
331 94 mo
331 97 li
334 97 li
334 103 li
340 103 li
340 100 li
337 100 li
337 94 li
334 94 li
334 91 li
328 91 li
328 94 li
331 94 li
cp
319 97 mo
316 97 li
316 100 li
319 100 li
319 97 li
cp
310 145 mo
310 148 li
328 148 li
328 145 li
310 145 li
cp
340 136 mo
343 136 li
343 133 li
340 133 li
340 136 li
cp
310 133 mo
313 133 li
313 127 li
310 127 li
310 133 li
cp
310 103 mo
310 106 li
313 106 li
313 103 li
310 103 li
cp
328 91 mo
328 88 li
310 88 li
310 91 li
328 91 li
cp
337 139 mo
334 139 li
334 142 li
340 142 li
340 136 li
337 136 li
337 139 li
cp
316 100 mo
313 100 li
313 103 li
316 103 li
316 100 li
cp
325 97 mo
325 94 li
319 94 li
319 97 li
325 97 li
cp
334 142 mo
334 145 li
328 145 li
328 142 li
334 142 li
cp
.937255 .533333 .0392157 rgb
f
310 88 mo
310 85 li
304 85 li
304 88 li
310 88 li
cp
337 103 mo
337 127 li
334 127 li
334 133 li
331 133 li
331 136 li
328 136 li
328 139 li
334 139 li
334 136 li
337 136 li
337 130 li
340 130 li
340 103 li
337 103 li
cp
301 91 mo
304 91 li
304 88 li
298 88 li
298 94 li
301 94 li
301 91 li
cp
310 139 mo
310 142 li
328 142 li
328 139 li
310 139 li
cp
325 97 mo
322 97 li
322 127 li
325 127 li
325 97 li
cp
328 85 mo
328 82 li
310 82 li
310 85 li
328 85 li
cp
295 100 mo
298 100 li
298 94 li
295 94 li
295 100 li
cp
307 136 mo
307 133 li
301 133 li
301 136 li
304 136 li
304 139 li
310 139 li
310 136 li
307 136 li
cp
313 130 mo
313 133 li
328 133 li
328 127 li
325 127 li
325 130 li
313 130 li
cp
292 100 mo
295 100 li
295 130 li
292 130 li
292 100 li
cp
1 1 1 rgb
f
325 82 mo
325 79 li
310 79 li
310 82 li
325 82 li
cp
328 82 mo
328 85 li
331 85 li
331 82 li
328 82 li
cp
304 88 mo
304 85 li
298 85 li
298 88 li
304 88 li
cp
298 88 mo
295 88 li
295 94 li
298 94 li
298 88 li
cp
307 145 mo
307 142 li
301 142 li
301 139 li
298 139 li
298 133 li
295 133 li
295 130 li
292 130 li
292 100 li
295 100 li
295 94 li
292 94 li
292 97 li
289 97 li
289 133 li
292 133 li
292 136 li
295 136 li
295 142 li
298 142 li
298 145 li
304 145 li
304 148 li
310 148 li
310 145 li
307 145 li
cp
331 85 mo
331 88 li
337 88 li
337 85 li
331 85 li
cp
328 148 mo
331 148 li
331 145 li
328 145 li
328 148 li
cp
310 85 mo
310 82 li
304 82 li
304 85 li
310 85 li
cp
340 88 mo
337 88 li
337 94 li
340 94 li
340 88 li
cp
310 148 mo
310 151 li
325 151 li
325 148 li
310 148 li
cp
328 133 mo
328 127 li
325 127 li
325 94 li
319 94 li
319 97 li
316 97 li
316 100 li
313 100 li
313 103 li
310 103 li
310 106 li
313 106 li
313 127 li
310 127 li
310 133 li
328 133 li
cp
334 103 mo
337 103 li
337 127 li
334 127 li
334 133 li
331 133 li
331 136 li
328 136 li
328 139 li
310 139 li
310 136 li
307 136 li
307 133 li
304 133 li
304 127 li
301 127 li
301 103 li
304 103 li
304 97 li
307 97 li
307 94 li
310 94 li
310 91 li
328 91 li
328 94 li
331 94 li
331 97 li
334 97 li
334 103 li
cp
340 97 mo
343 97 li
343 94 li
340 94 li
340 97 li
cp
334 145 mo
337 145 li
337 142 li
334 142 li
334 145 li
cp
349 100 mo
349 130 li
346 130 li
346 100 li
349 100 li
cp
.968627 .882353 .164706 rgb
f
328 79 mo
325 79 li
325 82 li
328 82 li
328 79 li
cp
343 94 mo
343 97 li
346 97 li
346 94 li
343 94 li
cp
340 85 mo
337 85 li
337 88 li
340 88 li
340 85 li
cp
349 100 mo
349 97 li
346 97 li
346 100 li
349 100 li
cp
328 88 mo
328 91 li
334 91 li
334 94 li
337 94 li
337 88 li
331 88 li
331 85 li
310 85 li
310 88 li
328 88 li
cp
304 91 mo
301 91 li
301 94 li
304 94 li
304 91 li
cp
337 145 mo
340 145 li
340 142 li
337 142 li
337 145 li
cp
349 130 mo
346 130 li
346 133 li
349 133 li
349 130 li
cp
331 148 mo
334 148 li
334 145 li
331 145 li
331 148 li
cp
346 136 mo
346 133 li
343 133 li
343 136 li
346 136 li
cp
340 94 mo
343 94 li
343 88 li
340 88 li
340 94 li
cp
301 94 mo
298 94 li
298 100 li
301 100 li
301 94 li
cp
328 139 mo
328 142 li
334 142 li
334 139 li
328 139 li
cp
310 91 mo
310 88 li
304 88 li
304 91 li
310 91 li
cp
340 94 mo
337 94 li
337 100 li
340 100 li
340 130 li
337 130 li
337 136 li
340 136 li
340 133 li
343 133 li
343 97 li
340 97 li
340 94 li
cp
325 151 mo
328 151 li
328 148 li
325 148 li
325 151 li
cp
322 97 mo
319 97 li
319 100 li
316 100 li
316 103 li
313 103 li
313 106 li
316 106 li
316 127 li
313 127 li
313 130 li
325 130 li
325 127 li
322 127 li
322 97 li
cp
334 82 mo
331 82 li
331 85 li
334 85 li
334 82 li
cp
310 142 mo
310 139 li
304 139 li
304 136 li
301 136 li
301 130 li
298 130 li
298 100 li
295 100 li
295 133 li
298 133 li
298 139 li
301 139 li
301 142 li
307 142 li
307 145 li
328 145 li
328 142 li
310 142 li
cp
334 139 mo
337 139 li
337 136 li
334 136 li
334 139 li
cp
340 136 mo
343 136 li
343 142 li
340 142 li
340 136 li
cp
1 .996078 .0980392 rgb
f
337 337 mo
337 334 li
334 334 li
334 331 li
328 331 li
328 328 li
319 328 li
319 331 li
313 331 li
313 334 li
310 334 li
310 337 li
307 337 li
307 358 li
310 358 li
310 361 li
313 361 li
313 364 li
319 364 li
319 367 li
328 367 li
328 364 li
334 364 li
334 361 li
337 361 li
337 358 li
340 358 li
340 337 li
337 337 li
cp
.270588 .270588 .270588 rgb
f
337 337 mo
337 358 li
334 358 li
334 361 li
328 361 li
328 364 li
319 364 li
319 361 li
313 361 li
313 358 li
310 358 li
310 337 li
313 337 li
313 334 li
319 334 li
319 331 li
328 331 li
328 334 li
334 334 li
334 337 li
337 337 li
cp
.180392 .145098 .145098 rgb
f
325 352 mo
322 352 li
322 343 li
325 343 li
325 352 li
cp
319 340 mo
319 355 li
328 355 li
328 340 li
319 340 li
cp
.270588 .270588 .270588 rgb
f
337 289 mo
337 286 li
334 286 li
334 283 li
328 283 li
328 280 li
319 280 li
319 283 li
313 283 li
313 286 li
310 286 li
310 289 li
307 289 li
307 310 li
310 310 li
310 313 li
313 313 li
313 316 li
319 316 li
319 319 li
328 319 li
328 316 li
334 316 li
334 313 li
337 313 li
337 310 li
340 310 li
340 289 li
337 289 li
cp
.709804 .423529 .00784314 rgb
f
319 292 mo
319 307 li
322 307 li
322 295 li
328 295 li
328 292 li
319 292 li
cp
.937255 .533333 .0392157 rgb
f
334 286 mo
331 286 li
331 289 li
334 289 li
334 286 li
cp
331 292 mo
331 289 li
328 289 li
328 292 li
331 292 li
cp
322 304 mo
325 304 li
325 295 li
322 295 li
322 304 li
cp
319 310 mo
319 313 li
325 313 li
325 316 li
328 316 li
328 310 li
319 310 li
cp
331 313 mo
334 313 li
334 310 li
331 310 li
331 313 li
cp
328 307 mo
328 310 li
331 310 li
331 307 li
328 307 li
cp
316 307 mo
316 310 li
319 310 li
319 307 li
316 307 li
cp
337 310 mo
337 307 li
334 307 li
334 310 li
337 310 li
cp
334 292 mo
331 292 li
331 307 li
334 307 li
334 292 li
cp
337 292 mo
337 289 li
334 289 li
334 292 li
337 292 li
cp
316 307 mo
313 307 li
313 295 li
310 295 li
310 292 li
313 292 li
313 289 li
316 289 li
316 286 li
322 286 li
322 283 li
325 283 li
325 286 li
328 286 li
328 289 li
319 289 li
319 292 li
316 292 li
316 307 li
cp
1 .996078 .0980392 rgb
f
322 283 mo
319 283 li
319 286 li
322 286 li
322 283 li
cp
313 289 mo
316 289 li
316 286 li
313 286 li
313 289 li
cp
325 295 mo
325 304 li
322 304 li
322 307 li
328 307 li
328 295 li
325 295 li
cp
310 289 mo
313 289 li
313 292 li
310 292 li
310 289 li
cp
1 1 1 rgb
f
325 283 mo
325 286 li
328 286 li
328 283 li
325 283 li
cp
331 286 mo
328 286 li
328 289 li
331 289 li
331 286 li
cp
334 292 mo
334 289 li
331 289 li
331 292 li
334 292 li
cp
328 292 mo
328 289 li
319 289 li
319 292 li
328 292 li
cp
325 316 mo
325 313 li
319 313 li
319 316 li
325 316 li
cp
328 313 mo
331 313 li
331 310 li
328 310 li
328 313 li
cp
319 307 mo
319 310 li
328 310 li
328 307 li
319 307 li
cp
331 310 mo
334 310 li
334 307 li
331 307 li
331 310 li
cp
316 307 mo
313 307 li
313 295 li
310 295 li
310 310 li
313 310 li
313 313 li
319 313 li
319 310 li
316 310 li
316 307 li
cp
319 292 mo
316 292 li
316 307 li
319 307 li
319 292 li
cp
328 307 mo
331 307 li
331 292 li
328 292 li
328 307 li
cp
337 292 mo
337 307 li
334 307 li
334 292 li
337 292 li
cp
.968627 .882353 .164706 rgb
f
286 340 mo
286 337 li
283 337 li
283 334 li
274 334 li
274 337 li
271 337 li
271 340 li
268 340 li
268 337 li
265 337 li
265 334 li
256 334 li
256 337 li
253 337 li
253 340 li
250 340 li
250 352 li
253 352 li
253 355 li
256 355 li
256 358 li
259 358 li
259 361 li
262 361 li
262 364 li
265 364 li
265 367 li
274 367 li
274 364 li
277 364 li
277 361 li
280 361 li
280 358 li
283 358 li
283 355 li
286 355 li
286 352 li
289 352 li
289 340 li
286 340 li
cp
.270588 .270588 .270588 rgb
f
283 340 mo
283 337 li
274 337 li
274 340 li
271 340 li
271 343 li
268 343 li
268 340 li
265 340 li
265 337 li
256 337 li
256 340 li
253 340 li
253 352 li
256 352 li
256 355 li
259 355 li
259 358 li
262 358 li
262 361 li
265 361 li
265 364 li
274 364 li
274 361 li
277 361 li
277 358 li
280 358 li
280 355 li
283 355 li
283 352 li
286 352 li
286 340 li
283 340 li
cp
.180392 .145098 .145098 rgb
f
286 292 mo
286 289 li
283 289 li
283 286 li
274 286 li
274 289 li
271 289 li
271 292 li
268 292 li
268 289 li
265 289 li
265 286 li
256 286 li
256 289 li
253 289 li
253 292 li
250 292 li
250 304 li
253 304 li
253 307 li
256 307 li
256 310 li
259 310 li
259 313 li
262 313 li
262 316 li
265 316 li
265 319 li
274 319 li
274 316 li
277 316 li
277 313 li
280 313 li
280 310 li
283 310 li
283 307 li
286 307 li
286 304 li
289 304 li
289 292 li
286 292 li
cp
.45098 .00392157 .00392157 rgb
f
262 295 mo
262 298 li
265 298 li
265 295 li
262 295 li
cp
259 298 mo
262 298 li
262 301 li
259 301 li
259 298 li
cp
1 .431373 .431373 rgb
f
256 292 mo
256 301 li
259 301 li
259 298 li
262 298 li
262 295 li
265 295 li
265 292 li
256 292 li
cp
1 1 1 rgb
f
268 310 mo
268 313 li
274 313 li
274 310 li
268 310 li
cp
274 310 mo
277 310 li
277 307 li
274 307 li
274 310 li
cp
277 307 mo
280 307 li
280 304 li
277 304 li
277 307 li
cp
280 304 mo
283 304 li
283 301 li
280 301 li
280 304 li
cp
280 289 mo
280 292 li
283 292 li
283 289 li
280 289 li
cp
283 292 mo
283 295 li
286 295 li
286 292 li
283 292 li
cp
265 313 mo
268 313 li
268 316 li
265 316 li
265 313 li
cp
.686275 .101961 .0980392 rgb
f
271 295 mo
268 295 li
268 298 li
271 298 li
271 295 li
cp
277 289 mo
277 292 li
280 292 li
280 289 li
277 289 li
cp
280 292 mo
280 295 li
277 295 li
277 298 li
274 298 li
274 301 li
271 301 li
271 304 li
268 304 li
268 307 li
265 307 li
265 310 li
262 310 li
262 313 li
268 313 li
268 310 li
274 310 li
274 307 li
277 307 li
277 304 li
280 304 li
280 301 li
283 301 li
283 292 li
280 292 li
cp
259 307 mo
259 310 li
262 310 li
262 307 li
259 307 li
cp
259 304 mo
259 307 li
256 307 li
256 304 li
259 304 li
cp
.780392 .133333 .129412 rgb
f
268 313 mo
268 316 li
274 316 li
274 313 li
268 313 li
cp
274 313 mo
277 313 li
277 310 li
274 310 li
274 313 li
cp
277 310 mo
280 310 li
280 307 li
277 307 li
277 310 li
cp
280 307 mo
283 307 li
283 304 li
280 304 li
280 307 li
cp
283 295 mo
283 304 li
286 304 li
286 295 li
283 295 li
cp
268 304 mo
271 304 li
271 301 li
274 301 li
274 298 li
277 298 li
277 295 li
280 295 li
280 292 li
277 292 li
277 289 li
274 289 li
274 292 li
271 292 li
271 298 li
268 298 li
268 292 li
265 292 li
265 298 li
262 298 li
262 301 li
256 301 li
256 292 li
253 292 li
253 304 li
259 304 li
259 307 li
262 307 li
262 310 li
265 310 li
265 307 li
268 307 li
268 304 li
cp
256 292 mo
256 289 li
265 289 li
265 292 li
256 292 li
cp
.87451 .164706 .160784 rgb
f
220 340 mo
220 337 li
217 337 li
217 331 li
214 331 li
214 328 li
211 328 li
211 331 li
208 331 li
208 337 li
205 337 li
205 340 li
193 340 li
193 346 li
196 346 li
196 349 li
199 349 li
199 352 li
202 352 li
202 355 li
199 355 li
199 361 li
196 361 li
196 367 li
205 367 li
205 364 li
211 364 li
211 361 li
214 361 li
214 364 li
220 364 li
220 367 li
229 367 li
229 361 li
226 361 li
226 355 li
223 355 li
223 352 li
226 352 li
226 349 li
229 349 li
229 346 li
232 346 li
232 340 li
220 340 li
cp
.270588 .270588 .270588 rgb
f
220 343 mo
220 340 li
217 340 li
217 337 li
214 337 li
214 331 li
211 331 li
211 337 li
208 337 li
208 340 li
205 340 li
205 343 li
196 343 li
196 346 li
199 346 li
199 349 li
202 349 li
202 352 li
205 352 li
205 355 li
202 355 li
202 361 li
199 361 li
199 364 li
205 364 li
205 361 li
211 361 li
211 358 li
214 358 li
214 361 li
220 361 li
220 364 li
226 364 li
226 361 li
223 361 li
223 355 li
220 355 li
220 352 li
223 352 li
223 349 li
226 349 li
226 346 li
229 346 li
229 343 li
220 343 li
cp
.180392 .145098 .145098 rgb
f
220 292 mo
220 289 li
217 289 li
217 283 li
214 283 li
214 280 li
211 280 li
211 283 li
208 283 li
208 289 li
205 289 li
205 292 li
193 292 li
193 298 li
196 298 li
196 301 li
199 301 li
199 304 li
202 304 li
202 307 li
199 307 li
199 313 li
196 313 li
196 319 li
205 319 li
205 316 li
211 316 li
211 313 li
214 313 li
214 316 li
220 316 li
220 319 li
229 319 li
229 313 li
226 313 li
226 307 li
223 307 li
223 304 li
226 304 li
226 301 li
229 301 li
229 298 li
232 298 li
232 292 li
220 292 li
cp
.709804 .423529 .00784314 rgb
f
199 298 mo
208 298 li
208 295 li
199 295 li
199 298 li
cp
214 286 mo
214 295 li
208 295 li
208 292 li
211 292 li
211 286 li
214 286 li
cp
1 1 1 rgb
f
223 298 mo
223 301 li
220 301 li
220 307 li
217 307 li
217 298 li
223 298 li
cp
226 313 mo
226 316 li
223 316 li
223 313 li
226 313 li
cp
223 310 mo
220 310 li
220 307 li
223 307 li
223 310 li
cp
211 304 mo
211 307 li
214 307 li
214 304 li
211 304 li
cp
214 307 mo
214 310 li
217 310 li
217 307 li
214 307 li
cp
223 295 mo
223 298 li
226 298 li
226 295 li
223 295 li
cp
208 307 mo
208 310 li
211 310 li
211 307 li
208 307 li
cp
205 310 mo
205 313 li
208 313 li
208 310 li
205 310 li
cp
202 313 mo
202 316 li
205 316 li
205 313 li
202 313 li
cp
.968627 .882353 .164706 rgb
f
214 307 mo
211 307 li
211 310 li
214 310 li
214 307 li
cp
220 310 mo
214 310 li
214 313 li
220 313 li
220 310 li
cp
220 304 mo
223 304 li
223 301 li
220 301 li
220 304 li
cp
223 301 mo
226 301 li
226 298 li
223 298 li
223 301 li
cp
226 295 mo
226 298 li
229 298 li
229 295 li
226 295 li
cp
208 313 mo
211 313 li
211 310 li
208 310 li
208 313 li
cp
202 304 mo
205 304 li
205 301 li
202 301 li
202 304 li
cp
220 313 mo
223 313 li
223 316 li
220 316 li
220 313 li
cp
.937255 .533333 .0392157 rgb
f
223 313 mo
223 310 li
220 310 li
220 313 li
223 313 li
cp
214 283 mo
211 283 li
211 286 li
214 286 li
214 283 li
cp
223 298 mo
223 295 li
220 295 li
220 292 li
217 292 li
217 289 li
214 289 li
214 295 li
217 295 li
217 298 li
223 298 li
cp
217 307 mo
217 304 li
214 304 li
214 307 li
217 307 li
cp
208 292 mo
205 292 li
205 295 li
208 295 li
208 292 li
cp
208 298 mo
199 298 li
199 301 li
205 301 li
205 307 li
202 307 li
202 313 li
205 313 li
205 310 li
208 310 li
208 307 li
211 307 li
211 304 li
208 304 li
208 298 li
cp
211 289 mo
208 289 li
208 292 li
211 292 li
211 289 li
cp
211 304 mo
214 304 li
214 295 li
211 295 li
211 304 li
cp
220 310 mo
220 307 li
217 307 li
217 310 li
220 310 li
cp
199 316 mo
202 316 li
202 313 li
199 313 li
199 316 li
cp
199 295 mo
199 298 li
196 298 li
196 295 li
199 295 li
cp
1 .996078 .0980392 rgb
f
214 298 mo
214 304 li
217 304 li
217 298 li
214 298 li
cp
208 298 mo
211 298 li
211 304 li
208 304 li
208 298 li
cp
.0901961 .0156863 .0156863 rgb
f
214 295 mo
214 298 li
217 298 li
217 295 li
214 295 li
cp
208 295 mo
211 295 li
211 298 li
208 298 li
208 295 li
cp
.270588 .270588 .270588 rgb
f
209.86 37 mo
209.86 34 li
206.86 34 li
206.86 28 li
203.86 28 li
203.86 25 li
200.86 25 li
200.86 28 li
197.86 28 li
197.86 34 li
194.86 34 li
194.86 37 li
182.86 37 li
182.86 43 li
185.86 43 li
185.86 46 li
188.86 46 li
188.86 49 li
191.86 49 li
191.86 52 li
188.86 52 li
188.86 58 li
185.86 58 li
185.86 64 li
194.86 64 li
194.86 61 li
200.86 61 li
200.86 58 li
203.86 58 li
203.86 61 li
209.86 61 li
209.86 64 li
218.86 64 li
218.86 58 li
215.86 58 li
215.86 52 li
212.86 52 li
212.86 49 li
215.86 49 li
215.86 46 li
218.86 46 li
218.86 43 li
221.86 43 li
221.86 37 li
209.86 37 li
cp
.709804 .423529 .00784314 rgb
f
200.86 31 mo
200.86 37 li
197.86 37 li
197.86 40 li
188.86 40 li
188.86 43 li
200.86 43 li
200.86 40 li
203.86 40 li
203.86 31 li
200.86 31 li
cp
1 1 1 rgb
f
212.86 43 mo
212.86 46 li
209.86 46 li
209.86 52 li
206.86 52 li
206.86 43 li
212.86 43 li
cp
215.86 58 mo
215.86 61 li
212.86 61 li
212.86 58 li
215.86 58 li
cp
212.86 55 mo
209.86 55 li
209.86 52 li
212.86 52 li
212.86 55 li
cp
200.86 49 mo
200.86 52 li
203.86 52 li
203.86 49 li
200.86 49 li
cp
203.86 52 mo
203.86 55 li
206.86 55 li
206.86 52 li
203.86 52 li
cp
212.86 40 mo
212.86 43 li
215.86 43 li
215.86 40 li
212.86 40 li
cp
197.86 52 mo
197.86 55 li
200.86 55 li
200.86 52 li
197.86 52 li
cp
194.86 55 mo
194.86 58 li
197.86 58 li
197.86 55 li
194.86 55 li
cp
191.86 58 mo
191.86 61 li
194.86 61 li
194.86 58 li
191.86 58 li
cp
.968627 .882353 .164706 rgb
f
203.86 52 mo
200.86 52 li
200.86 55 li
203.86 55 li
203.86 52 li
cp
209.86 55 mo
203.86 55 li
203.86 58 li
209.86 58 li
209.86 55 li
cp
209.86 49 mo
212.86 49 li
212.86 46 li
209.86 46 li
209.86 49 li
cp
212.86 46 mo
215.86 46 li
215.86 43 li
212.86 43 li
212.86 46 li
cp
215.86 40 mo
215.86 43 li
218.86 43 li
218.86 40 li
215.86 40 li
cp
197.86 58 mo
200.86 58 li
200.86 55 li
197.86 55 li
197.86 58 li
cp
191.86 49 mo
194.86 49 li
194.86 46 li
191.86 46 li
191.86 49 li
cp
209.86 58 mo
212.86 58 li
212.86 61 li
209.86 61 li
209.86 58 li
cp
.937255 .533333 .0392157 rgb
f
209.86 55 mo
209.86 52 li
206.86 52 li
206.86 55 li
209.86 55 li
cp
188.86 61 mo
191.86 61 li
191.86 58 li
188.86 58 li
188.86 61 li
cp
212.86 43 mo
212.86 40 li
209.86 40 li
209.86 37 li
206.86 37 li
206.86 34 li
203.86 34 li
203.86 40 li
200.86 40 li
200.86 43 li
188.86 43 li
188.86 46 li
194.86 46 li
194.86 52 li
191.86 52 li
191.86 58 li
194.86 58 li
194.86 55 li
197.86 55 li
197.86 52 li
200.86 52 li
200.86 49 li
203.86 49 li
203.86 52 li
206.86 52 li
206.86 43 li
212.86 43 li
cp
185.86 40 mo
185.86 43 li
188.86 43 li
188.86 40 li
185.86 40 li
cp
200.86 34 mo
197.86 34 li
197.86 37 li
200.86 37 li
200.86 34 li
cp
203.86 28 mo
200.86 28 li
200.86 31 li
203.86 31 li
203.86 28 li
cp
212.86 58 mo
212.86 55 li
209.86 55 li
209.86 58 li
212.86 58 li
cp
197.86 40 mo
194.86 40 li
194.86 37 li
197.86 37 li
197.86 40 li
cp
1 .996078 .0980392 rgb
f
160 250 mo
160 247 li
157 247 li
157 244 li
142 244 li
142 247 li
139 247 li
139 250 li
136 250 li
136 271 li
139 271 li
139 274 li
142 274 li
142 277 li
157 277 li
157 274 li
160 274 li
160 271 li
163 271 li
163 250 li
160 250 li
cp
.270588 .270588 .270588 rgb
f
151 253 mo
151 268 li
148 268 li
148 253 li
151 253 li
cp
157 250 mo
157 247 li
142 247 li
142 250 li
139 250 li
139 271 li
142 271 li
142 274 li
157 274 li
157 271 li
160 271 li
160 250 li
157 250 li
cp
.180392 .145098 .145098 rgb
f
160 211 mo
160 208 li
157 208 li
157 205 li
142 205 li
142 208 li
139 208 li
139 211 li
136 211 li
136 232 li
139 232 li
139 235 li
142 235 li
142 238 li
157 238 li
157 235 li
160 235 li
160 232 li
163 232 li
163 211 li
160 211 li
cp
.709804 .423529 .00784314 rgb
f
148 214 mo
148 229 li
151 229 li
151 214 li
148 214 li
cp
.937255 .533333 .0392157 rgb
f
142 211 mo
142 217 li
145 217 li
145 214 li
148 214 li
148 211 li
142 211 li
cp
1 1 1 rgb
f
157 208 mo
154 208 li
154 211 li
157 211 li
157 208 li
cp
154 235 mo
157 235 li
157 232 li
154 232 li
154 235 li
cp
142 235 mo
145 235 li
145 232 li
142 232 li
142 235 li
cp
160 232 mo
160 229 li
157 229 li
157 232 li
160 232 li
cp
139 229 mo
139 232 li
142 232 li
142 229 li
139 229 li
cp
154 214 mo
154 211 li
151 211 li
151 208 li
148 208 li
148 214 li
151 214 li
151 217 li
154 217 li
154 226 li
151 226 li
151 229 li
148 229 li
148 226 li
145 226 li
145 217 li
142 217 li
142 214 li
139 214 li
139 226 li
142 226 li
142 229 li
145 229 li
145 232 li
154 232 li
154 229 li
157 229 li
157 226 li
160 226 li
160 214 li
154 214 li
cp
148 217 mo
145 217 li
145 214 li
148 214 li
148 217 li
cp
1 .996078 .0980392 rgb
f
151 208 mo
151 211 li
154 211 li
154 208 li
151 208 li
cp
148 211 mo
148 208 li
142 208 li
142 211 li
148 211 li
cp
145 232 mo
145 235 li
154 235 li
154 232 li
145 232 li
cp
154 232 mo
157 232 li
157 229 li
154 229 li
154 232 li
cp
142 229 mo
142 232 li
145 232 li
145 229 li
142 229 li
cp
157 229 mo
160 229 li
160 226 li
157 226 li
157 229 li
cp
139 226 mo
139 229 li
142 229 li
142 226 li
139 226 li
cp
154 217 mo
151 217 li
151 226 li
154 226 li
154 217 li
cp
154 211 mo
154 214 li
160 214 li
160 211 li
154 211 li
cp
145 226 mo
148 226 li
148 217 li
145 217 li
145 226 li
cp
142 214 mo
139 214 li
139 211 li
142 211 li
142 214 li
cp
.968627 .882353 .164706 rgb
f
121 253 mo
121 250 li
118 250 li
118 247 li
112 247 li
112 250 li
109 250 li
109 253 li
106 253 li
106 250 li
103 250 li
103 247 li
97 247 li
97 250 li
94 250 li
94 253 li
91 253 li
91 262 li
94 262 li
94 265 li
97 265 li
97 268 li
100 268 li
100 271 li
103 271 li
103 274 li
106 274 li
106 277 li
109 277 li
109 274 li
112 274 li
112 271 li
115 271 li
115 268 li
118 268 li
118 265 li
121 265 li
121 262 li
124 262 li
124 253 li
121 253 li
cp
.270588 .270588 .270588 rgb
f
118 253 mo
118 250 li
112 250 li
112 253 li
109 253 li
109 256 li
106 256 li
106 253 li
103 253 li
103 250 li
97 250 li
97 253 li
94 253 li
94 262 li
97 262 li
97 265 li
100 265 li
100 268 li
103 268 li
103 271 li
106 271 li
106 274 li
109 274 li
109 271 li
112 271 li
112 268 li
115 268 li
115 265 li
118 265 li
118 262 li
121 262 li
121 253 li
118 253 li
cp
.180392 .145098 .145098 rgb
f
121 214 mo
121 211 li
118 211 li
118 208 li
112 208 li
112 211 li
109 211 li
109 214 li
106 214 li
106 211 li
103 211 li
103 208 li
97 208 li
97 211 li
94 211 li
94 214 li
91 214 li
91 223 li
94 223 li
94 226 li
97 226 li
97 229 li
100 229 li
100 232 li
103 232 li
103 235 li
106 235 li
106 238 li
109 238 li
109 235 li
112 235 li
112 232 li
115 232 li
115 229 li
118 229 li
118 226 li
121 226 li
121 223 li
124 223 li
124 214 li
121 214 li
cp
.45098 .00392157 .00392157 rgb
f
115 211 mo
115 217 li
112 217 li
112 220 li
109 220 li
109 223 li
106 223 li
106 226 li
100 226 li
100 229 li
103 229 li
103 232 li
106 232 li
106 229 li
109 229 li
109 226 li
112 226 li
112 223 li
115 223 li
115 220 li
118 220 li
118 211 li
115 211 li
cp
.780392 .133333 .129412 rgb
f
106 232 mo
109 232 li
109 229 li
106 229 li
106 232 li
cp
109 229 mo
112 229 li
112 226 li
109 226 li
109 229 li
cp
112 226 mo
115 226 li
115 223 li
112 223 li
112 226 li
cp
115 223 mo
118 223 li
118 220 li
115 220 li
115 223 li
cp
121 214 mo
121 217 li
118 217 li
118 214 li
121 214 li
cp
.686275 .101961 .0980392 rgb
f
106 235 mo
109 235 li
109 232 li
106 232 li
106 235 li
cp
109 232 mo
112 232 li
112 229 li
109 229 li
109 232 li
cp
112 229 mo
115 229 li
115 226 li
112 226 li
112 229 li
cp
115 226 mo
118 226 li
118 223 li
115 223 li
115 226 li
cp
118 217 mo
118 223 li
121 223 li
121 217 li
118 217 li
cp
103 214 mo
103 211 li
97 211 li
97 214 li
103 214 li
cp
106 226 mo
97 226 li
97 223 li
94 223 li
94 214 li
97 214 li
97 220 li
103 220 li
103 214 li
106 214 li
106 217 li
109 217 li
109 214 li
112 214 li
112 211 li
115 211 li
115 217 li
112 217 li
112 220 li
109 220 li
109 223 li
106 223 li
106 226 li
cp
.87451 .164706 .160784 rgb
f
103 220 mo
100 220 li
100 217 li
103 217 li
103 220 li
cp
1 .431373 .431373 rgb
f
97 214 mo
97 220 li
100 220 li
100 217 li
103 217 li
103 214 li
97 214 li
cp
1 1 1 rgb
f
70 253 mo
70 250 li
67 250 li
67 247 li
64 247 li
64 244 li
61 244 li
61 247 li
58 247 li
58 250 li
55 250 li
55 253 li
46 253 li
46 259 li
49 259 li
49 262 li
52 262 li
52 271 li
49 271 li
49 277 li
58 277 li
58 274 li
67 274 li
67 277 li
76 277 li
76 271 li
73 271 li
73 262 li
76 262 li
76 259 li
79 259 li
79 253 li
70 253 li
cp
.270588 .270588 .270588 rgb
f
70 256 mo
70 253 li
67 253 li
67 250 li
64 250 li
64 247 li
61 247 li
61 250 li
58 250 li
58 253 li
55 253 li
55 256 li
49 256 li
49 259 li
52 259 li
52 262 li
55 262 li
55 271 li
52 271 li
52 274 li
58 274 li
58 271 li
67 271 li
67 274 li
73 274 li
73 271 li
70 271 li
70 262 li
73 262 li
73 259 li
76 259 li
76 256 li
70 256 li
cp
.180392 .145098 .145098 rgb
f
70 217 mo
70 214 li
67 214 li
67 211 li
64 211 li
64 208 li
61 208 li
61 211 li
58 211 li
58 214 li
55 214 li
55 217 li
46 217 li
46 223 li
49 223 li
49 226 li
52 226 li
52 235 li
49 235 li
49 241 li
58 241 li
58 238 li
67 238 li
67 241 li
76 241 li
76 235 li
73 235 li
73 226 li
76 226 li
76 223 li
79 223 li
79 217 li
70 217 li
cp
.709804 .423529 .00784314 rgb
f
49 220 mo
49 223 li
58 223 li
58 220 li
49 220 li
cp
64 214 mo
64 220 li
58 220 li
58 217 li
61 217 li
61 214 li
64 214 li
cp
1 1 1 rgb
f
61 232 mo
64 232 li
64 229 li
61 229 li
61 232 li
cp
67 232 mo
67 235 li
70 235 li
70 232 li
67 232 li
cp
70 223 mo
67 223 li
67 226 li
70 226 li
70 223 li
cp
73 220 mo
73 223 li
76 223 li
76 220 li
73 220 li
cp
58 235 mo
61 235 li
61 232 li
58 232 li
58 235 li
cp
55 238 mo
58 238 li
58 235 li
55 235 li
55 238 li
cp
58 226 mo
55 226 li
55 232 li
58 232 li
58 226 li
cp
70 235 mo
73 235 li
73 238 li
70 238 li
70 235 li
cp
.968627 .882353 .164706 rgb
f
61 232 mo
61 235 li
67 235 li
67 232 li
61 232 li
cp
70 238 mo
70 235 li
67 235 li
67 238 li
70 238 li
cp
67 232 mo
70 232 li
70 226 li
67 226 li
67 232 li
cp
73 223 mo
73 226 li
70 226 li
70 223 li
73 223 li
cp
.937255 .533333 .0392157 rgb
f
61 229 mo
64 229 li
64 220 li
61 220 li
61 229 li
cp
67 232 mo
67 229 li
64 229 li
64 232 li
67 232 li
cp
70 220 mo
70 217 li
67 217 li
67 214 li
64 214 li
64 220 li
67 220 li
67 223 li
73 223 li
73 220 li
70 220 li
cp
55 220 mo
58 220 li
58 217 li
55 217 li
55 220 li
cp
58 232 mo
61 232 li
61 229 li
58 229 li
58 232 li
cp
55 235 mo
58 235 li
58 232 li
55 232 li
55 235 li
cp
58 226 mo
58 223 li
52 223 li
52 226 li
58 226 li
cp
61 211 mo
61 214 li
64 214 li
64 211 li
61 211 li
cp
58 217 mo
61 217 li
61 214 li
58 214 li
58 217 li
cp
52 235 mo
55 235 li
55 238 li
52 238 li
52 235 li
cp
1 .996078 .0980392 rgb
f
64 223 mo
64 229 li
67 229 li
67 223 li
64 223 li
cp
58 223 mo
61 223 li
61 229 li
58 229 li
58 223 li
cp
.0901961 .0156863 .0156863 rgb
f
64 220 mo
64 223 li
67 223 li
67 220 li
64 220 li
cp
58 220 mo
61 220 li
61 223 li
58 223 li
58 220 li
cp
.270588 .270588 .270588 rgb
f
341.86 34 mo
341.86 31 li
338.86 31 li
338.86 28 li
335.86 28 li
335.86 25 li
332.86 25 li
332.86 28 li
329.86 28 li
329.86 31 li
326.86 31 li
326.86 34 li
317.86 34 li
317.86 40 li
320.86 40 li
320.86 43 li
323.86 43 li
323.86 52 li
320.86 52 li
320.86 58 li
329.86 58 li
329.86 55 li
338.86 55 li
338.86 58 li
347.86 58 li
347.86 52 li
344.86 52 li
344.86 43 li
347.86 43 li
347.86 40 li
350.86 40 li
350.86 34 li
341.86 34 li
cp
.709804 .423529 .00784314 rgb
f
332.86 49 mo
335.86 49 li
335.86 46 li
332.86 46 li
332.86 49 li
cp
338.86 49 mo
338.86 52 li
341.86 52 li
341.86 49 li
338.86 49 li
cp
341.86 40 mo
338.86 40 li
338.86 43 li
341.86 43 li
341.86 40 li
cp
344.86 37 mo
344.86 40 li
347.86 40 li
347.86 37 li
344.86 37 li
cp
329.86 52 mo
332.86 52 li
332.86 49 li
329.86 49 li
329.86 52 li
cp
326.86 55 mo
329.86 55 li
329.86 52 li
326.86 52 li
326.86 55 li
cp
329.86 43 mo
326.86 43 li
326.86 49 li
329.86 49 li
329.86 43 li
cp
341.86 52 mo
344.86 52 li
344.86 55 li
341.86 55 li
341.86 52 li
cp
.968627 .882353 .164706 rgb
f
332.86 49 mo
332.86 52 li
338.86 52 li
338.86 49 li
332.86 49 li
cp
341.86 55 mo
341.86 52 li
338.86 52 li
338.86 55 li
341.86 55 li
cp
338.86 49 mo
341.86 49 li
341.86 43 li
338.86 43 li
338.86 49 li
cp
344.86 40 mo
344.86 43 li
341.86 43 li
341.86 40 li
344.86 40 li
cp
.937255 .533333 .0392157 rgb
f
332.86 31 mo
329.86 31 li
329.86 34 li
332.86 34 li
332.86 31 li
cp
341.86 37 mo
341.86 34 li
338.86 34 li
338.86 31 li
335.86 31 li
335.86 37 li
332.86 37 li
332.86 40 li
323.86 40 li
323.86 43 li
329.86 43 li
329.86 49 li
332.86 49 li
332.86 46 li
335.86 46 li
335.86 49 li
338.86 49 li
338.86 40 li
344.86 40 li
344.86 37 li
341.86 37 li
cp
335.86 28 mo
332.86 28 li
332.86 31 li
335.86 31 li
335.86 28 li
cp
323.86 55 mo
326.86 55 li
326.86 52 li
323.86 52 li
323.86 55 li
cp
326.86 52 mo
329.86 52 li
329.86 49 li
326.86 49 li
326.86 52 li
cp
329.86 34 mo
329.86 37 li
326.86 37 li
326.86 34 li
329.86 34 li
cp
1 .996078 .0980392 rgb
f
332.86 31 mo
332.86 34 li
329.86 34 li
329.86 37 li
320.86 37 li
320.86 40 li
332.86 40 li
332.86 37 li
335.86 37 li
335.86 31 li
332.86 31 li
cp
1 1 1 rgb
f
76 31 mo
76 28 li
73 28 li
73 25 li
67 25 li
67 28 li
64 28 li
64 31 li
61 31 li
61 28 li
58 28 li
58 25 li
52 25 li
52 28 li
49 28 li
49 31 li
46 31 li
46 40 li
49 40 li
49 43 li
52 43 li
52 46 li
55 46 li
55 49 li
58 49 li
58 52 li
61 52 li
61 55 li
64 55 li
64 52 li
67 52 li
67 49 li
70 49 li
70 46 li
73 46 li
73 43 li
76 43 li
76 40 li
79 40 li
79 31 li
76 31 li
cp
.45098 .00392157 .00392157 rgb
f
70 28 mo
70 34 li
67 34 li
67 37 li
64 37 li
64 40 li
61 40 li
61 43 li
55 43 li
55 46 li
58 46 li
58 49 li
61 49 li
61 46 li
64 46 li
64 43 li
67 43 li
67 40 li
70 40 li
70 37 li
73 37 li
73 28 li
70 28 li
cp
.780392 .133333 .129412 rgb
f
61 49 mo
64 49 li
64 46 li
61 46 li
61 49 li
cp
64 46 mo
67 46 li
67 43 li
64 43 li
64 46 li
cp
67 43 mo
70 43 li
70 40 li
67 40 li
67 43 li
cp
70 40 mo
73 40 li
73 37 li
70 37 li
70 40 li
cp
76 31 mo
76 34 li
73 34 li
73 31 li
76 31 li
cp
.686275 .101961 .0980392 rgb
f
61 52 mo
64 52 li
64 49 li
61 49 li
61 52 li
cp
64 49 mo
67 49 li
67 46 li
64 46 li
64 49 li
cp
67 46 mo
70 46 li
70 43 li
67 43 li
67 46 li
cp
70 43 mo
73 43 li
73 40 li
70 40 li
70 43 li
cp
73 34 mo
73 40 li
76 40 li
76 34 li
73 34 li
cp
58 31 mo
58 28 li
52 28 li
52 31 li
58 31 li
cp
61 43 mo
52 43 li
52 40 li
49 40 li
49 31 li
52 31 li
52 37 li
58 37 li
58 31 li
61 31 li
61 34 li
64 34 li
64 31 li
67 31 li
67 28 li
70 28 li
70 34 li
67 34 li
67 37 li
64 37 li
64 40 li
61 40 li
61 43 li
cp
.87451 .164706 .160784 rgb
f
58 37 mo
55 37 li
55 34 li
58 34 li
58 37 li
cp
1 .431373 .431373 rgb
f
52 31 mo
52 37 li
55 37 li
55 34 li
58 34 li
58 31 li
52 31 li
cp
1 1 1 rgb
f
163 37 mo
163 34 li
79 34 li
79 40 li
76 40 li
76 43 li
73 43 li
73 46 li
163 46 li
163 43 li
166 43 li
166 37 li
163 37 li
cp
.180392 .145098 .145098 rgb
f
163 37 mo
163 34 li
79 34 li
79 37 li
79 37 li
79 40 li
166 40 li
166 37 li
163 37 li
cp
.576471 .87451 .160784 rgb
f
166 40 mo
76 40 li
76 43 li
73 43 li
73 46 li
163 46 li
163 43 li
166 43 li
166 40 li
cp
.556863 .741176 .129412 rgb
f
166 43 mo
163 43 li
163 46 li
166 46 li
166 43 li
cp
169 43 mo
169 37 li
166 37 li
166 43 li
169 43 li
cp
166 34 mo
163 34 li
163 37 li
166 37 li
166 34 li
cp
79 34 mo
163 34 li
163 31 li
79 31 li
79 34 li
cp
70 46 mo
163 46 li
163 49 li
70 49 li
70 46 li
cp
.270588 .270588 .270588 rgb
f
79 43 mo
76 43 li
76 40 li
79 40 li
79 43 li
cp
.364706 .490196 .0862745 rgb
f
82 40 mo
79 40 li
79 34 li
82 34 li
82 40 li
cp
.556863 .741176 .129412 rgb
f
82 34 mo
79 34 li
79 31 li
82 31 li
82 34 li
cp
.180392 .145098 .145098 rgb
f
73 49 mo
70 49 li
70 46 li
73 46 li
73 49 li
cp
f
76 46 mo
73 46 li
73 43 li
76 43 li
76 46 li
cp
.364706 .490196 .0862745 rgb
f
76 61 mo
76 58 li
73 58 li
73 55 li
67 55 li
67 58 li
64 58 li
64 61 li
61 61 li
61 58 li
58 58 li
58 55 li
52 55 li
52 58 li
49 58 li
49 61 li
46 61 li
46 70 li
49 70 li
49 73 li
52 73 li
52 76 li
55 76 li
55 79 li
58 79 li
58 82 li
61 82 li
61 85 li
64 85 li
64 82 li
67 82 li
67 79 li
70 79 li
70 76 li
73 76 li
73 73 li
76 73 li
76 70 li
79 70 li
79 61 li
76 61 li
cp
.45098 .00392157 .00392157 rgb
f
70 58 mo
70 64 li
67 64 li
67 67 li
64 67 li
64 70 li
61 70 li
61 73 li
55 73 li
55 76 li
58 76 li
58 79 li
61 79 li
61 76 li
64 76 li
64 73 li
67 73 li
67 70 li
70 70 li
70 67 li
73 67 li
73 58 li
70 58 li
cp
.780392 .133333 .129412 rgb
f
61 79 mo
64 79 li
64 76 li
61 76 li
61 79 li
cp
64 76 mo
67 76 li
67 73 li
64 73 li
64 76 li
cp
67 73 mo
70 73 li
70 70 li
67 70 li
67 73 li
cp
70 70 mo
73 70 li
73 67 li
70 67 li
70 70 li
cp
76 61 mo
76 64 li
73 64 li
73 61 li
76 61 li
cp
.686275 .101961 .0980392 rgb
f
61 82 mo
64 82 li
64 79 li
61 79 li
61 82 li
cp
64 79 mo
67 79 li
67 76 li
64 76 li
64 79 li
cp
67 76 mo
70 76 li
70 73 li
67 73 li
67 76 li
cp
70 73 mo
73 73 li
73 70 li
70 70 li
70 73 li
cp
73 64 mo
73 70 li
76 70 li
76 64 li
73 64 li
cp
58 61 mo
58 58 li
52 58 li
52 61 li
58 61 li
cp
61 73 mo
52 73 li
52 70 li
49 70 li
49 61 li
52 61 li
52 67 li
58 67 li
58 61 li
61 61 li
61 64 li
64 64 li
64 61 li
67 61 li
67 58 li
70 58 li
70 64 li
67 64 li
67 67 li
64 67 li
64 70 li
61 70 li
61 73 li
cp
.87451 .164706 .160784 rgb
f
58 67 mo
55 67 li
55 64 li
58 64 li
58 67 li
cp
1 .431373 .431373 rgb
f
52 61 mo
52 67 li
55 67 li
55 64 li
58 64 li
58 61 li
52 61 li
cp
1 1 1 rgb
f
163 67 mo
163 64 li
79 64 li
79 70 li
76 70 li
76 73 li
73 73 li
73 76 li
163 76 li
163 73 li
166 73 li
166 67 li
163 67 li
cp
.180392 .145098 .145098 rgb
f
145 67 mo
145 64 li
79 64 li
79 67 li
79 67 li
79 70 li
148 70 li
148 67 li
145 67 li
cp
.576471 .87451 .160784 rgb
f
148 70 mo
76 70 li
76 73 li
73 73 li
73 76 li
145 76 li
145 73 li
148 73 li
148 70 li
cp
.556863 .741176 .129412 rgb
f
166 73 mo
163 73 li
163 76 li
166 76 li
166 73 li
cp
169 73 mo
169 67 li
166 67 li
166 73 li
169 73 li
cp
166 64 mo
163 64 li
163 67 li
166 67 li
166 64 li
cp
79 64 mo
163 64 li
163 61 li
79 61 li
79 64 li
cp
70 76 mo
163 76 li
163 79 li
70 79 li
70 76 li
cp
.270588 .270588 .270588 rgb
f
79 73 mo
76 73 li
76 70 li
79 70 li
79 73 li
cp
.364706 .490196 .0862745 rgb
f
82 70 mo
79 70 li
79 64 li
82 64 li
82 70 li
cp
.556863 .741176 .129412 rgb
f
82 64 mo
79 64 li
79 61 li
82 61 li
82 64 li
cp
.180392 .145098 .145098 rgb
f
73 79 mo
70 79 li
70 76 li
73 76 li
73 79 li
cp
f
76 76 mo
73 76 li
73 73 li
76 73 li
76 76 li
cp
.364706 .490196 .0862745 rgb
f
76 91 mo
76 88 li
73 88 li
73 85 li
67 85 li
67 88 li
64 88 li
64 91 li
61 91 li
61 88 li
58 88 li
58 85 li
52 85 li
52 88 li
49 88 li
49 91 li
46 91 li
46 100 li
49 100 li
49 103 li
52 103 li
52 106 li
55 106 li
55 109 li
58 109 li
58 112 li
61 112 li
61 115 li
64 115 li
64 112 li
67 112 li
67 109 li
70 109 li
70 106 li
73 106 li
73 103 li
76 103 li
76 100 li
79 100 li
79 91 li
76 91 li
cp
.45098 .00392157 .00392157 rgb
f
70 88 mo
70 94 li
67 94 li
67 97 li
64 97 li
64 100 li
61 100 li
61 103 li
55 103 li
55 106 li
58 106 li
58 109 li
61 109 li
61 106 li
64 106 li
64 103 li
67 103 li
67 100 li
70 100 li
70 97 li
73 97 li
73 88 li
70 88 li
cp
.780392 .133333 .129412 rgb
f
61 109 mo
64 109 li
64 106 li
61 106 li
61 109 li
cp
64 106 mo
67 106 li
67 103 li
64 103 li
64 106 li
cp
67 103 mo
70 103 li
70 100 li
67 100 li
67 103 li
cp
70 100 mo
73 100 li
73 97 li
70 97 li
70 100 li
cp
76 91 mo
76 94 li
73 94 li
73 91 li
76 91 li
cp
.686275 .101961 .0980392 rgb
f
61 112 mo
64 112 li
64 109 li
61 109 li
61 112 li
cp
64 109 mo
67 109 li
67 106 li
64 106 li
64 109 li
cp
67 106 mo
70 106 li
70 103 li
67 103 li
67 106 li
cp
70 103 mo
73 103 li
73 100 li
70 100 li
70 103 li
cp
73 94 mo
73 100 li
76 100 li
76 94 li
73 94 li
cp
58 91 mo
58 88 li
52 88 li
52 91 li
58 91 li
cp
61 103 mo
52 103 li
52 100 li
49 100 li
49 91 li
52 91 li
52 97 li
58 97 li
58 91 li
61 91 li
61 94 li
64 94 li
64 91 li
67 91 li
67 88 li
70 88 li
70 94 li
67 94 li
67 97 li
64 97 li
64 100 li
61 100 li
61 103 li
cp
.87451 .164706 .160784 rgb
f
58 97 mo
55 97 li
55 94 li
58 94 li
58 97 li
cp
1 .431373 .431373 rgb
f
52 91 mo
52 97 li
55 97 li
55 94 li
58 94 li
58 91 li
52 91 li
cp
1 1 1 rgb
f
163 97 mo
163 94 li
79 94 li
79 100 li
76 100 li
76 103 li
73 103 li
73 106 li
163 106 li
163 103 li
166 103 li
166 97 li
163 97 li
cp
.180392 .145098 .145098 rgb
f
124 97 mo
124 94 li
79 94 li
79 97 li
79 97 li
79 100 li
127 100 li
127 97 li
124 97 li
cp
.901961 .803922 .0666667 rgb
f
127 100 mo
76 100 li
76 103 li
73 103 li
73 106 li
124 106 li
124 103 li
127 103 li
127 100 li
cp
.807843 .615686 .0392157 rgb
f
166 103 mo
163 103 li
163 106 li
166 106 li
166 103 li
cp
169 103 mo
169 97 li
166 97 li
166 103 li
169 103 li
cp
166 94 mo
163 94 li
163 97 li
166 97 li
166 94 li
cp
79 94 mo
163 94 li
163 91 li
79 91 li
79 94 li
cp
70 106 mo
163 106 li
163 109 li
70 109 li
70 106 li
cp
.270588 .270588 .270588 rgb
f
79 103 mo
76 103 li
76 100 li
79 100 li
79 103 li
cp
.709804 .423529 .00784314 rgb
f
82 100 mo
79 100 li
79 94 li
82 94 li
82 100 li
cp
.807843 .615686 .0392157 rgb
f
82 94 mo
79 94 li
79 91 li
82 91 li
82 94 li
cp
.180392 .145098 .145098 rgb
f
73 109 mo
70 109 li
70 106 li
73 106 li
73 109 li
cp
f
76 106 mo
73 106 li
73 103 li
76 103 li
76 106 li
cp
.709804 .423529 .00784314 rgb
f
76 121 mo
76 118 li
73 118 li
73 115 li
67 115 li
67 118 li
64 118 li
64 121 li
61 121 li
61 118 li
58 118 li
58 115 li
52 115 li
52 118 li
49 118 li
49 121 li
46 121 li
46 130 li
49 130 li
49 133 li
52 133 li
52 136 li
55 136 li
55 139 li
58 139 li
58 142 li
61 142 li
61 145 li
64 145 li
64 142 li
67 142 li
67 139 li
70 139 li
70 136 li
73 136 li
73 133 li
76 133 li
76 130 li
79 130 li
79 121 li
76 121 li
cp
.45098 .00392157 .00392157 rgb
f
70 118 mo
70 124 li
67 124 li
67 127 li
64 127 li
64 130 li
61 130 li
61 133 li
55 133 li
55 136 li
58 136 li
58 139 li
61 139 li
61 136 li
64 136 li
64 133 li
67 133 li
67 130 li
70 130 li
70 127 li
73 127 li
73 118 li
70 118 li
cp
.780392 .133333 .129412 rgb
f
61 139 mo
64 139 li
64 136 li
61 136 li
61 139 li
cp
64 136 mo
67 136 li
67 133 li
64 133 li
64 136 li
cp
67 133 mo
70 133 li
70 130 li
67 130 li
67 133 li
cp
70 130 mo
73 130 li
73 127 li
70 127 li
70 130 li
cp
76 121 mo
76 124 li
73 124 li
73 121 li
76 121 li
cp
.686275 .101961 .0980392 rgb
f
61 142 mo
64 142 li
64 139 li
61 139 li
61 142 li
cp
64 139 mo
67 139 li
67 136 li
64 136 li
64 139 li
cp
67 136 mo
70 136 li
70 133 li
67 133 li
67 136 li
cp
70 133 mo
73 133 li
73 130 li
70 130 li
70 133 li
cp
73 124 mo
73 130 li
76 130 li
76 124 li
73 124 li
cp
58 121 mo
58 118 li
52 118 li
52 121 li
58 121 li
cp
61 133 mo
52 133 li
52 130 li
49 130 li
49 121 li
52 121 li
52 127 li
58 127 li
58 121 li
61 121 li
61 124 li
64 124 li
64 121 li
67 121 li
67 118 li
70 118 li
70 124 li
67 124 li
67 127 li
64 127 li
64 130 li
61 130 li
61 133 li
cp
.87451 .164706 .160784 rgb
f
58 127 mo
55 127 li
55 124 li
58 124 li
58 127 li
cp
1 .431373 .431373 rgb
f
52 121 mo
52 127 li
55 127 li
55 124 li
58 124 li
58 121 li
52 121 li
cp
1 1 1 rgb
f
163 127 mo
163 124 li
79 124 li
79 130 li
76 130 li
76 133 li
73 133 li
73 136 li
163 136 li
163 133 li
166 133 li
166 127 li
163 127 li
cp
.180392 .145098 .145098 rgb
f
109 127 mo
109 124 li
79 124 li
79 127 li
79 127 li
79 130 li
112 130 li
112 127 li
109 127 li
cp
.901961 .803922 .0666667 rgb
f
112 130 mo
76 130 li
76 133 li
73 133 li
73 136 li
109 136 li
109 133 li
112 133 li
112 130 li
cp
.807843 .615686 .0392157 rgb
f
166 133 mo
163 133 li
163 136 li
166 136 li
166 133 li
cp
169 133 mo
169 127 li
166 127 li
166 133 li
169 133 li
cp
166 124 mo
163 124 li
163 127 li
166 127 li
166 124 li
cp
79 124 mo
163 124 li
163 121 li
79 121 li
79 124 li
cp
70 136 mo
163 136 li
163 139 li
70 139 li
70 136 li
cp
.270588 .270588 .270588 rgb
f
79 133 mo
76 133 li
76 130 li
79 130 li
79 133 li
cp
.709804 .423529 .00784314 rgb
f
82 130 mo
79 130 li
79 124 li
82 124 li
82 130 li
cp
.807843 .615686 .0392157 rgb
f
82 124 mo
79 124 li
79 121 li
82 121 li
82 124 li
cp
.180392 .145098 .145098 rgb
f
73 139 mo
70 139 li
70 136 li
73 136 li
73 139 li
cp
f
76 136 mo
73 136 li
73 133 li
76 133 li
76 136 li
cp
.709804 .423529 .00784314 rgb
f
76 151 mo
76 148 li
73 148 li
73 145 li
67 145 li
67 148 li
64 148 li
64 151 li
61 151 li
61 148 li
58 148 li
58 145 li
52 145 li
52 148 li
49 148 li
49 151 li
46 151 li
46 160 li
49 160 li
49 163 li
52 163 li
52 166 li
55 166 li
55 169 li
58 169 li
58 172 li
61 172 li
61 175 li
64 175 li
64 172 li
67 172 li
67 169 li
70 169 li
70 166 li
73 166 li
73 163 li
76 163 li
76 160 li
79 160 li
79 151 li
76 151 li
cp
.45098 .00392157 .00392157 rgb
f
70 148 mo
70 154 li
67 154 li
67 157 li
64 157 li
64 160 li
61 160 li
61 163 li
55 163 li
55 166 li
58 166 li
58 169 li
61 169 li
61 166 li
64 166 li
64 163 li
67 163 li
67 160 li
70 160 li
70 157 li
73 157 li
73 148 li
70 148 li
cp
.780392 .133333 .129412 rgb
f
61 169 mo
64 169 li
64 166 li
61 166 li
61 169 li
cp
64 166 mo
67 166 li
67 163 li
64 163 li
64 166 li
cp
67 163 mo
70 163 li
70 160 li
67 160 li
67 163 li
cp
70 160 mo
73 160 li
73 157 li
70 157 li
70 160 li
cp
76 151 mo
76 154 li
73 154 li
73 151 li
76 151 li
cp
.686275 .101961 .0980392 rgb
f
61 172 mo
64 172 li
64 169 li
61 169 li
61 172 li
cp
64 169 mo
67 169 li
67 166 li
64 166 li
64 169 li
cp
67 166 mo
70 166 li
70 163 li
67 163 li
67 166 li
cp
70 163 mo
73 163 li
73 160 li
70 160 li
70 163 li
cp
73 154 mo
73 160 li
76 160 li
76 154 li
73 154 li
cp
58 151 mo
58 148 li
52 148 li
52 151 li
58 151 li
cp
61 163 mo
52 163 li
52 160 li
49 160 li
49 151 li
52 151 li
52 157 li
58 157 li
58 151 li
61 151 li
61 154 li
64 154 li
64 151 li
67 151 li
67 148 li
70 148 li
70 154 li
67 154 li
67 157 li
64 157 li
64 160 li
61 160 li
61 163 li
cp
.87451 .164706 .160784 rgb
f
58 157 mo
55 157 li
55 154 li
58 154 li
58 157 li
cp
1 .431373 .431373 rgb
f
52 151 mo
52 157 li
55 157 li
55 154 li
58 154 li
58 151 li
52 151 li
cp
1 1 1 rgb
f
163 157 mo
163 154 li
79 154 li
79 160 li
76 160 li
76 163 li
73 163 li
73 166 li
163 166 li
163 163 li
166 163 li
166 157 li
163 157 li
cp
.180392 .145098 .145098 rgb
f
91 157 mo
91 154 li
79 154 li
79 157 li
79 157 li
79 160 li
94 160 li
94 157 li
91 157 li
cp
.87451 .164706 .160784 rgb
f
94 160 mo
76 160 li
76 163 li
73 163 li
73 166 li
91 166 li
91 163 li
94 163 li
94 160 li
cp
.780392 .133333 .129412 rgb
f
166 163 mo
163 163 li
163 166 li
166 166 li
166 163 li
cp
169 163 mo
169 157 li
166 157 li
166 163 li
169 163 li
cp
166 154 mo
163 154 li
163 157 li
166 157 li
166 154 li
cp
79 154 mo
163 154 li
163 151 li
79 151 li
79 154 li
cp
70 166 mo
163 166 li
163 169 li
70 169 li
70 166 li
cp
.270588 .270588 .270588 rgb
f
79 163 mo
76 163 li
76 160 li
79 160 li
79 163 li
cp
.686275 .101961 .0980392 rgb
f
82 160 mo
79 160 li
79 154 li
82 154 li
82 160 li
cp
.780392 .133333 .129412 rgb
f
82 154 mo
79 154 li
79 151 li
82 151 li
82 154 li
cp
.180392 .145098 .145098 rgb
f
73 169 mo
70 169 li
70 166 li
73 166 li
73 169 li
cp
f
76 166 mo
73 166 li
73 163 li
76 163 li
76 166 li
cp
.686275 .101961 .0980392 rgb
f
76 181 mo
76 178 li
73 178 li
73 175 li
67 175 li
67 178 li
64 178 li
64 181 li
61 181 li
61 178 li
58 178 li
58 175 li
52 175 li
52 178 li
49 178 li
49 181 li
46 181 li
46 190 li
49 190 li
49 193 li
52 193 li
52 196 li
55 196 li
55 199 li
58 199 li
58 202 li
61 202 li
61 205 li
64 205 li
64 202 li
67 202 li
67 199 li
70 199 li
70 196 li
73 196 li
73 193 li
76 193 li
76 190 li
79 190 li
79 181 li
76 181 li
cp
.45098 .00392157 .00392157 rgb
f
73 181 mo
73 178 li
67 178 li
67 181 li
64 181 li
64 184 li
67 184 li
67 187 li
61 187 li
61 190 li
64 190 li
64 196 li
61 196 li
61 190 li
58 190 li
58 187 li
61 187 li
61 181 li
58 181 li
58 178 li
52 178 li
52 181 li
49 181 li
49 190 li
52 190 li
52 193 li
55 193 li
55 196 li
58 196 li
58 199 li
61 199 li
61 202 li
64 202 li
64 199 li
67 199 li
67 196 li
70 196 li
70 193 li
73 193 li
73 190 li
76 190 li
76 181 li
73 181 li
cp
.686275 .101961 .0980392 rgb
f
163 187 mo
163 184 li
79 184 li
79 190 li
76 190 li
76 193 li
73 193 li
73 196 li
163 196 li
163 193 li
166 193 li
166 187 li
163 187 li
cp
.180392 .145098 .145098 rgb
f
166 193 mo
163 193 li
163 196 li
166 196 li
166 193 li
cp
169 193 mo
169 187 li
166 187 li
166 193 li
169 193 li
cp
166 184 mo
163 184 li
163 187 li
166 187 li
166 184 li
cp
79 184 mo
163 184 li
163 181 li
79 181 li
79 184 li
cp
70 196 mo
163 196 li
163 199 li
70 199 li
70 196 li
cp
.270588 .270588 .270588 rgb
f
82 184 mo
79 184 li
79 181 li
82 181 li
82 184 li
cp
.180392 .145098 .145098 rgb
f
73 199 mo
70 199 li
70 196 li
73 196 li
73 199 li
cp
f
49 298 mo
49 301 li
52 301 li
52 298 li
49 298 li
cp
46 292 mo
46 298 li
49 298 li
49 292 li
46 292 li
cp
163 289 mo
163 292 li
166 292 li
166 289 li
163 289 li
cp
49 292 mo
52 292 li
52 289 li
49 289 li
49 292 li
cp
52 286 mo
52 289 li
163 289 li
163 286 li
52 286 li
cp
52 301 mo
52 304 li
163 304 li
163 301 li
52 301 li
cp
163 301 mo
166 301 li
166 298 li
163 298 li
163 301 li
cp
169 292 mo
169 298 li
166 298 li
166 292 li
169 292 li
cp
.270588 .270588 .270588 rgb
f
166 292 mo
166 298 li
163 298 li
163 301 li
52 301 li
52 298 li
49 298 li
49 292 li
52 292 li
52 289 li
163 289 li
163 292 li
166 292 li
cp
.180392 .145098 .145098 rgb
f
166 295 mo
49 295 li
49 298 li
52 298 li
52 301 li
163 301 li
163 298 li
166 298 li
166 295 li
cp
.556863 .741176 .129412 rgb
f
166 295 mo
49 295 li
49 292 li
52 292 li
52 289 li
163 289 li
163 292 li
166 292 li
166 295 li
cp
.576471 .87451 .160784 rgb
f
49 322 mo
49 325 li
52 325 li
52 322 li
49 322 li
cp
46 316 mo
46 322 li
49 322 li
49 316 li
46 316 li
cp
163 313 mo
163 316 li
166 316 li
166 313 li
163 313 li
cp
49 316 mo
52 316 li
52 313 li
49 313 li
49 316 li
cp
52 310 mo
52 313 li
163 313 li
163 310 li
52 310 li
cp
52 325 mo
52 328 li
163 328 li
163 325 li
52 325 li
cp
163 325 mo
166 325 li
166 322 li
163 322 li
163 325 li
cp
169 316 mo
169 322 li
166 322 li
166 316 li
169 316 li
cp
.270588 .270588 .270588 rgb
f
166 316 mo
166 322 li
163 322 li
163 325 li
52 325 li
52 322 li
49 322 li
49 316 li
52 316 li
52 313 li
163 313 li
163 316 li
166 316 li
cp
.180392 .145098 .145098 rgb
f
145 319 mo
49 319 li
49 322 li
52 322 li
52 325 li
142 325 li
142 322 li
145 322 li
145 319 li
cp
.556863 .741176 .129412 rgb
f
145 319 mo
49 319 li
49 316 li
52 316 li
52 313 li
142 313 li
142 316 li
145 316 li
145 319 li
cp
.576471 .87451 .160784 rgb
f
49 346 mo
49 349 li
52 349 li
52 346 li
49 346 li
cp
46 340 mo
46 346 li
49 346 li
49 340 li
46 340 li
cp
163 337 mo
163 340 li
166 340 li
166 337 li
163 337 li
cp
49 340 mo
52 340 li
52 337 li
49 337 li
49 340 li
cp
52 334 mo
52 337 li
163 337 li
163 334 li
52 334 li
cp
52 349 mo
52 352 li
163 352 li
163 349 li
52 349 li
cp
163 349 mo
166 349 li
166 346 li
163 346 li
163 349 li
cp
169 340 mo
169 346 li
166 346 li
166 340 li
169 340 li
cp
.270588 .270588 .270588 rgb
f
166 340 mo
166 346 li
163 346 li
163 349 li
52 349 li
52 346 li
49 346 li
49 340 li
52 340 li
52 337 li
163 337 li
163 340 li
166 340 li
cp
.180392 .145098 .145098 rgb
f
121 343 mo
49 343 li
49 346 li
52 346 li
52 349 li
118 349 li
118 346 li
121 346 li
121 343 li
cp
.807843 .615686 .0392157 rgb
f
121 343 mo
49 343 li
49 340 li
52 340 li
52 337 li
118 337 li
118 340 li
121 340 li
121 343 li
cp
.901961 .803922 .0666667 rgb
f
49 370 mo
49 373 li
52 373 li
52 370 li
49 370 li
cp
46 364 mo
46 370 li
49 370 li
49 364 li
46 364 li
cp
163 361 mo
163 364 li
166 364 li
166 361 li
163 361 li
cp
49 364 mo
52 364 li
52 361 li
49 361 li
49 364 li
cp
52 358 mo
52 361 li
163 361 li
163 358 li
52 358 li
cp
52 373 mo
52 376 li
163 376 li
163 373 li
52 373 li
cp
163 373 mo
166 373 li
166 370 li
163 370 li
163 373 li
cp
169 364 mo
169 370 li
166 370 li
166 364 li
169 364 li
cp
.270588 .270588 .270588 rgb
f
166 364 mo
166 370 li
163 370 li
163 373 li
52 373 li
52 370 li
49 370 li
49 364 li
52 364 li
52 361 li
163 361 li
163 364 li
166 364 li
cp
.180392 .145098 .145098 rgb
f
97 367 mo
49 367 li
49 370 li
52 370 li
52 373 li
94 373 li
94 370 li
97 370 li
97 367 li
cp
.807843 .615686 .0392157 rgb
f
97 367 mo
49 367 li
49 364 li
52 364 li
52 361 li
94 361 li
94 364 li
97 364 li
97 367 li
cp
.901961 .803922 .0666667 rgb
f
49 394 mo
49 397 li
52 397 li
52 394 li
49 394 li
cp
46 388 mo
46 394 li
49 394 li
49 388 li
46 388 li
cp
163 385 mo
163 388 li
166 388 li
166 385 li
163 385 li
cp
49 388 mo
52 388 li
52 385 li
49 385 li
49 388 li
cp
52 382 mo
52 385 li
163 385 li
163 382 li
52 382 li
cp
52 397 mo
52 400 li
163 400 li
163 397 li
52 397 li
cp
163 397 mo
166 397 li
166 394 li
163 394 li
163 397 li
cp
169 388 mo
169 394 li
166 394 li
166 388 li
169 388 li
cp
.270588 .270588 .270588 rgb
f
166 388 mo
166 394 li
163 394 li
163 397 li
52 397 li
52 394 li
49 394 li
49 388 li
52 388 li
52 385 li
163 385 li
163 388 li
166 388 li
cp
.180392 .145098 .145098 rgb
f
73 391 mo
49 391 li
49 394 li
52 394 li
52 397 li
70 397 li
70 394 li
73 394 li
73 391 li
cp
.780392 .133333 .129412 rgb
f
73 391 mo
49 391 li
49 388 li
52 388 li
52 385 li
70 385 li
70 388 li
73 388 li
73 391 li
cp
.87451 .164706 .160784 rgb
f
49 418 mo
49 421 li
52 421 li
52 418 li
49 418 li
cp
46 412 mo
46 418 li
49 418 li
49 412 li
46 412 li
cp
163 409 mo
163 412 li
166 412 li
166 409 li
163 409 li
cp
49 412 mo
52 412 li
52 409 li
49 409 li
49 412 li
cp
52 406 mo
52 409 li
163 409 li
163 406 li
52 406 li
cp
52 421 mo
52 424 li
163 424 li
163 421 li
52 421 li
cp
163 421 mo
166 421 li
166 418 li
163 418 li
163 421 li
cp
169 412 mo
169 418 li
166 418 li
166 412 li
169 412 li
cp
.270588 .270588 .270588 rgb
f
166 412 mo
166 418 li
163 418 li
163 421 li
52 421 li
52 418 li
49 418 li
49 412 li
52 412 li
52 409 li
163 409 li
163 412 li
166 412 li
cp
.180392 .145098 .145098 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.1.0
%%For: (\705\764\750\754 \722\763\760\752\750\755) ()
%%Title: (1709.m10.i311.n004.S.c12.532157530 Pixel game buttons, navigation and notation elements and symbols vector set.eps)
%%CreationDate: 9/27/2017 4:22 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9j`p\4:U>hAc]+:]NGSI:J%MP?j'4CE^APsVakhIiGss3LZiBhKh8ZA6>:kNns%l"ZA=jHm9;1u6eT.Dp%/l8DS`5C:*M
%ch\go9DDVHoau]R[BX^$h2)"Y1`<,Jm"jI`;,q@?^RnP;7IBR>dQ`Dfmm:]>4+couP\&sg0-q"62L$R:B.Gu6(3>Ae&I(EO8t\kh
%Jf_YnK;Us8n/CE[Q$`gIQ,LK=1]ru%lFf2L=fV\9k[3iTKr<!.T&j:'L&uiBn<\R^GuFO__B/hc^P6,NaZQJ$>7u:7.L[T!$S'm%
%Ol0RXh"50rL+nhs>'kWD't>6:I'AF2n#?V6qWK@<1kJ-q#lUB],%IAVj'RIms-mQe.sOeaBHO#";_2Ng*L'%/&O(pQ[jh7VdT$=l
%$)0mUl'B:`:DO-Y;C"]9;4pPKO#:>W"8umO-f]#"cM8Y877B5^a"]!a_h:d#RXk0-'#3o2:.:j/Wk,'klC]F$$T-!<Yec!aI5@*V
%osQ@[JCq5\igM&DPe&7F2U09`Z@LGBi=c+?.E[7r'F2EO'mU)XYigoV`kBQ(V]bmKTg_k*-!*77>?:/g6R+-LpaDG^qI/WU0+O/V
%U.Fc<bubZn'FCCe:E/Ed4B,&f=Ql#"25T_I,R3n`;5A*B-`U-)D3q/J1$ocd+W@]b`/PkPV1A$N5jTDp+K8!0_U8gJkX>eYSaG"W
%8d?i=&!JFS1]hb.=_[/FblkT_MAZ&/Al(tY;?7;!?!-URIpHg`@[3ZM"?0+UA_>1M)p7&f"d=)*.f/SOg-AMd9'a3ll3Bk5I)-Vf
%U0_MnGbH#E_i`X`95&UD1X_pPdOYRjqm7:NYMUJI#8rn@5sD?sn2r+G<*rUdHD)dI"#<eDT6;#5Miu(e0@,:=%T(7ui.WL+XZ`mo
%4CP[X,p=Llc33pcdGPr@n;L-n/)1"Lb"<2qY8-B"!C^/T$E=Wmpr3*]^r&FI4KWD;U*6-&Bc;L.p^klp84@<eB%RZ7nDL:jTHj)Z
%QDAGRkXY$48mo3kV5f-sFVXF5P6MhbIEp(i`u4T($38E5AU2oM!%:puW;)E5XkHZW*7S0,<3]KB9NCfl_gtq4'lQm`A#5bn"84=g
%1.VD@PU1jbV4&l64UJ8>$sI$A(;'8=YF?9KCC_UIiEt0/LR(j=]$tKcd]h/\:0!FQI`E-NCDS72!Fm;U8*Rl:7SVHk!ga0lHko*n
%[?dM!=EoJjRG``jV)/P#,GXG,"LLig*Cr%j/H+cC`+aW9WTq3rWTmfi"(@N#6DnIl]IPH`!7`u-U">HB^6C\F[sVaUOai#3-qebC
%\iai7<CTJp6b/un#<H2,"A>,niK:RNm7#9RXn?@i"&\GlFZ%YGNLWnR3P9;87tbS9?Z6,&%BVqrX/q8OqRs>8&+hu\G@O6\.4Pn8
%0c:sHaKh=0OG62+:_KUMXY"M5f,-9YNA7Y7k?.K"GQS4#NCc+TBN;3E1\GYNbLRsnpeGd.^8*3+(Vh/"OK)662Q5hoe-.)(Y;DIJ
%U?3Y`G&]3jc_ZOd)kRrT1@+/Jdj)<GJkK\`fF%-=X^6B#1=a,e$12?hmKE;!!uS3.NimeW+SB\N\-0&R]$<i((g772O"%R3IDLCo
%EYmMi!'u2k%h+B3iRe0a8Q?Lq1prVpf2])6-n*tj^,n#e_I%p;d!l6YK*mJn/@,p3heibMcu%L/pa4'LrK.:n"pLD.Lq>uDUBPM?
%;=D_c99LDUVDIod\eH2fdchO:R?f6Y>6>Dk(khKi`sX\eXO>835E!e'%hC5hQlc^XHj,JgKJ>H%Lrg2CE]Ri2h#hGSBZD%oM[#;r
%TirIg^oJeWQ\G._<,%9uT*n"lV)491e3&_]5,*\9Q<p6@7Qn5p(a[i!N)bSGQrCuM+],5+T';o?(N[q;V_b6.rLrQ]q@1;eYsV7K
%V*"$KeHWlL:BkJYp'<R?)GYb3nEDQg=Io^8Q?Ia0rjc\HcI,Ht;X'$O]$5k:9[\3S>"KU32=X)(;"66::#b%gVKE[q$)I!b/nX:!
%RX9NU/"N9[7kpQimdc-:JO5Xd%G8p]%Gs@0lu6Kj,<Hmu/Sen;i5i'p$G]r30,:IIA%SRnm6"'4i6Z?R69>_AJjVU>g>UEHB9<1L
%FuZj5mEc@2LF0ZSG2m9NZ-^eJ*I$kX@Z:7g<(1/o-hM6eUqS.lfNDa$<7,p*Z$:s,Gsrb8Rg0J<J[YB"YnD>2"sV.GKccM;g$T1W
%"P'8#W):jbDth%B<GZt"R<?)dZ-r*_BWLGUG%uV6K7!#LE+G-WM^d(EmSee"AAN3$#CcB_2>FcoGN_ic'jZ-:?\<<H_6Fg,$+8Kk
%1PG4=G[SWc4?)qYl!O+W(N1?lc&7Ws,IpfE7a79un^H$!Vk4c\E/Rjdl;%&,D>;s$KgE_Bg+9W&@LY.[(;+IG&F+BE^6dbHCEq9<
%L+kqql?GXJ"cW/#0,&p0N;-+6n)&DZ$+,lA2s=&[]p>l(+b*L`fZfb&o$87:^H3q@;tCeQ_Q_paKPkN[=,W%=.lZMOdCpC0f?ZR!
%3QmB=>WA`$;gh`b8N?C$Gd]^JR>Ze$*i@B>P?)P%b()m$Mf_)N5^VI@?>L[qFS,8HqmdMIR`)+`#BG8U#c]^pFi8hIkZt49EAeA7
%P#9Z6VnZ2@U^&IGT,f2DE?Sd\h9OICk,Hf;;/M1eR.FS!eQROUORX5E?:4_JCWIQ'`5-61,?)EoaES0i='1#(aF]0RXJK)f7S!ng
%OXXbs,O492A%Z^W48?VW`d$;VY8cMEA%Z^WqkfGjQlWhW]JqDVR`1MAqrn9ND:J/4Z6/;_m-1UnnE!e<&?3M;P<EmJHsgi`\-M4=
%WXUZGHI\LUHuAAP#A7%O1kpE5X`Qk9g@YMmXsXu)q\FTJdcJ#+K9Bl-n-mtu*5aRCG_QXQOH"BFp7&'1G4u$mMu+WuQ^Z(r2bB.N
%_7hDMpD$]l:0cks;eM"EFiLT(e<q[3(XJ`4q6Q]/qZ$!])&`%M!$_=kFbZItVA`=WbKMpVm"dDfH(5>Nd*?p*-6o5*YMeeEXdq]0
%&/8dlF@]_1ZNi\<$I>f8X#dYo,*NQ,P=NDC<<(V*#E*A?3p51GHGJM52"TgXA8Vg%(gDsMc7lZhIKWHZi/*db^_35`=mUt]I@<To
%GgU/4d/49CGek%HGiAm&]\nV_"])f/:JSRH&,TC?T?kAJ+I2SLB;oO*<pm2LR3j3qIYq^ehT#NS;b$@H-@B2)XEpHC<d<S3d1<>J
%_S`)i=Q/Ag%=DR&>fW)Z3PaJJNkr[V+(]._'VpTWm<EST?r12%_%E=%Zl"E?50[em#=n4_]^Xt@N03VXN/dTHVq!iIBa291':eOu
%:@g6is,@\^89U7^nEPjuV>7oBKNs((]R"'s.6d;p^!J=.+8!NdLO[,R_,q3&A/O^40R+3I6YV&/a^D3!C`#AcdeY&3_pQ@l/!p%X
%Mq+5'_oH*]L<fOkS@k[_p;-n=e@c7qof8$;??krp0%]8G0X&Pj#tgu?(C.0'W++TC_YMVFQc@hGJCi=Qr%'aB2.T.TCYMGTWj5H:
%n,'ICV'jcg_2g`'lH-g:iU+<)NG`'GkAf,?de"cFr%(K"b!EpLb$MGqgX!N9eg_0)9<a/Tdb[:)-.J4Kl.*YZjk_r#RV2JFDg?ZH
%A8,C5?e+nrnWA8n0_43JrDn*YS"r1i$[u5nmOq5XiVP0Ub'dH\\#!-a\/jr1/>qC3,+cW.T!pMnEAYjahMugZrYLXM_+rBu3(;II
%qX"a.DicX3'L$tuI$&(2nJgNsMZg*MOrSq'Hnerj_f(Vin-HR>)dMnPjEPWK"AiFs_%FFJ^)2JIIY3$!#=n[r3?B-+GALO()<@FE
%X6@7cbu:mR]h,qORe\aA\30W_UTIWjMcd(lJi?Z&2A"qB7Ih'SC<oUcBN4o"%^I_sUd8kG;Od(0'hDDlA5<I&gSj;S>a4`^elW[`
%@SRY&LLRaTji'RlrOdA*&(TrA#&Wj;M(>toTKDLFJR8,rP8RP\k<+u&<S1b*3U%d\J)d\$3RdZ11uJ(qV2$Z#d+&^nE?<E0=c,N2
%"?bN?@S>EQ7s;24?@8TN`J06"53-3R*8*RV7bg-'d*ePK&b4ef0)Qk1O]=@ej3Pt*c%V^hs6+m`H1q4`5%J-ap=@LHW3'Uf=b9'T
%\<Hu]K$hm/J\cAF+s<Xe?I;nFGBu0J>BjtgZK'n\_I`%%9CG]\dPqAHm@b]'3D#e%r5YOGR.>Ni3Z\Q,=hO>es(J1!QaTa9IfHe2
%4OGE5m+-'?&k8V.O76R6>95R^=\^at0pjPVQ)3WS3<Y$qn<N1B.WkOs04/*h5au,kWK5`f["\68B7:(r.4.58Y3,%Aj/J)Zg-Js"
%P-U#kS=d2j]Z'HfCpEn*/\iH(>.TbBU!LT;]`'o.7fV`]r$74+pO1R&^T7=qn%7Nf^NdZb<9=H>$RSNXiOAN9()BqkU[Q'7B[pO`
%M"2U;;XjgPb(AYE6WH0R>STXb02>KOUO;YeFodA5;QT!L]B&cB,KSbr+-Y'e%YFjLon\5=jh+]YV624k33BJ5aL)Dp99<[-SY(tj
%ojDf,XZ#MSA\lOuKoL=`Cp>$TYO5tU>bd`()d`FaX.#"$0+e<82.`\X(RJ%//iKN.V\=GXYpTm2N$m.YB]k084^%:F<f0_W9*8lP
%r7eS:,5(/Er0_71Tdt7J!Q(IuLfsEf[8q/k`KON>kVENpn6Eup=_,<HVpc(Y9e''1;pt/jf-V8YqM"&[m;p\a$U7*TCBPWZI:jJt
%0LWmt.i56-JGod,TZsg\c+Fc)pUNNDk<-t4XEpN1+9L?]E1`WTk?qBN$*CCNKXQu^ZD5,ml&`a]Te>In"KG:bL0j#b%DmDd_KG+$
%8Y9RR;Z>St\T?StTr>Yj+tH@u.qKRnIQR+?)#6:M!$`RT5)alIO*i3?CeQdLmo%ujVk8(BH'u?)Am1q<cOPp?kJ^2Lo"pERo/c#Y
%>_b6b]PRG4j$k-856--595.T<H)k;fC4692=1%2uis*h/]^3.4EG#:o5ICoX+l5E0\SNp(/H&fD?4LdToM_YgiR"P=q0oGk:Aa>L
%od)e4b5V(u4c^\qmLObkqZ=,o2_UZ<T<qp<8:Y%a_4S(-@WhHef#nYEJ;=m:2dJoQH4\66Et"RA:L#GspeQ37LA)")H28@H7D`E6
%`g\0%E?nh7T3rDK=H1'r]l47-5KIQtJR3.6n-:uR4:`t>6-`L->4i:KrPFVTpktY@#KLBaJnLM9?(1.&pe.,MXH,U"$G7Gd*tpO'
%ILa"j_]]d+Dft'A)KYX:nQ(X'*8g9e%D5^$O#ZY(]3qZZT)G'Qfe$!%Y\9J.eQ4,;XG15mV2Wr*lO=ST[GF_'=V'jMr"^##9J".%
%.eX_hI.jP+2c]C,`nY&E4JT0CY&J1\Ai.0iJ7g\S2We;R5*'>5n;PA]Ba2msi#)tdUTm?G)T4,MBR!uuBkB2&i5CV?3H'Pu&,(Zh
%D33I/9:I^W*2f@L`Uij]_S:\TBh+t'5PB]#ROX:oiH+j)`CbUpMcef]@R3rj1SNX!:*KPXGHp;p6f[Vb/Co^lhKmJach--K/)YX_
%a*Tf&_suTXYcqU,Sd4.ue`/gj*TUdipcNAq`W=s@"FM7)K`aLYnDSm.#CJMh_Z?C!99NPVJ8`C:eR+"NbFV\='JU]1SYm"Y4SY7O
%o\I\ENSheeP#2aZ\FI%Ok'sngWbfZR6[LR)Q'^Bf++MEHSajln(re7grIN8"khrj@P>GS_"Yb3"2r=68]EbbMZV4@0!Q"@!ml<cp
%J#\,SnY]GNWF=19#$q[B[^A@2mdQCB"]i<]qTArg*qgKLb"CU/.VMrhSg@aho^LR$hs35+k56s8<>\1goo-jSdC\\[XHj'A]eD5M
%>0U]Z_o#qX\g;I1U0J=BZ0#oKaSj2mpq-(#U,G)_mRQD%g17".:DR\S8*g^<K\fT:3J>`RkAspl[`dnr7@.?9*eSF*6"JA5ViCb7
%o<;S2.Di]sLH2d()5B;JZRd/?)Ld82i[[r3CjbjFD9QQRnB7#T/NSPb4iGgme*HNs#[ZX`#)\b`8=?(k4Wm3]<B=I[*[7n8n^10%
%nQugU^C<c#]ksR0kJrN(Ii!Q-E\6Zl0b@<FE1p.SM^?4B4&rQM$,gttH*JPd>uC*1,[F-+CDVkp':LJJo4"`#F?T7;TiN+UL0s<I
%YVKc9SekV4#ICIX3M99FRMQnaS2RF6N63eNqkkse:-UBY<>!J/Gi5c3QNkks:TTOHk8IJ/?)ck`e*R"3(9G<&XH?LBO`_C^U=<4X
%-]/^PQ=]o%M0G\=;T#5Q%(m6bflj*kn2Y$e<SE<sH<?83]"KLu1pef$c][`cn_dS'a^13s(e?g_N5a\4;Hp!2-si:WHVs9=PlG4"
%=in?*jT!#%'MfjWkbHU!m7""VdU!V@bUeZBNVB0W4R7^RMrMju(*18,X0`\^$T#uSl[S(Ibqe^dnYF>GHIk9%\_J:Po!H:BCL[)L
%VcY!/r6\QhZNVk%WZaFGN+TJmX3iY64T71b9WpH/c.P=U3k=Q/ld7qtqLQ`@Nh+!OpM3%WiD]'C%Wia[J:S14*<nP)F;r=a8Q<"O
%q?ZRe*Xf;(QV+^m8f</2+qZt&"o#Z6n,3.9AImUTC%mMU&H'7/-VQn/W[h)sQVrV;QL@0($;CN"=)&b_ES=-ZFuM"oZIIB_740Z;
%MS'=G%r8:%[s(3RW88Z4KY9BqJ@,^NK,dR"+hS%]<[bsX&d8&^s!V`\jnC\uY2)aNK@8\5/G;AJ3:A?S]-mip6nm:_';'7$[FSJq
%E3o-!r[p6`IFtZk@q%.J&u;[+,K]1N#M["oe*N$CX>CK'mF`TQ;HlcW9/TpRWmVZtIY^;sq+B1oG8rRJA>0KM`0pb/ZB"?fKXtjh
%,r58aiQ'i*&\^&?o`=Wt"0MDPI*]!LYPpJjGlqu:^NEXBm!:kBR=gg27f<s!%QgP+[j\2-Z$`BYZ!3hEMm%Ck-.l@n]WbdX\llu4
%Q@I.K>3XUndU3[qp4n-]8O-S]P2p!OVVnV-]V6C`'5ZG/0%a9bK,6'\-Y#9Ki)tY%\&]CPa!l8LYXCTc?9AKij>5F"l*R-]Mi\t[
%0.DE8^>Nj8b^L5;=7uF4>Lr*/"J3a7,M%UR1"o>H*Z9U^5)Q/r/4OK8g).516LA.-4\"2ViG!JBjY5Ct[)H]?]8oVtEL,O5gDc4F
%0q*h5>atfa06DjRi&F*u3Q=oY$ZcS/c2i2\JV+BdB'^aPeG^cDjtUU\eAeFM1MT9NNjCR2dU:]E6W0@@UC9lF4DeD4JAqTf.f^U-
%!0%!t"8(qt2*o:B4IfH4dmT.GrcO022?0*fBV'qWFc9s8#hgPoVrl>0_8dB$g).2H)RO36`aI$1R#Ng>:PC?jAZZG<1P7Sl/]=<A
%62N#pRq.mG6>E)Y80+U;,fFX'jKfE8q9]BW)ZBspW&U;%_2+'_q\Ke_Y;g"0`e]VP7[D?(<emT@0cR;T@a)iZNP4[)1TT'bBkG<'
%$]l410k01bm,bRTe_t4Sd#MV_`h8;W)o&VeFI'<q4O"5eE<:bN#&Oe&Z\(.LVs,$+bDF6,3,l"I--HBE-Z)f8GQo+^oIlmpYV_<e
%(o8rZs-.:nEYNVk=b`b^&<L$%Gg4=MVC;R@Pu,9nNlB"C@*lodr<o8m@aN,fNBnN0LFf!-XU\,_K/SEL)hU$QD%,,kB3D:Qe'+IZ
%A'i5gNBnM%n67NO=rj2H7Vr"23_!qEf_@=mV),4'iFu?:B(=(0(pbr/j$h&NZ`M^9BkG`3n#KsF`h8=SZ^9"D<emU+5as&;r5(K!
%D%,,8[$T+E<emT@5o[SFN^4V:2L^j%#u#&UGa]5@.D.#IK/<esfg/eC5DfAJ#f[GRo+6k)=CVWV&<-SK,qu1GiFu>S`]L1T87Rb$
%Ie)8'AT`6d%>$SA+/al;(dg"6DRY"Z[5pFpLtO%sRk\Mbbl.pmjs`?G^0o7,3W51WP%W.]NB#%tq$_L?2*A&\?B?]SZWpn^`gH_r
%R#PHA`0cN=)uJ=3B3D:Qe#\pr?U_o#NA5c<bl/@5A#rrVSn>rFr!"=a>)]jRi?.*tPqZUl"0h=MK,CgI@/g@;j,YQsbaoJ[j-L!*
%An0'a$-^EPiF0g!%qO`!Go3hAAH0jhkpR?\BllB@_oCV^#EibbTh-0i!RWPS4C`X8Bm?NE-PJ3s@sH"3Yftp"<emU++IFP9fL<ds
%N%l/fe%fAga2+&eYeuC8(5"31O'$'?=rj2H`b0\k*6)WMcZhccmY8#.4O&i$'ZOO>_&.gpf!qQ_XOZ9DB$ePQC1,E.TT/]c/Y-=P
%%Snlj2Ek(B@lD?nT>58ja>6<Mrs5GM(;G!D;&Z2d7d23QV:FO=7[.NSM^B:;0hPr??3X>3*M-k2BpQS.M\r9F9)m*dFe"E,%s+M@
%Sgep41YR6nO$d$hMhi4AIg\C!777R1(nQ3YT(+8U(prH0g3=>EK/Nr$T)rk[^C[,"JAUNp(7#2C2M?(A-$XNi*1]:9YQ3%p$Ok`+
%[!r+`n_*gWZnZ6(:ODmgCNXlj)78oWrtr*tBOahbq(-<(Ga]MWnNm0lZnZ6(csAoZ=rj2H#&V$9)M9pPD*0teI$V0$4O";gGRHD6
%D%,,8[$T+E<emSU6(>guU12KhTT,j>QHuj;LSpP+)kW:N5oYG7p9^14Z;uaYfg%VgiccJ!BOfD\&[_(P?81%2'\MD())9cQYasT;
%f%#hr,ChNDV_RuBKdZ[4T&k>Q4@b#3"t%+r\E:R9L&fgVp]5kima[3E-)o@W9r+@oPL/$X4@?G+%-BO(O0NYmNMGJi3b:HD;K3JC
%Z;/h1A\Wc#*9DN<c=G\*@G=5t9a<TM2j3u]-/5OLeH'E0+(_]2X)b1]M^is:l8Bk!4[15NV/B.l`PFgh\1:T'4)pGE8JmW]0mH5O
%A;?+rW"^<E^bZCh=[`:_Hmqr,.77h/AUlac;Yt6cQ=4,f88Jh:C.e$md,0<fCZ$ROnhFm]aafYa^]1n3l#K&`$qV//rno0j_(AQe
%T]o>pgF/63DO,`nWeq4CqL:su.*S)@W<Sp$N)CU<`9n`m%"KL=<-F60BWa%'l)Z;niM(:jeAVa'pO0l-3cZ#J7"iBAQ)_`QfLNUd
%&1:IXpeQhD9sn*eC+W#[X(#/.!rbb4Lh_#NrYk^uM>HVtB").C-E-lkJ-j#\!7J@*IM:f$L`#"4:E]!*5geigf(A@OV&'m9F%%`[
%P*K3TXEtSD6+XB6$s'3B*Aj/U_Bc@ROuTs>gj!5V9)^o3in&lNIOu7PU6(&./:-S!?8Ofh6^Sl.p:bg-"\?6B"qUO2%Jp7(ZN0Lh
%7nn*/00hH,NhN*fHFME(U>LJ*/R!L%X"3o`h\X)BQN5/)Z;b$K)!;/9e_Z+6qut-uV>?kH8``"p63&s^:?S])9$NYL?l>(Z"E+mD
%S]]\OhE'nqE9'Gn5<Q4C@mO3@NG5eWr)Ap^E%;9)@rS8:+H#j1T)548nK8B"QB\(H'2rikos^XUW^MVT`U$/k;*2W?bd!#2+j&`1
%e98a6OtT3.+NE3F0fT`oVDnRY'V*P7k;/^^F?d-)'*uNUd-)qqTP?3`aGT7S@.jg@_D7uU@o$*nWn?c5hn72Sf]X-'a6B$,4&rPW
%:T',N!rK,J5$cJc"L#X,%fPPoeN1$>DeJl^=6U0iNqBNqkrfFI6L`#iL$d3[+A2fTcIdqr+aBLE@TMTaRd:%;`S6bq-!qKJCoWil
%hbKTl#OI.XP2>@)BRL9=Y^YX06F<L4%YVDI&:QuVikO995[@a@o@,'<eFl(uP!uVcj/+n2i@YPu%1&s-Uo8>_#?]P9AZY"dH\tZ8
%UH_p\A7N!@3MZGB:p2t(lNmHtg%&\1QQ-JLhi5u)Laj5SSE.dS8brkhHr==6Kn8Hg_L2JN-os4Y0iUhb82;:]$0n1`#\r0sK7g+`
%nu8CXL1=ATSP2Y-U.9g(=tFX->R'C=oNJT/[&Ltj8!J^DTF0M(:B6\_qZ4j'lG!7"RDsY<TdQkuDJ(@B8FXd-76D6*eF"fo[PAhQ
%qNYL8Bf_'Y#i&HXr?hB`i]dNP[Or#BWalu'8WJhYUK/5tg1d8X:$@p;L4[_f@U0mqHoE7R$a^l6e^@f$<MN!&J9f&(0.0-EWXDp!
%D&E%!95gUd*<THZ&GrSl>p:.hl7ku'YW["a*:s6k;][,W!P9:Q&A$,[ckLmsV)OR/]g%jKT!^Z7Dr/8Y46u:]XP&H3<!E(elj`'j
%V(lRdW(IBgCZK\G!/MMfA^8mEa\V+1,Td!kTg,t+.5YW--1!U=K9@XT$3ME2Jl37mW0][l)"1%TW'T`<24q/$>47g:dKQ^u$pTE!
%+(2@Ze.mB6@$67mO\D!q&f-[G-hFmB//pX^'3-GQE-I8/O"7l(p*CUi@k8Wp2b[>s[H9^M$K=!A2RF;?M73a?m>5Kukm?S4'r:Bd
%56DSu^EA8@JW877@bt0)p3JEgo\Hu%!4,ba7(!7YT=B_N\U.[eQ?p9Ni_/PZiK>l[p:g#j;MJrJ7dN\%qGgVr1!pu2)'m8o4@P\m
%#jXT)?PIl:U"4t^d]NDJ@1m!e*[8;bMnXQDG,Ss/nsjJ@*acMPA5O2gn<;<?j!tSS&7lmA`fZ]BQrdu]A?YWS\G:,8+Q'<C6P+Q+
%>SJR9j!Y[[ItN)7Kn8\6-qsHn+()C?n3X(52\7LeD--SS.29sRaYj,%?YGaMTc"pLjhP6oL#ub]rkL>unl^s,k<hurC0E+sWsqM#
%KAL7[G^BNelPNK[<HMj*PGK2i4E?T9C@+cQ/SNo(,ft)8&k[,7f^^lQGM<<"Yj\oWBOooQ6bY>F-@INM5oNJu1ZO,[cT]De&&r4/
%OS[WK=jmGc5Nal2amu("5A*'/Z@Rj,XH9'I_C:N`HLUcqc!2Z+VRjjR[QX",_W>EVH"rMNV`_s:rpNNVNGNXD2TC3KNNC=3->Udr
%MJ.*X`t0qBoJ/r[:o-g]Z'qm1+uHnCHI.KeN-"UGO-DHpE"2]o]%Y>T6!rm`2;hL8k@XcK;'+IRa$,XQoEIP.U+CY#q*ZY3YJh>!
%7e=>8>'?nGk?I0\]X82cPdW.fI78%p[le8GF=b*`"9UPCj6XTOm(@$A%BK]-d)bj_MQ0Rb*-QFZe0#03p0M'3BS+Wd;3h:$-k6/2
%jq,[d4J%"IJZ]+]56*F9O1geO&0r)uU[],tO;\R$^:`N<GmN2/@A'PP0@liLhDhWb[oL"&`=&@kC=EHQ).QgjJ7gA]L>NZG(f-*k
%?b]_^2B!e^A8KfLY$`.dl]uQ;?O*ih.$"E=@_=%pqB-L)ltTdrO;rF][+imG[\InSs61ut!4po3&<-:h6#"VV:'sX?7NAQJNkSp^
%]]jRnSkr9t)u0\)$K10#GZ*bV`q0Af1Gp!re.fF=mN8&N2D#+oDE<0PY8uEPe[U?;8bPH[hEMh$(iS%&p5,Oqf@q`$";UtF7`7&c
%9!u*ung3m2Cm3EhI:I'"4X,V:=>1Fa_GJmTP+"QnJZANd5/K?TO=cdBE3/N*5c)!s]ZcJQP,C.S13J6'TguF8>;SuVVjFuPBi@3p
%Mq"s&V89ZE"g.$8R:S2P[b@BTYr8kmH`("RC81B8e6f0$=u<8YX-2lHL*_mZ\BBKD950i[)Mk\7/u@q.R[nW/VCDd*QjRq4I43Ws
%1lu!a6S?5*S>9"#NMpS0od<es+2*j1AaS3C@ETk^_u_(jTM`TH%#?=N:2FfRCd;E42qrW9D4pNu2$D0><X#lqNN`Z-IAtst^8elD
%et\,VN.1Yu0Lu:jl*V5uh^N+7>#2="n5>s$HGWrcXkWkJbE-B;,&l#$M2;u@J^Yu9>@3U!X>#OC^3.8`qMMMWn"'<\aL^#jRU)E-
%9OJ#`J7&MJ9%iO0;)Dk`'p5Re41=D#a]o,MW\ioF?Psk8DM3sK)%?:=LhfU!O:U949E30V#[:_?(?-ZaO,fmAqlkFg@`,T_jH<:H
%;"hl-#_DiB_`tO@og*`_I&;\M9`q7^G7^n"4ggtc#/k4VqosKd-?ua.X:1)%mMO-`G#a-%rrnD%LrIBd3#e]nYq6(cZ!uYD.KL!/
%9495uWAHl:_6m#PA&r>2@\pN8^uLOn:e<?#EgYC%EtOP4?([!k_";33B*Heg$,8eQTSou*'F*]KWC^^P+'/8k01=S;aG,LJ59A&f
%NpiBt>c6o!h7H5^pY:t^Y!RJXBK!/meDTp+9ql?#T,I!hi"'(6]JbO+RQKW4hOmT?MCa\,;6b@tP8g6!P1en=BEYE#fB7!:I>eb[
%d[']5('U<QNq@#g`[!2C/5ab#$"4laJ=4bbBR(@"Hu6rnM/!ue4`r^N!S+gXgRO91TK:VaWHmfO>%(0ZT&pe_l_&YckR>gBSWei+
%:=P(@PsK38!QGT>J/$_OD&MT=nnO^;`h418hjgKiq.uKEiuAl/U?!SHKo]HON<s`0:j.4PC0g5]Jaj+/U"`Qu9Y'8FW/O9Ws-9(I
%;%C4GBf("o*%13)H2tafFhI0^)/j&H&0!%GhBcSH7+\NdZGpA<[le)+DaEj_Nthu"f?t,K0`WVd?@=emU8CVZk_ie>]r/u"MSoN1
%kVWi:HFs=\Bj3o0<5g:4b%(rU=?>J9#7'sZ'3+3U10&Ja*FL7V2I3*l#^(XFZHPJ7X-eRoP4]Me&C5`0/)2^!fE:8md*k:Xq_]VF
%g!tK;EI:Oa5TBWJE!:+N@sot6n\`).;/0b`KPaI#m<jHu,"^fdT4MMafD2K;Ob`:nlZSH-&`$]YSfC'64+9Fse=7<HW5,00q]]jP
%3earuQ?j\/l*dKJ!!_0.b,=cH1jH[3c]i/c7.%\p4$`-G>*d8XgL_RF6K^`Ol7f=3$/N2,46Xld5h]-?=E%0gSjN=Fg`(i]F_OR=
%\MEP,0=B';rJ2d<F4CG520qaLO`+NggeC@p"Xct-Hp5P^J/-\`R5u:9^HXf=(XGtos5VK=S_:\;NUQ%`%J;DTC0UlKo_t]EYMKrl
%:$2'pZ$2HM`228.bJ1<_a'gL-GuEl)qsV:KJ*9&UpMXuPq>J.92,J+J/S)'a2?*d/po/pmSL;7m\dFY_,lcS__8XDOppCl!8L;:g
%X[S^28AHS??9^g8@VZ>tZgY="),0InA;ZE7+2d0)7U1DBmD3<B-'PTL\d'j>CU!;\A?>RR!*>j]Qn3l)::?n=*K\p.<,4E?)sp9:
%>jYe5a0TKZ?f$K.e5S=>]nuBt7>+'QF(nMMKZRGcN+Ch,5(i>k!5IN0MJ?-kPgm4"K=5c9a!Aa&)m>%sE_frDQ*$@/[G4&[R#KII
%j)$ib)_!,WTDaaS2RQ6[Gm@]_eb-W=9OmC1,BH&EhiQ?L4D@VSdQfc0n@,>iT"^jQld'prq]0tRn%Y@*FZ%!TB2XpD7in;$X?Vm%
%D0:lUL/,PEn./DR<8h[]=5e?"8^"Kr>uuT!!c(W`i<m_\O+[?d_!9MH)ouqj#4^Cg<7+\Lgr\H@%H`f#UomA21&Bue8tMh"T5KfN
%p#F:rFuR40('UJXcaRlUW-t&h<$&JD;D6gPWkDKk8UN]o.>pW_`EkiWK-a_i:u?)=-9Fh@QoiCNY;ks_G*eL):\V`ZMZT=A4Ke55
%Ca"#EdHe^(^]3`1cd)LJUOgSR;X0k@,tg=VDH^f+iRpPFkN++\&c9Urp8O0I-2&rUg:QO-0Z/++a]h8^0)"o8e#R;MfGQ$^*s2tF
%c]<#p'#/n@jQlUn:g?UfaE1$d2l]!TgMbG1[?`2XmJ&3u-u7FIT^IDp/.MQ[E%4L<:6MCk#q+/*eRU3D?->&K06AO`EH1&=XKKs#
%OYQn%%tr#[56-(Is'#Bn_sbq,1Ve7c[,6@\2LmAbdhNYPIU2Q#/g!:UgO&I-AF,b.!K#Z[K<HsDa9@hGnLo).Oi*$)W#:5s,1+F0
%S,Th?f0+Uk-ZeNZVnuI6"qQ%Mk2@$_Hbn8SET.KMbKp/a[\W]-chF46nF]u-^N9-mkE!8d5Q&oD,imj"8r%ki;nVgfI9uQpJ\epi
%*o:pdG4XY9cg:klr&e+ZrNX9Em>pFt;ub^Vs38;cX$JW=%l`s&s3]6IQ2gXIYj"r*afn";\"3&eT*#gXG#M]@kDGl<s63#A`Ljp1
%"oRPG@FAKo2Ce^Lj)E(HguS&*lY9>gQgtrOs-@o>p"p3Cf)-'$:=fGE3GcNH?64!0s4asZidWVf49"O$:!$alkcO_$oqR,RV$I0Q
%H]pG^GP3(BrQ8.4`;`uPs7?hFW7*VR?5TgKHDuh1buA(l/_GBZ>mmQkM7#m(j*cos&GF^hntH5d=^s\icIQHk>J[`G^$a(td?\aU
%Q;AYff@$djdTZ)+S6=%Mk2j"fbN[R2<W.MP]90;/CU\r.o%G;h$@5:dCMT2u^Tpo-J>sRcH"p'b"U/uL^"9Yu0p[UF%(:&a^fj<8
%%r=#AX[#FWh?P5NmPI2WO0J\s8V[DQNmJ:V]^Ic\M49R(5j%Y(.WAQ8Ee2)Uq_1io\Rkp)O2FNH0bE%G]Z,;6!MLp?!O5em"?rdU
%%o>unH]r=NqO>UhqV'J>@sr,?h-:K*S[?t)rUZ(meplFWO2"XXf8n4(rq1Afgfcq=PEGNrn3+C4ZdV-D^Q7fRXM=,Y("\/Q_"2m4
%ik2\UId[g!H\7OGL4=\t#ccS1I(1_DKSNbb)s!jBh;ALZnA`<+k0ZYUBTtDM>1]m9Mt=j57Z!0Q2BLHS%i]G-qfAP3+`SGCQ1s9-
%Y>OV%qWe3h\^diiDalZI]hO5ggY^d:P0]U(.2`9=Cn>TikF37umI"S3F6@N6l2%3e.1d,ufbE-&c#2Z-\iG_&m^G+OpQ;S6\GNML
%gq?1dp943t[Sl8qZ^&9Te[LDh8&nj.;R!Y'2JcZ827U]r<i;%_C^o*T@u,kD7u.(OZk7cnEcGtMGk_ji"LGZ;LYr?OaC)P_g'k^.
%#dn(=XB,\M.=qp;;WhhhXcuoqmA@e?&76h*KoY'edEp!JVB79Wg\&q2=o(>SY5$=1dSUl_'Ddr'm.Np21V=aaHk't6YF3`(j&;hg
%I7g]$gXhpPYl1MVDqi'5I+`C1YKtr*V=GT9Kpo2R.]-1^qkn5[E9<^)KJ.O)EqoXn5n+3;rJg<e74]>uXPNB=R[mh4OP6CKq9,=]
%M"83BmH::9X'.`loCuLbGA?SgG,J8Uhac8/j`VoTE>4H&H]_haH22_-3L:[Wj:4SjOnY4>Mb#pUdu"R':II%0HG52URoMJ;B_>aj
%dIY!.IIs[]YT=P)Dbm/!=]aHc4/3=0,<%R3h,lhUm\Yc;DnB(t"+'_+p?ZW4Qm96?=a[7__-lhaTPjpLig:I$`7^e#+RY\dH_Pfq
%@dPeHR,#af$_SE$]F=1jLS[h*bR;>mH)pEK=XDN(ff^qD;&c-*P+iGq_UO^2Q)XBIgEZBq*Bg+]@Yq!H$\9ljPUU`hNX<DJC%hLk
%0(PttqDH!YTK`e.(peC87=]-?h*F*G*$4U=bh6KNNHs/_+#)^7HCsHNl[:\HhB&okH[^r;8Z+N"gYJnA>Dk<Ep2al9kI.iua'=RN
%5NQpbh%Ef'.93mX*0e"[pu<^9rPEN$4B0YC&an`Ir.2UEU=t!#<OV^P*=atD=8/tPe'hXi4Ioqj:Ik;K1$Lgj&J&+mW&Q)p(ZVL>
%]3bCrgH(/*MsI&!`t!:d[\_%1]tN3i+2HLuakifFlKq1)_[NJUJ,NVQp6kPEDEj?<lL1&qYD)rOrRod$5ToJ*LgY`r8>JJGK4:mI
%57h9WTnC\2e,*S7pb@2AZs=1_?4*gg@HDD*r31CbdRQAHkN^H'VYYU\H+oh6W]XQP'0,8K^!5S.,i(XJ\l<$tYBko^Z&m_^*324G
%T%L_;fhE`;H7Mi"DYOn<::lkb^V.(>[.#UmZh;@No"KD,8:G@]Xjkofq]cij*d1HE4[MlVV+q)kSluMSC=:MQD*"5`$:j@/?uVEL
%<);p;lOUmZL;1=dB?mZSdELp)/",Y8?^.k.Rn$@7(#'40DdWFaXL-f/b\c0coQ0oAXa'83Cu=BT=+gL/IkPng_FA!Q-i)+8XQJSd
%UNUYJ)%NXD7/T/qROP9(dt^utkd7ZJ2tK,mo:p[g'`,o.51e6YO8+QX()g);B1HDRHr_`+?I)f!imE&@lFDCnq"/`R%O.,s!)I<*
%#fbB7_I8.Ma#Oo->KQ8!lgFT/,"2:r/rl`,qP&?f;&:=RIK*lGDmh9^>k\!aSdeq2Fq.h6=4)r]r`/*?TWXm<L-&J/g%JI/C'fH#
%rqL&,X:3qifDaCAn2ck6eul49_$s5cFX,+aDM#JhioZX-i,A$m]>lk$bM0AOY./a]3n_3GQJSc2]s<.T-!ZIqNt9CP^#2o$3G;B1
%[qg2=gXPijhX+5jEIFmRpY0oYgECidd5nkKCM[TImR*rd"0/n-2B0.":U,neHaRjXIGdk-59?uE_>T.$qkEd$IUD7[1U":<a4FrR
%p>d$c`m\7pE;W\lfi+J'fhgXqD"P3/cfsTHF8`4eoFa3dq-VPhdaQB4[<M9.IuS>tC0pWfpStF+f;6?b;O7,;7c4>d=8o,;S&B7&
%<hd(4fh+G!ns.or/,UGto#(3DQYaFO4V);EHG95"*%11BKr7>D,Rj:`lg"IDYun]?h\E3WG4h^J],]UWC20S/q-6kDo0T#&Bn"R8
%CP5m[gc^E\k)<]eio*g.PgfLg%Jo_'f!r;@(cL*-"Pok&3o@S"D-!+m^>a(YfA6C+EOU#@P1uud0e]5Kl2#Sl=mB</TO[i7'l3W+
%dS%+Ad;.kTg[S"KhS./Yq0)e5-ccPGl^7T0,fS'_6g(D33%/o1DcH/+]+p9CFgG<59=M?&*%F$tFJ,.pde?A7H?@N/LoWeE=K9%.
%Pd(/r<:^uS5@QkGo>6s]Vk]uTLq_`FQ#6Mr+51DHs6n%!1DgeYB$^p:T&s\4lmc7N+n\QN`^1'2DkM_IK[6r2cDRe+r/%8=EK__'
%hCiJ](%%h_WVb5gZU%e0RUU`gXp81AjY+)J(o00c5I_N1GEVaW"8.Z+]RWq#Sf;ZZ=Z6Y%lX=HAM=>6E6$jJPbAn83TB"K.)07A:
%/Qt/Wa&"g^Yr.]pT0V+CIEB&u'n+%4C.0K4e&k/Qo;87-7\=USfD9qh8Ak$_]jZS.;kp`SEb%s%fh`AZO]*17U:N\&m*N<D_cR8o
%fBgkDl0[6ql)T'?'N'c+[-?)7$qB,N3a.&A%4USZ?jpL;LLLO!ahh.d,`Gd!SZ\2[VYQ%^j-=U5fMJNOAr.S&/N1H_)eZ9bYbPuV
%`#?[bgLf-$/SOPB=bP(fbZRM7_[o&>Y#J2Vib4s4_/rZE8-t$N7R[oT<WJ#)2^<(^KUZe>g(6IQP#96"2rbTe[3r"MOcmJbHE1N!
%2gWL<5"e*\.2nMg:_$VP$]Ro398N0N-o,8HVFnNNq_npc8aEDi8bL8L<Z;CBVQCaR9dpO)DVb$cgr+B#<N.bn()G-5h?e%,O>uk9
%Mm(l#Bl+E-]b0@-;KKQ:p_@H*h78c\&aq6$C%'`,gL-u27qt$W'bsjim?\d(oJXU)k4+@M7VaZAY#9&78k7)Rhn.ScU@+HCY6J$U
%Z.jjVn3(GmY%aT-]aZQA\_&k[8i:M/Q8cQAkjZ#6U@jYSD9q)UeXSmU#m7Hf)Kr,d5oRGS_0u!<.f;i,lZqZVq4cl%c(7Zl^UJ*3
%pprh.7KG`&@GR/*'a0'."`M\Mo*LnsI1775ZqWWeLuI[Nh.W9gIp>b%eMlc2BHKbT==&Ksmu#hjhY4!HqpK/g\*rC9)8"gCm04nI
%khVV:<V^ZbQ.Z2bL+'!2lao"?"@VkT55lY\iS`p@i4cX*hQENTm9k<kR%PL]Y>L89'k$E_?_Gnb-?\pdr@qXa?nF5]f,M/),^!rc
%;Mh+p@/Cda>rKfL6M6bRA-;I79i\41THO.D7q:6(%<fO>X2VCoW''0!JLP*-#Ir-[d@4u*]^T=Mit"NPEq$>p,Bdji9g!Tsm)sk<
%d*#MVmnTtTGS%rT%Yhq8.<[2fJ>$8U/Bj10P\p)2SZgsION`q61T"l+/2Q@RY#]7=Kdp'5K,Z5ZYFG:J#pipd%5uNUZ[H0lgsIf>
%4dot#Z]0XGbT'4SLiQ?l)e.(Vp,W`EcoqY8"CA"(h%S$&e`LrJi;R\2?[13`UGoA#WJ#TGC$ddirj/,E-b,G-KP5k+]04DZJ\B"h
%ajC95]N9@2\k&d;)P>2N(U4F4@0-SZc[98l42cGSs"1gQ38!Kg'E)ue(K?UN0DJP"l>2PsSmE3G#E2bW98?$F9Jj?2FOaBi5Cs7<
%9Q"@$Il\HX5$h13;e.9/;%!84^,0MWO1;tZQXSJ6;]kS]4fB^V+O6us93^T>%K>elq'B0=8+.eVC8K[39cUN]YDKrAZkLaOC^bC$
%PBm=1KB/;E#B6#D]\`7!1&PI`O_P?R/cLU68`Y:U;^2[BM1aijH`\F;k^NB1q5/\CbtkjBmS?8\+7%$H,gb'[nK?>:TUPXG0O2fP
%f]uqV`DlOAOrO%*3-De'%Th(sF(oX(I<9ZKB^ODd65s6&iG>:9d]+XN?%H(Rp%LW6mAunB2ib?kCA;A-/<i%W+TnFVr`KWs^u4qT
%?5(FuD6"=6]\)-'4"lAPD,l(H*#2W"SFu?$jS1<h^ScqbSs8(HJ<J$4_dI"F9Z_[eU[dhUfLVh0#D)d=:7R#rnX9;2(HCF'b$4Z!
%Y5Z((<<KG'gnX9A@-NL%%R@EaF8+I4(Q.K+eIHR2h*CGo"bM+2>\&#3K?]oNr1q2E3-aHmQ%DOl2+2R=c_*]$.!M=k*Sb;R2>Zr?
%p0B2.HDL,IJffg<d8>(BarE>Non)TB&,,<2QZ#EaUDALQY#;>u%A6=aNLK?O2Lu8XhEWQQ6$]OrQ)PmG_p&u+pV_L0P3'nX37HMC
%s3(heep<4ShHh:oAh$<mEiV)h(>!=<aYH:P'1h\tNre`Hr@.X5IQSTA8Ma\B[D'&ndUI5r4Z/JtW+6gCC`S?HPUhF(7tLVc9hV^$
%:eeAbL@8$a_c\UcWi]K;n)F<`Bdq%o.L.f?]b=-inMd@&mAsM\Dhq"a/h@@4SV7T0_-BGV;oBQc#C`3TP#fpA=&fn1jhY-+Ho;hQ
%V<Q@(7J)?.+&kJKK,^SQc`!(MMJ@AL(N[F;?7=XhDP".6ia=hmWp1';((^.0/^Yh!&kCn+=ZI^hboK4/F0NiZ7l0rO?I2P7dqYuV
%ff;i7]qm?%l,Hkb+O@+]>e8d;6qB@.%jrfo41mK[k6?XXVpoE@E9Ls<ghO_hLf^".p4`k<\irA@DhuEi^#Eq5PHG+mFp9>-[;%fF
%hIeG]1>1"JPt"sB9,rQ/aE*IN"nJQ<?i/j>Ad@tmRh.E^Mt#]Ye!X'Ko*&M?%IS*J[SI*mH7)jA5KiCcLV]K]5\',E99q5qB&]t`
%(NS3]o`M/T+A?<Q7M=rsGEb`M\&n##!6#K/fin8oe#3:i'NrdjHLlE_!3l$5.sWB6[]OZ'_C:#P/V_#SD+BfQO/4I6f/+)q+K-R.
%r8q"jn6%)T6cet5VNKY[ZOI4"\QgHAD]qRM!-^lY[FhM>Y$hBnTPYWn/<=_%@J*%1mZ_LB5`jUlTSl%9LQ;p*)Vrs<BM$fuaIF?8
%PV_LcVifb#Q49P"Ln!OM=/.EU,W8Qk)%hT!H8[kMr[IS\^a/?J]6s/@nHT!("]g%r6uVqRPORk)&?E?OSrFH-<+u4TKC5I@>do!!
%"0-q*Bp8T.&NTGSZMGoD[*k*BnImNEZ:0j#j7(YaaG],h;Lp=7?e:s8[krAn/gS8C[jc>FR"eW0_,>07E1t!jH;TFMql%T`Pu\?/
%T[p2BiTOIWYnOcB^iGK4Ks7p/<#R<fKPD@[4[:93G68sIL9Q,CaFQ=u6i^arL=MM2,M/k4Wq*ff"-%cVlA$*$+`RS7E+MXU,fg*4
%J`@3PLIsq>@6`L.=!Pg-)0KLC2+Bh?8Q;Bd5HHn]epuJ2SesV6!35SAr$6*sWD-]S8#H,Z%Ib0[[V1g@-K*g#,'-T0"a!hP-.jnN
%UrbYI!9AjZmFG?je\HjXd`;bm5t9&*+qp_d[)Z#o;&P280YtZe;#tBp=&9?BD\8,#FkIhf9ZuL/N2:=72m)_nlrjTPaDNQb$#2k,
%bK+4,l6BmG0u^5`5gD"CA&Ru[A2Q7cg:,^mhBlO<p*V[?(^@+a&fT9@$7Ca>')snP_h4(+,Y#"ZXIFakKQ1$Ml>/sK,U7=F*h`4d
%-Zf[4`YO[FOb>UJ'GBUN<I*k@&3"2YV?Mr1iWqCHi'oq@b&EN+CM'PSRO7+$C$1ogO"=sj&'imGdu"AAKoGHq'cQBK+n["(TlM0e
%$7-,q#bCSB?*jW%QOb!obHMm?T'ReB)U3?]!h]3,,?hC#GMWM"OR86kP7"N"2TT#@W8[Eh6*;skD^Y78U-G0]HT3m;g;pkio"`&Y
%ik%/P4"D`e@l,883!j"d/4miII!)%?[Xa8SH6*n$JSJ#fq#.*W/kNP(cVWD+B.8c@R[A+bnCblXK?9W*IkoSi;ACp3dk0B&97qU>
%)_UI]m<<,<9eI%8kS[7E9um_[[2SV^jj3!f3`R.[JK:4r5h$4576@[gLPXikh;4f\i8s;PF/EiiO"2HsT"a?NkP*S(HJ<<rg*chL
%;:St%!g`t[`Ck:eksWQ\3mb2NH15,b*EX6+hnG!2RDsBaZmul`JX'h3dopQQ;es^>i!h\C[eS*Gn7EN;`geq?n;t<*ANoN4C$C9)
%h/@BnR_TTo-@njNhI60>Ds@[G@)R0JFJ$/j^Ud)8R5bIOj#%PIPrK'6``jj%`'N2PBHH1^du8s?[2Q44UNbWl?>ZNCiQ(SnFEG$j
%lO1c?#)/qQCr'$hFF\&MN8JK8/"Rq"J6M1;SFe4CL9DPpV'T:N"KHH36(:B5`LC/,GUhU=d>C(dZ)BM9(=1H[V0Y,q?9*mU:*04#
%WZB5[&C[Qkk/(9h[6O:=/ug[AID=&aDSlaf_.ZZkC0_E?f5NR*CC'WWYh;KA_!^IT@XRV2FZY].G),P97_BC%-?-2q^AAo1CPB+E
%FYNp,H0ef$o+Js]NTBbDkq8;/eVtNFbq#9&:G(HF<f9B)]\5/OHfoJWp!aJI>;,uhnBjh(@bB:J'^.5sSn_Vc5o`d=R%8F3:(k7:
%g=2f<h(T7`1ke6^eN5MeLRLjao;B\d27$8aLJc@N^T?/Q_7f&Tq"RVZ1hnH1M>d%d2%];dr-#g4ka<ume3AJ$%TOuul]7N]3"-9G
%&K4tC]5cWk&!<aLf)T/D2.44b2p2)8V+4Q"qmTd,b8_VCb%pm6@IYRF^(h^J5]Dh@PDS'fJd*efNJt*q3Va;SF%TpT/s@Nk;)bp!
%"Trpd4de2u`@9W1if]e!.O18'DN)ACCeqJr#57-?F"UFVpN%5GM$b=f^2CQ@r*j[Jc?8FD':*YHQCaTr<*G#Ic\@kO9g+)7@2b,.
%ASs*O:$\"4^]Ymq:IWFm53sX*O`&#(]C32H[s'7N^>?Yhbb5NEpP1:>r2EZYlA2kD,*u!gC.LPi=l8kXiGG`+R=@&q%pBXU*r(]1
%l0c7^:MIR`>&>V[*c`3cd^1/`RrjHfd1Cc2o>mJs_C^DN:.GGn20Mdu3dfZ-LqThjE\P!g!VID!9kDVn(MdUrpcH#_#(th'HF?.^
%?Sd[^VNK\3/quqUOaPI*MK6es7Hp#:c&FVHfD$9Ahn?ZqQ4"#O)<9rHn?1mq";>Mq5"l`1G$k!>[o`_\rdNVenn<[)i@ZgQ_D^md
%?>ahLrRS-X<pJnT"4Z,u6_SoLf0o3O<7rrCX7huZo(6ficNBVrQ.J5F\Y'QG3Gsr/6Coq?(lc#/`Ku^Og`[S,2j`nZmV)(S0sTVo
%PA]N);FJRGY*JCX8bVHBlDK8&lShV%$k\!Cb,%P0SLeCV1*ssB0nS-TPS/=Ef<T9[3nUrY#q`S*efLDKkK-sSDp!o4LOj-h"Suis
%n=lQ-bA@O?1&#XM^.dE)O$#qg/.SK0F!b8+.AiJZC>dP>>JLb='&kqg4?G16:LA,Eh)cZPG99;*\Xdg=kNg5ZVAXVipq9uj%K%Jc
%gJqEE<1r25+,&3(.aZ6IZIRd/Spdk4CKR[N\R*EY!h1m,##'bYZ>Uh;)Oa3>$iX[uXerOZHP^,e3E[tQqJGqHS0+##d-'&'gF-an
%1#h>ur\D;d:'8%KneJZqM>T^nZVtI+Z^t?Ij6^BcSE/]hbrG<dl2W_@`&JCjWWO_11^Ge$$:VNfjcS;@8:rV]\=GT=lJ8B!0!RF6
%$o-;h)P!Xka0j[N_\Zp#*3VC^2Kj6CcW3jrqN@#rq+D9gA//kbj:Ve>+4&=2\Y'nj!>%FW`Q\JXaI)u?%VqcYiZNOG8Cf@Z5!6T]
%BBl&_Nid.a!;]daVMW;2,V/=8f$\,"9/.@YL+ef&KPBs43E+b"2WBF7ocTTc]5)(\f3pUOI<+d3^&*sQ5<mfN*'!5p'Zjq.7PM<<
%]NI$iH637l6$\eYbU&<Jgd[>nX&4J]iBed"(]jbb]n*s;c(*tKdZ/3eYVRgojq>V*!YjOok5<sq,`$M[i=g2<oH<uNFN3@.l.M`^
%B0-sY!`6VT^DRE"M2a6?\Xs8l43;a5jYDq@'JE(hN?/1@k$DjNkgU8UG"URJdL=iO^!P2<OtR!e8apei3/BsiA#b)*RjW1#qZW'l
%Bm3>\[$+0;Fdij6X03(28D>Vs`Y[%[GsZfWSN-1"Tpek&7>2Xk</(c/[a+.lYWbi4XfH:Q>)`sEhJ4-;p5@46Zi8?-_D>BBJGPuq
%6L!P7"s+^2Y;'EDm@f5_:rp<O'1f2L(I_\YjUrAtkZ-ra@_>4dNfr-,m;Tiu@Q$KIOc[s'lFn+=h<E+?gtAem.'u]M*)jEHS[C2G
%^3^jgeJl'Wq+9AAAn8*s0*-;b7a>kYf?du!MHakn3btu2MZ]5(mHIp(*,eY2p[j$PmpBE:PGR4ijn:rA23[K"I5$JRi%)L6Pqn\Q
%^Y"?<p'Rtr%W9]2og3'!c4*8g(0>ZpfrB'2ER9^ANCd=1]RS05n+j@j-bMHObT8bia-R<%h3)>RJtja#pVCTLm(re#;$"6jh>RNu
%H2c6DU`\mQ6Z-tt'3!+/"bI<tOBY%q7+)C]!1ZNbEpD\[R)n@SfC5p1bZQWeK.FT[D(R:f$Q\:_AI"]M^JXZ+^U>iA\^`iJ2,K(Z
%\!+J]Y1+R\Ve[=$$I3;%!Khjq3>g@(JD3sPmp3Y-LUm.<WWOi4*c2X:Z<G_NQnf`ceY!te$"JU$5D.qS+dct[p&a%-HuPIRaO+9d
%2:C5S'542Vc0r?"95oG4m*lIblI*I>@"]f3[ACg`qf<U!,\&5#!SeOnI(d2^OQ_H@ehZE$YFc^&i,-`9[!)_5fo7%<P*]HlYBmV@
%oi]OjHB3[Ym.<,9)8&FZM(PuK?Xkou1a?Z^K$cUkBuN>k4!uCOZ1:Pr>#*peRd?n^,+49q%[UZ.>oIJBC<7ZZTU"&LlhTHpQRjJ0
%HPcXS@\69R\5+l/PGtC4G%Ot4XmlX<<m3`bnl]W-`fqgE.Y5<@b/*%/0[<sK51)X^Lat[ZjnI6[>\9?kX0(!h%G?VLEo#d[(fAJM
%<."WfUAHLMo$CWS'B!/1=K\.J;f(Q%YGKlJDDteWb;:ftWS]94F><+@]1q-1Km2tK1Xn=""3oLa8Z0!,$JD!%PTN"_Fj-+V,VLho
%^I[;)mB]LZ6+d6Smca<(Z-mthJ2uma'1B$B)*t$V5.PnD&3Z0aE9d,\1%:$[!FVOLVQB=eF`7>_l@?JueosEH^"peIO?jF`?f13\
%cMS-g:#(Ar-[5=<8>8Bo[o))X-5A_gD*BhhR>18N7MAL+-ba`a:W;7VEqs5_mCaglT0b9%$,B7F>M7_Lm4EL(8seT1cImZLZ?*Kf
%X)M$73NK[0EGI#ll"2HT"dejY2.OhnE@4?>ZbHl,Z!:jHV8n*T?R$uO3tq$79`AnFp,-fJ0618E)nAm,hMgG@&4,-U7l+f:!,J]?
%*is!ieX\a[C6%u"cIsVpIKb%;#IXs0=$Enh()\IBBtaWmdlN<%GL7Qm8L5hJbQ_ecdD=mm@fQ*Z`HUob1@s4IV33,bZ"oR.E2-M?
%*Dnit%,5%:/3;>$gj'Y-DoUaB%bG,Ih7Bg3Dr.Of]r1?=B.5Sfq4G.%iU,?3L00LYd?)]Ne(Z.((HQ=S(q?]>_!0DZP.&,;HDXYi
%=6S20^@_rad1PB`NIn"0cuX$-KY'nuB/fL:mc]&ST/gLglF,gR+Bl+$g(g.kQ1)/0"fX_j*i$]p$1gM0%]6<Ll-jk;;s'!Y4Cc#C
%RE<8Yb8'CnkOJ>u!\\Bq$]_rZ+FFhUL@RUpa^W\<%+n+<D=L+fqok`>^YP4BogD(dGAo[/npO/o`<uiuT;BsL"t`nj,GJ(1ON3mj
%mOY.e2Q\)#YV_pq^>(QV5=TF-Y67[L-/5P_^6/K?#C<Nq$X!M)?n3\2.<X#ZoY:DMIG-mer$-VEoG@L:iNGT@n%XIRPE;up7<SdO
%3:?\5\+pH:,=JK`"Ao2a\)Y2p@/3n.C4Q8H'jhR08U^B-(]+;rkK;\3&\]Ogp$a"$^&l'D4@R;8g'97i*6/,hU)_920cjT<8Y1tt
%i.?ae8"P>L,g4.X(CpQu#Kh]$57]tdl3ppGJ@t>7P42cPSmMe2rGQZHk3p&eM?Pq#g-l.Y'*AH6#]III(E+U0BQt/&Krdt0W6TT1
%V/$bn(eH.hRAs`Ia2`TBbG$)ZSgtl4>ks0"<@0Zl^JspRo)JE&UjS1G3=;dTAQUEO_@)6Wa5ZT?V?d7'Rc4W3()q='.\H4)I"nDk
%EU]SR!d*1Jl+!-6f[;K+9i"Bf?Wop\N3YPHbh7T$WDp/-HMWV143_)u'C!\jictTi$pY^h%<Mkt>qiFh(*F75V+1"P)T$Hhf`mHk
%gOQGL.?O8HhqnV`jqoY<Z04d*.+g=HMe9tA0Yb)BgUD\4"oaS[Jg'$h^&<8P!_jVo%e/,>MUUKkNnrc43ADb6St)Q?26lc!bRSH*
%0\KI;5)s.^/kE\S(5mhpdjC'=d6Q/5/Pl<]/[ZKJ9JP*FRRV'(g(OEg'-6d/;S$S6p+4Xhp.8E2J'rXVm\DWXiHIc/DZI`fXhi(!
%it-%uE=r`;4A52-()\@\3!CtN+<-B0([f,o:mhuG/1+rI5Z>K.B1K=njK]/_J_FtmC,4TWkG+V4h%L@L$HZ*6"\-aYN/6&I%(1cK
%8!;ee&`QtH!C=Pte`:*J-Mlcl;L\mo>0EcA\5'(f4qkYig8HC+ZLn]>95*FVc^;.V(`c7)r&=Zp<FGBk_iHB(Wkd]XM[HOtD<>c+
%L<WUiN(0rt&VgbpB/CZ>(^;H<b!Ou!\Z?32o$BlMWAjuHST,E^?oLI-SIUai3?8N@G;<E;qG0*lL7MEtJf`GQ#qVDf48GEgLW.Oj
%(2X>-ZsE\1"rNHE'6\<3k\!B=BGs#Wc$p`er04*f)C,uokno?&0@%KB::k%^JABMm@m%ZG^Ec=bO9li"+[h*!9eBOkCC5GOP\T;>
%qQI$)=\:KBE<%HSCGDqr0P'[gpP5;p#2HGA:MW-1k?tcoiQ)(=18E2L"sO6%_HD9)),#tAZ!7?^Jk<"_VNJ4IPGU-Q]jsW/ZE3^j
%cLd&U`g!@^dWCg9dZinDEMFdPF]"\J79WQ6HC6WjOl]28:hLf/N"P;uLM%%9)3-98%)HUi$qBPm4?#:\O+h!NAVOX_H5)+]QJfr,
%Xjd2C<+='PJ0$U`"hYmJK!A\_JQ?_N[P=!k'S@8,HNn1]chNHEL11Y9ZUJ3-3uF__*[18Xeped&ksh@n4h?`7G`9)M@(+R@nrJPf
%N4"c`gXT4<3ASn0J(I5H@9Wgfh+m??UeUTIZ;rb.e!9'K,)]IS!7@P%0tr<DR*.O,B'M'YS)sQiAB+S6a:'nZ-MW]cBTa2uYjIn;
%8+P$1D;gm[#.c/+W6BEZR%BaL`_=0\[an!3KVcjP;?UnMpaG5Q:bumlE24_B,=P^_`p'miO4JDo-U<GrTPHlu'H<g00?fS6;KJ,6
%R-)3&@MCpE&pfqdYs`K*2MX_j1TiIXZs_)M8<]#2)EqB0PbVpt/l$AmmPaSi\=sOoo/rk)P6;&aaCq++dBl)VUu6al(?gnA\0[,s
%SiVli=JVij@rRb-E%['Sk^2kK*2*BKODLH\MG_ASPdY\-q<,<h3t;9dC9U.b1HE[/`*;s'Kj4K9?\D[M5bfEp3>QRbMVp'("XAY3
%/K)dB%*Kk?ZpB>.6.mtJCkX\*1.ZkY_8P#H)4!c0^tb:c9*;Rlg_hgo:Tb,l,;FP"%Yl+V_J!D9?D/uKUZjaTOVQr/E/N>66'=uG
%3AZJY6StqSP&[GTR5&GY_:_^,HD%kB##YqR)]=AAkr<<g_3JGWA-Od/4c!7M9?;\CF*C))&Pf3o)9*m)B,OGncnXB0Ki,i\$8KsP
%"a:/h/R6KZ@ubU*R%moXEYRQZM#E9S@oK2($%u_-6=m6HMB%u!Oq%t,)'!(okV3sFUJQ/h"(U+(/EtNi.t_7Nl=XpPi'iOPVW]$Y
%8s)kg;U.0\1MFWK4]_jLm+h";d_Vk._f"YE$!;LCgf_<@K6@NlVLQT,Vn(<UiDc=k#`sj(%)\>r3l["2)3dKNmYmN#U94oVEtmob
%E2&CLA&MWgafTc6A>_s1M1jlj>"7hGPeF?i%,N^H\2.Tq?1@9@39+Q%RDI@47sK>\#r#ZjB8X*WCoepm`&-c[LbTdUOj37W'Z\i8
%Q/Wc9c^5-\;7Ipi(bd?bmV"EjG;bn1aO$IiF$AU-i(1m5mYn.3n.%^,B365&eF1[*SW>`d=@Yk$P<h2NEFpo5;;Wm3d2i^U0F`Vk
%3>=tDKha^+g7:OK>h5cl5dAVO*>iF;<)]G?K=74UCi"i)`NBWhiO+`gi#M$%B/n/SSO#=Uk0>(hbdfKBhGL45_[0)@%*B/hN61jo
%pk"rD=o*BFZP9)=d\2*+&Md19'3a0/:0"k\8;FP<cCh6ZCUDW*HnK+RVMVKt$(JE`7=ru4Dq&*VG;p6YZF3uZQjebHNQH-uqdVB$
%EcYm3*>g[]_\("Na`*oe4!S>P2D[8/d5Tl!]Ye<cApD_RP6Z;cA0((FaZ2[aG6[C&:>?_W_`MjNn>)7,<sI\!LGOR*3&K1p0CjD\
%+s/<&OH4IS_js(R:!T$_S6g2J0FeM2B<[%f/^=cZEQH1c_%KM*3\tT50]Op)P?[sp%*B/>=>RVRl!^$P:aO\,3Q@4:C+/$XPhd4A
%;hD.\_Vq9$1FUtN8TtC%XO`ZqM#,,%=<8WBE>aF.$a'p8,ihoVgeZB#BU:G6ATX6JK<r'4^3-;_%M3TVispRoR3i6_WH:X"4DpL;
%1[U]7Ei(E.GnJc$#Dcf6]?kd-SiG3#@p!]IGmBYFdLJdiQ$+"%1X5K6V6[Fe9"/-(`Z.ph1hRVU1X.sGadK"H]u-+YcIgE#OH_o4
%jHr3/S2$Wlm@:=uUhSG6LXV`3\kZ"6F/"5\?T:+'9_'T+&)JK=>2>!')/Y;!Q3KVmUMU)8.NFWVObT"\LbWW%%ZfiL0koPI)ei9D
%1Mrt$`hd/TqGGrP);T\FNosMk\^#NWj_@pZX.pjjXJ<-k<)-:oT.bF"Q>Sef9"GjR],F8X/iH4g#6+6C9o_m$`U$9&b<rp(damur
%kFH>!=h)q^c)dFL)aF811i;9nS`\/i:ug!2K4!?,];^+gp<ri2Qp<W>2(:RUf[\nPa6d>VVE)8R]@&fU0@,pG*V@!uD7t-RgJ']"
%U[7)'lZJQ[W@J[rMA1<U7amHqlfjPn1V@"(c89/=*-[ioLtJ,mm%SHr)2F#RBuV>8_A#"G7j"2-"/dYdD)XI%D65`T-I"St1cmL>
%?$TEf7G+`!+rhdO*DL[PBnm%cC!,.OF,Zck\7mFgR3%3@Agc1DZdC^$7@6&nXG*D9ejJ,G937Re&%A^KZ\bhA4fal$4\kSm;,VDZ
%VCEfR;AJH#AnRQOLsV9]ic,pN43b<8M>/FaDN']!=-#i>9ZN['1o`H5Bl/`nk%q&=VQHpEeN))WRUiDDX"#bb\I1reArkF+ZB$dU
%D]b!Fkr<NY].4o.X50&$>C5F1^'\6=V-+:<[fD<Im4:9H9[(eF1X4U"Q9.gn/BjZFgI:*og[WgZAf3\D1X4Q(glh@Tddq/s79-Sc
%c;$+f.\1:.EerA1VX<5t/'Y:.(>2hm3qL3$7G:lgm1,:09fNR9Q+$S?m^1g=FJUS^+aRdi,45&kBeL[P:D4&'Y;`l5P%NE],0=ma
%/\0;LHcL0'@s4!GdW)nfkXo(E6hJZGCaLYmp#qX%/7nF^8Ceq"B::1fc#faA]78p;g\\H1c.bAfGFEKLacX$?QPl-em-Q[Z2V4R3
%/N?CkktsNFekqG`D8dr"_qLnR=DYknimAD2UGQK$Cj4U,,A3HgR'J5Zn"$U<AKOiAC*nnb:$K?i8:n+Q9X0U)37E%EG,7c#mrG7=
%#JD?V3-qbYc.GHO0XHQ\lZ#!)C28d4M'hBK&;31nFf+2B]65H0[#N_+[(82ngD.%Sc`dVcn*<ZeCk?dTA+o^)B@<riR+5pEeE&Gl
%:_HNF1H(8<``=a2mgdX=<V*dP%k!B3+eb^f7rT`!HZ8FIg:^6oP-IU.O_!j1LGR'*.UoL]7Kf5moUnZFKCuDUkGVP6Q(B:V@n<*7
%(d$W8Ugk1URAB5mYpX8_#ieV4`uA[>&KKJfN4l8I<i:`nb:$qOLp@c[W6eP?Q$&iYeilU?fIc!CS:0fNjj?eRW"=m-[-hDi4u"f#
%ekFLIPJDU/B:VmB^<1N8.upDMg9E"s#P?`6QKHr[PI,t%24c]E2)`cY3r`3O?"YE=X3Ql8lcdg/-Ti6L!^HZHdgLE8r=*jP3sio3
%0r).OJBUG14i:ODUY4;P%)S1DNm"ZneY62]9SR\:&C&/6Al+d%DHqp-CQJ1F4+jt#h48!-r.EWDP@8/dI%tLOL?0#=)jb!82TCd%
%YV\KY)jauE+$JW/Y_Y!q'QVEs#!P4'_l?>]oJ%5RSc(8\(6d/V*-,Xn2V;_Ul,k,3XGmE/ZbB@#r41iUm-c3[kt$c>,;B\=\9aI,
%6.i<eSRLhCY+F`S\uTIX):j8sl<4.Z]m&eMh)NgchZrY#d#3ID!_R&[0-i\VG/;XEoVp$d<B]/6#A<CEb!LGH"^*=!rVP9lA0rP8
%0?D,?pYn@Q/O>IR^:f\TMi<UN]EHNLbjtrcN[C@laKNP0`338tin"3b!qU35!6).u";8!f!EU/+#C?^.]@V<i%u]c!`/+c5&PuAe
%gOM<k+\u-0FSZD7'9[u,6i@5=9*k@"66fL\Jco"96-,r=dM\0K/#4\Hr7W:D+QV2ZK$HZrXcVsajP:$>WZqI$BY#5<j;\JC^[H+t
%,M-_uKBkjP)!Uj7O81%3pKi;hE[ork8)VbIk%?<Ac[WiIkoqL0l<'[8;t]u+pMF7)gr:.s$J`&oWc-\%IP70;%bep+Dm4aT*T=/<
%HN@KQq0Y1dTD)m5G2'mcKBrIq*G2?MGSJ[i,Y[8f$2oj1Z[JET;M#r'<8E)roG":2PjV!=%Z3i=/N@\\opK9aQ%&P^;'EX-JkngO
%`!@QVXV%j?7M+8<)gC`IU*U/9N%?!TKd'c4dbhQUr?BO8[aiHfM_OncM0$E?QC.P[O-7JN!BKo)2ssqc;S&7mCf-D@*FS<9DqqsR
%!TlRMKidG$[c!2=qcE/ljEHNJfoU_M8+7!,5f+D8)PH!NU/Do*bmq2`.74>5;m3=#^2'iV'UVW+Nq1"tAXS*E%upe&D-0D_]P>Nl
%!@^qX9=*ArB\W!f^OCObnU-AKH$"AhMX*K\L/e??$2ht7!tQS-mjf,%c[^+%-OUIr&sY!VJ1P6(#AI]Ki(Q!.WQc[rOMtgSQ2skU
%ls(l&2Eth_!4?JCj=&5u/CEBY7X>2%442Ipm$JPIYVI"=4W`!=5+[O49pu'G-Ksm58Mnm0pl^K"P6<6F%PZ/%!oTXZ!=gTu5S)!t
%",]$oH\j\d@`4`<$34P\AC+`V+K_$;1[$@58u'!mn%+]il:i%!#KXJ1NQQGO]XK!sH&W8$0B^_Lj?V6Qhh%*A'm[&NNiHeZ]ipqg
%-S(uK,%"AA<s!ZR6)m5lT*qIl#'dL!j=b+5Ntq/!7GP#d#,b#QISU'<iAp>BYOE3e6YTq32Z(e#iX6dHP;)D8p!a+-Hc3.<Su]@V
%6?<n![]$0Dgp_S9*c[i-hPac<+^5q2f&.FZQb+HJi4.(FdM:e'CD_"@TY>EtlFf`ePQaQ69rpT)l9c0q9iKrZ1LiCT$o1>7;ihO^
%2bp<CS5rn.?ibWNjujUBV4//OY58m'>TZAf7Bt@t3SqeS)X^%!?(U,(-i+d+((@MLQRhWXV/HDsGWK=\.uPtF11+=/@A@d(iZiko
%pV'm?aWO!(;*Qk3o&$pkKa\ZUr=0>u&Kor'f&*uUoch[+[Znn"N\HORH1NGFPF+l(#XCmGVW!Kp3V+YgNFErk$NjZS6-gdDs/n6V
%=#u69\#.1crLCc/hl:?aYWNL,Hg4"Oru#P$5D,]rWHg@"CHkVDG.C[dqJ@B8YZDTNddHR3,':K@5fdT`#e22c5ZH[$k#cQL4g=fu
%_6c-%SdY70N0%hU?kqY_(.\D>rqd.BrYdEPKtdQ#]SO$liuXi6oCt`1!XS$q?Go2r6pgCgRt)'DDDD59Fo,hQilsUSSH[(c5$3?:
%HK\$fmM'mRL^C@@0L;rHU_0V%J9VO/1nOc9-$LL7&Vbjf*eogX=nV>p+ouKN$VN54"V<7.%$2bTg7#`5#0^@8r`^%MJ::oL5i4?T
%@!i7L35u@pi"H<@i&(QMcdSs\T(gM3,W?@N('%nG"8r_EAjC>\n`p/i6[n_'BWAnPa+,ZK]Q9tJ<ZW%B2fU$.AN`CuClhh<OWtg@
%4N5C,(%TLGNh"dq-m@Zs"t>$_EbL/K<KTp)'GG%7TJTOm/1=DK/?#Jl0q^L'7pAfa6*h]5O:d!!"t;GbTUdn#[kdNFG6Z3/$SU1/
%;,.Fm6hSJ+bNK>hC+b>q\fC"AS:ps*jc7Si(r[^MH0j=e]QN9qmUnqnHc\*AZEpru(]4<&_S?b%m5*Ji!l!qi0mt^1k&\X2^j$2n
%p$u\hb9:RtZ4M!=@-Pr/F4,<D*0O82-\;F&kaqIjmoe8Z/k>!`P(eER#<-"4?=nKF"n10"Zn_oM"o+:+G8+doRp0^:j&BLG*1>X+
%VuggRZ(#0TWPlT/F"95;>O5Q#0U3J7F=@07F%`YD)pY)WV@j!/X:*AHoVssU]fn]b9>(YL6;Y:`]2j?\9j.:3LCU*hZX8-n0WJXu
%gD(hqe+Y2>/gCG#]+[$5kt-?/5#Wdg!BXVE)u\8GVThrf(+tP]1R8ke")#ZrN.]u'@T>H!d%5Z6UibUQ*E-40JXk+1PnCR%RGs"G
%HBiKV$-5/N)9=uN]&Gc\]8us9q[YX"!jalOT<5jp3,L<KX#XpH#Oh6cLr^%>1BF?>]L5CAh\3%YWIg)Qj'a\o=U7!m9&qtm:]J(^
%nIV4LoJAM/G?XYlJ5C)U(':j?)EKlLZc&A1-(R:I?*Y%"ml$,qf>C^j+P2Y\f(LBt!C>?%"o[=)D7kQ4p,!OM`,[;0#Z(ltgh(,>
%4fKH`WrQV%?#KdZ`<s<6fZF$m`mOpE@I/!,He9<al*rc'4<"e=Bj(K[Y=fW4%N,kf:<t[X_M0H`.L^n4^_(/9L^e?Foc0>1KeY]1
%MX4*iS%oULio]P!EW`X&S/f*]</`+2!Cn\s>H9,/[_(Ej$U/:,CB8,)+b4kD!Lau:&-EJ/*/oE,J!U<d!@g`T!E+38E&3se31=b!
%qFY_[=b$g9,s[;tDZMVV@;\7015h&;&7HCmk[>kGOB)&3"Jdr@9L*>kP6EAj->DDUSbAS_-GTWK@3@h-0]8U2$1Ko4$q(q>#(#2>
%!a,=bi4=fag;9HXE*X'cXo_p:oFGX&`+R,@.u^BCB]:.fh@tc^=lQ2(#W\kM:-m0[P]]J9eKAS^&Q^ig=-0m7D>tf(<Cgu/&r0IX
%D%%)E2(2@T/?#Jl0d*kY9H;ZW7"]);?:!g%&?lI,hqidB[g\JQj8CFL"lYnLrR$q#K?d>2dTp&>amZ!GF97L<R>'0O]$*o+kH:lZ
%aqT[Ji,S+jZ#YIIOa<ZpHfZNk?DrtJJ*`#mY!hQL%5F2c8./Jb.U0,dGFdYMqqX42p8=[7ZU:oWJ,fIkJ,RQs*-!X>6*fOU%q7c1
%!5`k7q]QD6ba?,R!&$8;OpSoNJH<R^63]i_q0[u!^d1WrQitc?5TCpT!@^:=$t.Tl(cl=o"!5%8!?;:FA?gD.)3C==UBQJ9kE?Me
%Lb@1>p1ANplrK=_5#0u1E>n\!Sb:eUB!rdk*50ZkYTI=N(<GL1gOAXdQY^Xr-UDYP*=N/RMLgW'#KVKJ^&W+!aoEbr:BD44NtriC
%^$mNQ=EOZLCd%lWq1q1\A3OHuBFD-o17oWB2qO(mhTCrN!=Rt_#-$?'a@Qh=X"eWnKtLZMM5)O7BLgF&kcCQd9aZb9'M$;Z5UfMU
%/;P6U5Qc4j!U5QaE=L?cM:%&WK8B+KUcO:@Dtgd+Xir.d&MN"fH;Y&Y(3n:b'U^qWWU"2bkaiKj39p^HCf<G>o=i0p-D0pdc;0@a
%OIHV^id.'d(6IU3raZ(.W!!cqk=;$G>aK"V$6YeQ:J)[ck3K98?QKP,g6bCD%4-E2@+p.<p]qh#b(s;&Tjoi/7Kpa?kTLJo'(6u>
%S1"npq:Oc[Bo5+!<`4b6m!6_<hq,]Vq*'1!AC6b>V(S(##0>hjc333jdU3,qUsoB@]4[eSO5c@bB1uk&P6Q<l<=@6A5f*`$/qIF1
%1rp>#>>WA4mnRN+:9kkRDu+:YOsbec'C^?Re:"JnU[J<p)j%hS+l,Xu#KOQi6Xe]_qr*>!^4#m>hgL!"pZK$RmDjT:Fd1169*=6B
%-^+jEcmAgi'qF/$B)nOO0`_$^Bs[kCCd`V5@TroBV#^(?mUQ>rgWEY)O;_=kSM$Yf(XYg<!NA(+oH"a_6PhM._a&`'2@h)9o$oa:
%bD938M#-?Ap5nFA2tqJ2F^IA8#X7D4IMu_RB-gq&>s?XNim[6B/u,E7f7`*+)C-uCQm%@YEPZ847q#)]:OJ_[+iJbfSgracfH\u\
%?R+/l*(T-pZp]^c':MJ1[EOgTEZFU[JmsQa#Aae>,kf84S]69X#gpg)o-#7r-I<&'e1:jS#ne^+#o/H:;ZocU4;H9A0Dn'8$?68h
%+^cGZnO%n;#BW>kB^7jqqs[s"n:/Xiri_oBn/q*`mXh'T@jQIRJD@@$-I<'lZN)/unqfL3&>sbX1]b-Y4'@(b[S%qiWnq/g$35k!
%(_FQ[A0F3WA1<fFX?$AK0UCiWi1UMr^gS?N(7U)B!I4YWgYtL"b/_O>OBq(rRr3$*g*[B&-c)!;*OFQDLWPPI6lBGmj?L1XW:jBb
%/m?&RYYM2i^:=*bRK]5gF>+a=8.HsfG7cj&G^Mgf-6>t(_8PBP_)S=9_3515eHm(sq#i,6,Q@%kqhRJA/^0j>+5WX0Nn[&^nqdfb
%Ws7g08S$?aF3WmEaJpNj>L$#HONrYuef[s!A@2W@F'Qe('iL&Y@^ugpV^&HPK=F2O1iVUpONrY5fH=0#AA\c="sGKt89YQLj3QW>
%OWf5R<ZHZ.\nSal/Q&m>J,T*<p[A+NVg&0uT0KW]P#!+>#7iUBmt-Qnb7GZ"QO.Brqs9q&>+Y8?9ZopibNgG_i9b"Y#$kpF&6V,E
%UB%%Iq/J:q7`_9qDS3"Nh@89PZ5jUNf\bkE):=GHS/fl;cA[arO+'6od1.\K0ubr%0e7@u))E+mV8ETF4!!2<2n6bJ/Q=7ggV6P!
%GKDMEC)F;13"86i*(>:]/42TF1\<EaGrG[Ys63,HEQL<K,D5Hl/+Xe*'DYgJku7^jV3f^g[f'k@LRsNN7`RaXPHu;jpTNo'Y\Ya_
%dsT.@N:m`LeP+/q=M%tfE"i^pq%iA1Vabd\S/-=?i5T)Ye_Y2AIIO\JlO8*K4_JV?3.*n*R^-`W0JZ7k!?4uMg?I^s@6_k>M3%%t
%&49?/ELba0V?a>:OI!ZM]Ko1`VdioQV/g1:!O2S5!3\C;!-YgPaG*Ip0LCd5Qi5cbMs:34^MYUSVZ#Sn]Fk[[Gb!B_n?hInT6rR>
%c1K2=Hk0_G@tJ3V?qbO`BLoA6BLoYNnJg9B:^c_ViFTdrRCjn5c(P@-a8tQ6pMJg4_F]&M?WB(NDA*%>$a5P7=_@jR+osIeC,(ef
%Quq4Ad._jn(i\\o@mJo-R1)>\4\l+`n-0F+i1VoV,L;c@,B1du4bHDp-6.#IW2\anNht^p_81'Zi)&$84fI\O@s)#Dg=+Ah.D4s$
%/b*?3>?<%50JuN>+<Q1ROpMCE,Y-Hq5Wgfgn6,Jea9Wg]gf22sW?ON/(%H.BLlI=uq/;R)?j7hA,T?^d@UVMcp)$:5LsUMR7d*/C
%+q+PU(f#ke=nN@G2e)C!BE>CH8*K#\CK\uuG\Wae:m6HU+.m.UhX=,<8!8E8\:FY!\&?tPl,;9![lA?N\"a*PS>?YP9P:$Uj2qMD
%&m#Q&.@D]kq87:m'>?H-U:U1pD&\WE?qb;>0MFS2$-/Kblho0SM\5HBi]5\>27=k<^>!!:.H<%QUJ:6FK->"a$:_l;6PI1*POLTV
%KTDi;q!nm99i]Y$B6q(l:F`0t9uMKpORd*oh_[n"\ZgQ%6kOl"8ACmTrH+(K/@]E_AG<F`9(E6O%[6B:,iYPO;2ROVVU8o"&!p\Y
%D%=DU^D8oPQNNi<6N*9UVKkO>P&JHT!2$N-5XmJq/3qjLjhXt%i7`b`@,qOqUk)d2s"faYYm0-/eIA2#c"E]%%9Wd`m8X5A0YG5A
%GpAnCH2/[hb5c#L!'.u/6j^ZM'a0I/%NkfIMEM#UG\@'bi:dH&_sl"QAtU+:"u*p`ciE(pkWXE)4A82WhB7i\@mM)=a+-R%f6<Q5
%Lh#a),eL`rXg'"0Pq\mA)e;7*dM$S!)Pf#,N[?$,!rK^7!`aP2(#Id*dAG]5SUC84Zf:+Jof(M=k2r!7`l[sH45j:$;!6[<PQCZU
%iQJEY:Jo`c=SFM0!X!)JMYaV<7%N89b:tp@9L(bc>].edI_He2n</J*jk)6\24a4;>\Eo'K`K`\NBNfeTkV=M8>T06@V5^s>jJl)
%7gVaA_GD*G'\ko2J0TCl2chY&CoL^fU6`"n)>*tJ^_ndLgHddho4?MuD[b!uKDhlTk"PhCPj5\!H2ik=\"OK=)Zhn8Da6o(_4$tb
%o\)P0q;$P7>rIQMT/SpIq/k@9Cj18^/T9PBBpF#K_".X4+Eum.$]q8jjs/+T&2f(Y!'H"QJ3"Sf9gBc4ln(IBS*HXBNe,Q:3XZ$B
%k[G!/crF_OLU1Xu!#KDZ!%uhVJEM1d!)D]2+I\o]isCfQW-N2TMOq)J<7k2j3&,Mf!`!qk"7"OI$/iX:!rt5f5VaRh.l1\B!6'nl
%#n4Ua"@u!+<pKiC'!YVqN'sc0OcbIM&os;QNO)q*7AJ?cC.?YElRY:B?CILd2#oU8C&eaa$\@V;T[$%$-LarC,h[Q.[RWd91\Q:[
%_/)HrdK&K!#1PA=B*%RrnuNB?5g\>'!"M6)BoXhf)qgM]8^@[MVa>?'g"DHNXc2X^OLk%:D/0]r[&'Hj-Tu@coPrZ7@cs.h4MjK@
%J?V24$h0#u#QkYsTWgXc<::W_c#ol^q+CKfJ&=^]Vgn:Oia*UB/\iXLJiF."j$#p?R"T0T4plh)AN>YLaOB=^E-30842LDA1LY&L
%1arY^[^\YmF0O10RZtXE/RKXRe0Ujrl"cl]#sflA(NpWoYg<?^C,/i`*F8.R4osaG(_Udg6A_<8\O`N(!4'RhA"*J;=h.W;FI(#K
%<3\fr!6n["\m9b6>_iPS=@!#La1Ve(XH.BW*cZ8NR$BWDbDn:G%?AH6]50a$#AHjI#e1qrAUuPqA3s*!*$9"Wb4Qc0m2AM0a0%^b
%RpnXoGeX9)Y.$VnahL"23;uotDbaKgp5DoEjH/jEaPn(61H0O\:ie+H-6UX?7MESX<i,T2RQa#>f*)64`qh;!E#R<<6->CHou;:u
%(:e?i,]`F4[p6p*%=jf-#uF"=pBI:FfqZ^Q;.B95#o"Lj(?J:EnW^Qj"(oLUK8MTOIS4KcX?qR344U)4!UF-3/eG61p1Pt]it;eL
%EQ3ZJBSdP7e)5dAbY*RcaW$+%,i/IqD1D0T3:bmTH2kX/GT6)8+;^XDNtSFf:XZ:kWIT(YVqqPWRH;fOmEg@HjsW_.#TLjqd/]tT
%,\LONGZPlr>9#\dF4C^b\/a\o1E`7A$,,("?(VEconV<Sc[Wa(%#>h>*kRmG"C)-n+Pbeh!`W5uBD0tXe=!hGU"XO[n*^07_c#al
%@dMP4J3?2HohdbG\OoL1!Y/IrIEm`YRYbcT8^Zu&_#hQLja:\B_KutE'6)^MHt9sR@r%hsZ>*A7*rJ/22d[Qm-<bQBC'E._6#rs&
%\hls(T;Xp_E[i=0%hC`0j\lD.pIN8mSj%Jg'=>H>gJ5*M%,e9?JEZ@6:BmKc'BUhM+SI'CDGl^FLlarP1kC<_#WT&",^T>H=$+"^
%UrVau!Eh8r$pZ\R_d/]@pL*jC!*&Q[1P$%B+<ZH>"7P!,0)GNhK5:%hM_ZF0l__r-PWTg\if)eOERSFu.a-mkDr/68eX)c+c4.Pr
%0#:d@J/%k%)h;Zl_IfW9ZVr:g!L745%6tXi6jk]=F3?4<#L<GsX<7Q7j1PbDX:I>S%QJA:%9EZ?D#m$HL=$!#+,8VPe7_A5fn`6c
%^i9W&`cOr4XG4F9KE8ERL-`ct+$XF,?CUPA9ub(T.u3E_m`3)TIu_e+gcspM]F`NC+m"D0Y0)Mf`I;Rcp<b/CBFXiPO;l`f'i[<'
%Z.<^nNE4;?1cjq1d1JkehnO!h$";OX<F)\PIo(Vc?5,A%SLOsTAqNc6h(F8-pNF-bd[A:Il*68r7A7$XrH&4.k:!oi<&V*Z=&<OY
%_*mC@XYniu"]o_/*7iC2mRg86Q/\dknu8<(d5MDt*LHL%#nU)g>D!'7/30r>!QZ'i>!4f@=b1Q7Q(>O9_+*I%b0YXQb1fW..bhC`
%[ECanm&'l]FP5Fm5^$DX_>l]K@/qLp3*Lh`[T&dt`L`W6Uq#3G!R[tD?9/1g$'POkid2=UZ%D7-fHF\r:KIenn3Z!h@Zol`22XHs
%%ci#(ec=WZ!sXE(b8X.[i%PN?ZEJ>S$j]$,M7DSrn8_$r;V<<lrIj/X"1"Qs?idQmGu&tkfu?o@!NM.&rfRq#gpY:7T6"_l"I(F>
%?p]o&>;NQW"V<hZ2hD<s4d!&^E4p-mml3/1ro'uk[Q<LNFrgjt_r[]3_<I%+4.Ic@Z9SWTT]BPgOBEPu8;H3YTt"-?O^bWo6&<W\
%]Yb(#TK_5#^kfte/d-ZHBN6QQYf0-bJFM9OaT@-K.Tm#gb<rgp^]9r8-U<Vi5C+!)G8iRN:f[6:cpQ=mOg+al'HI@XdfMr8('1n*
%jaXi$Jp,=Tk"TH&q>>L0o1QHFr#`>QDVM!+=/TJ$gJm-'StiRX;h^,aRrQV@eTe:?[HpkP8%Y?sG]`Y''V6+S7suddS*dksjf39u
%S)'A@n4-p'WfQD)2m(`G!OjW5V=9,glnqSbb)N8eX)Ql3e#LrCVf9hb<OcqZC#*OZD1#suf->'7\JeOSD-FM4iAHk2Gg0#B+'Z.3
%h&3]G?%qVD7$G)HWn(_S<_-dIe$hV(Cl;m(C0Xi\14^1CHepT3boSr/,6.VW`6\`Yd3,S^(Nggo;-_F0)NaAf1lWHM%SNOAg`Vjo
%:#lZG8t_T2D-ZtD;dH&&,sd0/L3aej`mO:>iES0Bd)a`YZ.]FWkj+1H==G)iIL<IaZD9"H#8sZ.#,r)#Mn25IIZd^e+NG?;dY!,%
%FbA2>5R[Ifd(H6l[B&V,B$Y%oa?rn<Ai(XdE&<+rU`5=`2qEn/(G`^/;;k^CD?C5J'H,p'PbbH1)WUKqV?,r<6Bf&Ka6LhteNr6n
%g+Hgo%(+@Hm3^XC[*e2>-3M\578(<\H3DW!YE7%c(41aW-.$DI2R:h%lb-<>EO?[9U:LeIj9e%G*rkNp_Ft_nK4Or%WiqMIP@W?J
%8?HB4h)@l3ZAUW:`g3_(#,t4fV-bBZ&2=@Aqq,7$NQCOkeQ)cD[_LY_B`Hu,!WV8Q/+PPJ?*22'CA7/erp;rKa8><9T>L$B38JDi
%h&Y+P>6)/]D#i!-'MSS?3X-]h6h>+:_"[VC#6TT2Q3!&M#7r#`PQqF1OE\qs"-?O7IJW*uZd-aEa>*>>h)$5d\sinW]/uIsYh,9a
%]8AX*@Ggn8qX3caSX2s,PN/L1prJE3^*;K83_pMqZ4J.YIb1pORYbcTob0H.@fZ#LK`T!<64Ah52D[S`XRfJ._KP#W5]0m2$b0)9
%IFahO;5$SI"lff_'sV.6,H]0.qD?JY+83UekcAi^Ji'UL<,m4EH*Cd4!6)>ZZ>mV<Y-J0D&F4)o9gG<-8-U2peSX!/$L4GQ274lO
%=O-=JfhL.FU=u-N.A?j^01.u0JP?E##*f)KOqmG?G@I2M!7O\Wl5SjF3EHkkQf[RjPZ\@on*1RZgZ^;?.gpkYp?9NJ5@,ADZ5";k
%$t&_1a?!r5$NorpEGkju`31ipO')HZrLKGbM#InKFtWg>0eW2&G#O0MGL0&*7m@*]M:iJnJ8/OBQ2kD9AG8TL=-G_Y'!+]H-D6tu
%oa^+M%r:n@i8_<QW1M'O*<NCpm5adr+7=;/q2XX$s5Epc5CUhWXP2=MQfI391RFEqZViPcM,WZQ-nFnk17_/dm4n"k[.BO-^WEsh
%FF#G$!9mC:HrX"@a./ai^T)BLlYg;pp$4P:3j*U%l#Ei39Fl#XUJ.$3PWht/\FuUg07=c_?0[qubGoYu@iMU]3c-SrrAY772L2kg
%bR?8H-Zd]PSS*aE4]AdOI^f-/s2#X`]0TZ3,e$gO/!kKS-fP@!`Ma</p0tC.H6dB)UE1O`7t&0p'I+W<eFi%.^JUb1dQNY/01IZ_
%\rLGW7hde0dFjNE(EHe'Gbt8:^Pbj*<%=.!pdQjMPau0\>(R`E7ZE[R7)^F$WN"Cj&qGkFAjD?]76j;p'0t)S&qa,^=u/0(Q)ZF!
%K65l_lCFQc,B7'T$0mm*f/*qJr_7+lqK`(N-bV[gOuel;-D-CqnOWuJFfDTPkMF'O\WJATbdR`>L$u@]/CRJ?2jN6e9@8[n-I\U/
%gadMbrOG)c8nSg@L^n?&Rr+"\`o3ZP.i$TN");HYQ"me]VPu4VmaW)p6+Uq$-2Bgdf4g++#MBQ+S6lRT?EE)@Cl,Pf^>kg*V(Yp7
%EnUne<U"Lo67T[QEl)q5ZEd.Wb?Z^O@RjS#8pN:=5ZM5D.bCUWY_f>c%]lP]_B:=SgQ2h*De@kQm6X^LFH9^5dV![*RN"Nb<enht
%4LY\oIG+2\PP.GMC]V5AR[CgLGthJ9&AKjW\VA'YTq!i)IKt`4AMg&6/s*"76S2e4mQbR-\-M\sOeL>KkcZqcS.u"jfST5=K&imk
%@2Y"BZt=mGBZO1efRlMkBXqh>73$@T:$'tY%"el:Di0Jh1iS]hW+?rmTNVYad=N!26B%-'@34HelDHQ,.s.l>Rdm=Lj6r&b\f3dA
%dh$(0$WRFEk_Z=1SY$,eW_N^pMug=K26r,H[8KGY%;6c<o(%;ZGo7%t79*P\XWMaTe\T&)h_77/HL%_N;<.bHT6;V?]/6O2iI"]K
%W5d?_QU'(rNK0sg^)350ngct"Z?/gKr`n2#,m:S+W>nKY9p\7T>FX>1Zo1%g0%/RR]'/@frVFT@OkVO4>eTlc7lZiV<lWjn^tMR[
%+KqsUXQ)?o1n>=_3CdX>_:mGN8erh\o6RH&R@Vo6%JEhG$P^kH[J/=adJnCf"<"DY1It0(#2KX73m?JdX1b%01=fqE:,SBC-7a'6
%^9K;+E3L6iJg*:YcO*pXA1X&c9Lb:T9T?G`oqc%3?E^P6@Ej9!*899l^EUI/pCjK+mmaJ_WE/L\YCiQNnOg"6b?2k$.!"lnY!>hh
%?I?<+CH!l/cWJjX(nhC(bG(LmYCgJho!b/A]lqN2NMp"n)nksO>4=$ok)!9h)SPjY>50U")QjkU7OS-tU*j4gUd`>)V&KOO[66h4
%Uq_n#S)78H62cW+TVOX`3ug<Rpn7Z`T#XFO_8gb4^Ic)SRXb'es7M4c0[<V#DD9A1lcnF8e`h5B8>XeHFemLPer`_2mVA(/eu^0f
%/o'G52c])sDsl^]7?sIAof"'X5F>NeWRG@XK1\5WlE&I.[8Ei-lP#QO`&<cN07=d^HDtuB<)i,1`\q.A?KXW2`YsFL$4FrIl7,fu
%AU$A8LXfJ)e*F6:oJ4("f[]HqSSl>,?s;n1bHu=QN9bE30U?hA@I1sP77c%(lOON^3U[!piR0>TffXd/h07$B-;9bdb^NES(62aa
%hAVop%dO+lcYkM8,^tpe%d"5H&^R"/c\b@gYDlTIAL?KqaRl]Y7`'6]ZW*fKOgdP)=R>F+6PU]odF.98Q!Mg="c_o#V=6rSF[B'#
%;/O(e1KAoR.af`U2;"j'@=-p4hACE/hd'uCO_h^doJ0kO$.@"8I"ZSZJbK%**gCEn<HTrZP?VgmdplOd],oB.,>JQnjZ!!d>*Y]W
%qAY]keo.R1g!S)f;!INik:jUIAq]eSkPQ9e?@&i62tc,/\Gd]AYkDHr0>`#"0O9A-kV1hXoDn-Rs0U[^Zs19oe'"Zu\$b]aa'P0.
%Bl.FMf$`!h_:^Bekq_ZU6+YTaFh,dLbhqj>f&h)!k94,[o:]`8mGZ^O.8e17kTIQ<1CfM47B:N19+IP$^=K:(?*O'N<;%Es07G[b
%eIlE'S^/mpHp'A*1gY;,>2D3\H4\L9D3AQMYL5-Wat"&LOVVk8Q-4J=MoX:>,\0WmpTir=,;%fiR`cp:l1u#Ul1Q;aoX_f!(;J2o
%9m"hD7C4&\M.udEC$:uYPQ&7g?TBBU!p2p`o`j7:c9thjRmDti,;U)RR"=Hm1DA1Km^44?hViM[SUe84T!k&d++RLUR63/21/lWF
%K$4AAU;lX%o=QX>p0>)"Gt$9.1G)tPS[E1+A`!`F#2VWAg0!CAHpiJC]HWu1QK*0gco`\[G$(YaHTr1TNT`qE440d,oCEYeHekel
%GORa1FTg\W63A^3hZRpGU8$a86Rng>c9YqiU7Yd39VeF:9B<%ZqICK37aQV0@)<m+g2@I-TjMN<<4>4`/)kc.#-7X,J[cKNmffTr
%Y:9#V03e(gV:%\PjVtEhX/F]"VWI8P1h[bS>E=LNi`]Ef,'(,#,o6]Ugm]i_kCUiW6q>Nlp,Na(oj816[Z.u4&fGi+f.:9Ac87XS
%NjO0;I@-Cf;L%O;)T/CM4EXpNddlp9=oUG?=s^R,5X&:%Y[%0FL;\_'q%L'u\VLh]!OR<Rs-DTDd%H9Co66/W(\e3q>TC'GZ5t51
%oA'Z\O/4Y,?]BYtL9RV9J_.BZN/e29;-H;sEeb%BJR?-p3tV\S*$/L<m1KrDk^#&cX<@b5LF6/8:7s0bQljF)/X_+&168eQrjb.e
%Q/"o(bOPjUcq;_>+m8$/A?ZEEkC'KLd-A4`djiq&=7iW"juk=]M,_)T]UO_$'64`Zs+4q`K/$I>&-g6CFQil[O>n05SDB$^J1";Z
%:1>'?"bD7e$\=XH4WlDHG/(WbN/9FZ+K0\Oo]ut$FWiIkB1M<VQG8KU6&XD:3h/@+-U@ndU3\j3@g$6^W+^T@<98_S<^]Z>JG.8C
%4m=s>Z@jP@0b-=Ij"h_7Pm!i?km+"=rWU9YR.Tj(::`Q`_p40.fYHSX:+[?VO\7;/dD=L-$@/)Yd+nImk_-JT,[oqrKL=',WN_^J
%1WeVCMee(V[4\'Ns2Uc1+6aP.mIriXqu4T@N?b'$^A+&(J,SMb5J=bh'oa<S^YMukP]'=oDTm;`j4"%>Z+(;BjMQ@)AXH7PbW`tl
%5Db+D];C?<Gf/d9\%ZT&a*R>DKr=8G>"2('R$N;^kG+;5bCJUDhAO]k-bH8\0b&+KO]I$t-`1I'B1ErhU:oD&["s)iS#Ak>)6DB]
%-6T<N>HeOWYi,>E*<S((\2+-k*6s(lH9[e4KNSlU&W.kW@+?,3T_S^Y%i&S>%V',PntZ#&#m7sm"sBoeU'5dLB*Mn4]Lg=t-oPu[
%1B<PY)3E+h]BTf\0$G[D#`p,KE1dCTaoVAa"-O\eA,$I'QHBqPTYi;d8Cl)*1(^,D$ohoa!HOXS6'_sF1bPE35X7r"Unu0<m8QC_
%Y[6$=/'3=aRC0V+.F7O))0![#"NW-^k7NflLhD9sZjc7^J!"EBlU8)g$g\S`c?M<Odn9d>oIqBl/;jr=A:N\&'-R1i6''jaK#0fY
%&Ga-i#R@Y%c7(0qONrXk=J3d:I(b5m"+Jui*7iP'<%]"q0I>H[^@_[6NdQJT!_fBHTM\"-%I%au0!Mr"3FTNG1P=$d`AP[+/Z2Z9
%SWb(CZ"=rT:F"?JpMIA#mf`/d:pUYVHMpa6jFdn:oKie])U_eCA@>c&TNKl/+M/u._c=!u5iSR]VF(D`a!b"MTddU8Q^00*7-`4?
%Vfhc;^A#u#%*0tF'+5rUU<Wm<[j%I]?(VW/1GHX8#uJ4q?ia.IandIh=EOff</^gVj5n98&>>:*O@s_7!ODN4-jbtim[XZ?/.iWn
%%*2na2TgQKHGX)=J7sDK%SGB-7=caMl=[d:a=O9\B0[2ij-"@d8kfmog*guM!>9Jc"!2f[!&4fO6mb/oZ%rVAmFko/l703?Cu8%"
%njFj2FeUs'/YlCKEpjP^j\6cu!i4O.TLh;>d@Jg7#'q+VXiD1*<6=A:'h2(M;<`1!nd!B]WPEYM]2s%MD@gSu&T;@T#P8Z`0Q97p
%%dGRh8^(aJoqTefIs6]FhZ@&Tp1W1EqTeAke>Agc+jVpRU_73O,hIEJTEJif9$WQW22BP6k*Q@\78D$PN-tbqKLHHSPnkedR\[_p
%+q9-%gU_\D?E@j%icH)9Ic*W>r#0S3P)Bbs1/:bGaVqq:n$8H,8VAB#`ckF"R[d7(T*,9(*c04/bdGS23SRDtA&/6nJ&#<U#"\]Q
%1dKP&Z/cG*W7;c_Em_a+<#Pnt]1W%7CfX?2_;5<jJk@LD.(LER="@G8,.3^N?RRpMqGPp\R_I528Cp4G&G="W5rEegI95[,Uiqo1
%$EECsXA*b:.D:m$:XVt273Ac.)CI!N2<q5Q2W+j?Z`j>kdM`k0>KJ?W.f#&;]pS%*PuKXNaER\Bp&hb/Xo-<W,1D=+UVWn4eC:Pt
%X0!I!G/tX)D1C)8:bjI_KJXEYJE-)JoBjs5&)4KH$p63E5@A>EbmH<Nerap8U5T(E+U3+9V69K+c:/e#ZJ!m1KA#u"F1&W!b'kO-
%&*F^or8D:m#LKXR.BAC#!0RWo0q(p$(TRT26l62+/-BoWUUPa`9j7[0(:%j&m^nTAa9ElWP\>0%=iuILRC6Z(P'K_*1n!!0KThga
%4$_$tQ-t1'"QVm'=V%<Zg5ig]eje=/A:[/JDN[)6NJ!Kr6=pQ?UqS!bL9cS\&/iB!!IH+3p<\40]$NM7j_)S.fmqd7mC!JfW8nu2
%h?4&H;$,f@.T1nL:Jd!T2&jUlC=ZqKkf9MlmJN`fc;m4*MNhe>CK7c]O.Cg7P&1r%<,_B?Hf!e[C+7[:AJ=B9VW/Fl%&m+*.T+jD
%[G`l!QZ9RkP"&,+1[=bD:\_M.q1*C0`/bNBZ).Xp?O5p0XJ::]o)WniPsd2<W6N^VJL0%Y&=pAI6"ZIkYlLb.QNj+A@UQ+p[K&mS
%*%r#9!8.O,6V_o.<`(Kg%\7SF?YP9(H>&6HnK7EaLGPM'd/.e,K'SNie[?2"DVWE6*]s%7G/jgqk]$)Vs53mcDqUo+@fk#s[[GCe
%cH`g*\-J'8:a,dCm">`13q@iWXjYb6H%h*=SogAT8$Ei-[)A&G6PtTkRm,&?A*4m)HE#WC2tY]iITT0aAFkCpj9<*.NuE2o%>S`\
%Y(5:rb[g/@.$K4@$JK,!0B,4_,Q"hSp/>N\"4DR+0J9[jn;/MF%EtXQ9,`cTW/fN('`q\gp>2gEk%2jZIe9FV3DTLAs*Xj5[r6//
%PH)ilB0T'I5;"67Rq,]m*1t,_0eFH-ke09?QV[I<Bc4A7%0eC*'UYM(,$OnnINf,5;-n]lMJ/]':<B/_\NP'>/PfFX"tdt:"4O!Y
%jm?BM_<)jYX;7UCH-%#4[#6ttL><rI"%XN0A'ht\3d&"rU;:^l3pH>N%Aus`(,+9MrJG:!&JPZm/7>:86*5DpM&-%E#(r6>0JG(;
%pnl?0JY.dRq1/)Co8..JO$np$n_M9nkcame)pqO0_4Z-@%nqoOcLQ^'.F5Xm96lg3>0=1.C&&m/n!Os_7EOFG=&0<=p5@?22Qh.5
%5<7PSB[Fc0^d6aFXrI.Vg(1k__mDa6MM6=Z&e1FAU;:\51`QT`>1Q3Pmrf]XH@:(%?1_VqPk"j'&)T++$9fXA_buVm5)OQtE,ar`
%_=8F*%aadT\:I&j`Q3jp1m!Na`JCZ?%,$W<E7(,a/Pb.N0(;s6=gDtKIt*jA5/$411G-Ser&phXCka)"@9\NN"RSS16[p:3IP8`3
%M(p^klaTOVQY@/#gZ%fo0`bOc+F6c`k8`O[cXGDbrDM^Uji`VH>ejJM!j08]e];+*m>Q;TGt(aci&%_A-PG+$"d`$KFTC(`fQsi'
%YVnbE%;3hA6hD/=>IZ.7c!AW&q=dE-mA;Fq]F#%K\lP*8!Yu]s$CUq=lMgEb-R.$Dfg[f'RIb_@@M2c?08<al#(m[(;!'F'/>hqe
%/da11<H$5^<MbHXZM#mH'!:+Z$Z3>1#-IcCRT(ll5R((M9a7^g[I!mm`:i-:7XA_B4tO)QD@E[Ja0]):-S5NeJ7mlI=<>U`U#/8]
%^IPle>@^;iEC.ZgJm'JH2"Y>lp.:f<$!(*$jm:Cg:#3KXdM>(]3AN0\Cmk=J]$HLL_l)<AL#-]9m7Saccr#l5)B9nCNb%n99e#2Y
%!+,q%]FL?#$*RN*ml*b$'dYI04tIJVj@f'"7@<Zke!_qT=Le:QE0>cNYj2a%1QdoWQV)1S=BoK9SpgZbGZe^RQ=P83Zudl.9T(be
%:M?JVl0b'-&%Z85QEGda@#0PD-<a#FDpVtAN!%P\k3W-r&Vu0Wd7?p^egsa^QG9&'/C@>(QY>>-l$B5'CT!'pSR=RAp3JiX(?=KX
%dh,j:6jnJ.4+e=H2Y/`QP$e+)oT$X^f.\qa$b`Z/'RG+#]?qZ$&Nq@BB3Z"M*/!)Rhg&_1_?9)]TMeem5o6UKX(`],iiuE9BUff7
%-%ai[)B^.<G=i!lZm+4K_$AId/VWZ[QAGBP7:]`c_29LlR."$X-%\0>,<bZBY!"WY,DX9YR\5Y=moDjN+W8uIR\-&qJhjt]@Y%k\
%OHD'K[G=<S/))YmO[Y6I^9^%aTM!O$J/4h>^#WWjjk=MqB\JB;!J^Z_#kW!/cBT$M,$kk%5o>ED3=1dacI$t7JdgAD'J1T0OTjin
%YDl_FYK6^p:mnfh@<W]"$1V)D%!DN<Q4P_OQK&"7/&2_#QSIR(?-^i5#?V9J+'L9M>g^"AlA5$DN!N'gU*0Qp\PcmtD4G:I-(0U5
%L*c5r=6+lE?pk==X"Cs\GR`J8+16O&+Ne\]2G-E6_\;F%"]=,BZrJRg'S:d(ZriV+A0c<=#mN_+B-;NVoHp;C"kYL:E^Zc6&]`9a
%7N>Q#oJ8F6dk$=#"a3U/,5-bBoVttiHD?0mH_-?f,KP[2:,!5:b$a[;*n./J5&,pTcbeWFU:;"UT/q2G/-,Q[6*BFD]/ke388&uG
%ROT4HQBngVUA!%H)h*)L_N^V_6_Bq@;a7j@XRQVCf@l#5,N%Zs,*s5h+qdaUh1[4hcuV.l!i"dGS"A<`8Y8"6*Y[l3#&`QEU8=tU
%P(0mgS*HE-H]$:jZo!hTrhZVmSm3h-8S?D!]/MJS:+;nbpc[%3H5C;Kqn5;5<X@*W'ga`n1D:5Pe4<5n&UK\girnqcm[I27=SGOS
%PK5P^S4$Q9ekqa&]G%e`1Hjqt'!9L=:L_YVDBGhE!Sf<SbIG^pB&/(P3YlRQi#WU#;8L)ajoCYc7X4X41MAc&KK`DpOK"jOa-h&,
%(!-olp7a(rI^.[7hOkl'U#radM5hLfH/d3BL7Yq@[EP76n4=-nOA<AX]d'4Ofd\4H(2)!7o1cF:eM09ZYoCL_MCq\HM/&<MI<(!:
%Nr"t1^g5P21ebsnF*rR"N/h1cr$M$!nsnI!@#e"emIVcGEL=Jg41MdhLi\#S)L$/>S*lV8?Xn4=Hh<fsoonD6EHVEDCe7=d#L:j3
%m,eG*flL/PnE^`2QmSIP-IgVgJ0J+?L:Z25'2[6u^%77rNt]]Vqr@mP]J`(KLs$+Vk.$q#\As,H&<T1;Y-XgN''D7%;&;7V[:bpn
%&k.m=\.dCK*FVSQC%Zi.l%5H[gaT"h1u)f_SN,E(K:P-[l(ae7gaU1*'mT9N(/EXCTric+$D>*!jnD#5mFVSp^8>1s]"aBa;3_N;
%9q"\6.5<FIctP7K3'T3uPml7IH^Op!$S.Y;+^^OAl%.$\NKS9H6O7dU)k%,Dm$Qj2TP#9JIWC)L&6$WVr8]ia-h/b9W7`]Mf<eW7
%-k,C)V=,beQe+4JKB=hGY<([cpqlFdAC+C=9)[TcFJ:8,=*6;.Hr'CCZ1<iPjEcSh5gLA&k7uC"'[cd^*esmQTkM)?7(FI,`)K.:
%U[[X8<l&J(08MgD3RJ_m8LnfMSc,F;l#40Q3tibBY^qm/fK^e+`CQ_SA4-rOD^)QRD'63ND'3qPfKeXG1*bKnb:["Bl]URXHXsMh
%_03tI$N[.V3c9.e8KZmp(ILUq/C?_+NpnC/,o]j@F=u>#JAob9oL%u0#jr"?gR/R'n=^&*;s_R.n6T'^3E+VEC:IZTCrn#H?pSWN
%U3iXrSd-g/OhK",?)!X3L@Z@p_K(+#K7(!nE/cCYBlMh5PF`fjkj71Z;0u%fiot6;,coPQ-?)l;Q"o87[Q#7!=(@/@[R%>pe:*`q
%-%aAZhMU:Z)Vico06*d#7k@MS,,*Qrhmk@\5d!j-1O7`4\$g8QCUZ][N=O`)<<lpM@>P5s!q#TaO1MQkV->_(o[WB<P)o[t,ug!O
%&jXX1"NYJ;.UnsVFiG$uqiJ;=G,:]VRH$m$*0T]EAWBrV%@LhOD:ej/c,o>c*Qjl]RAO35S#@`hp.LpS`/.)K,52T;.QFc7K[^Wn
%2j8O))("7E,Te4raE#fr,1^KgUutDbXW=?M>6c-Ea$uCt[7ppX>^Voj%UALs%--7M+7A%h+FH_5%[-<i'B;=b+'RVjSUBpjoJGE"
%2\,KMTg(Z4MU&Q^Xr_X%a:Sf(`6i#SMG8ur[-^je>6cS8dGn*7Q]XYTs"o9:_lNU!r]k8V0c^H<E_?r;`7me,i/gZar]9A<hhH9T
%HTpEb]59J9=Q5/52L;AsCN7;cCY/R93m<C9!^2"%f&AD)#+U6ee0Z0U,BN?NM<HIsO,rfC1\,Q'1WUODa@/Tka`k*ro24h\g8VU3
%gd(Qr(gA<O@mk%k(fBJ:C$>-jYh^/Y"%6XXjkaq-q&tJ44X3A(#0N;HF*QC//sOjBgAX)"J)akhp>/t78CZtCkIc:Y>_5gWW"[YF
%4Vb]P.2Bb3V5cF$YmBZeNo$Ut>*lYI:YUK@eKhQ#LO4JR^Yr76*5$TMYN"JR3.p@o_s41OESF*&d,6gXDN_76akK5IiPur=hF8Cg
%j[A+k\+#h0?H^nl8\:]'G>n7mVP*hMM*<q524#A@U76:Eo5<J<?$TGKIWFU?%(]dP=,lJl^7:(f98U9J\E>Zp<0MWLgN\H'O(omW
%2k%/2D/LTW2@j[-i>Fl:#*ReLT*J22F9SOcL9Ktq"^T;eT2a-c%0euZ<ZsWBe3R::IPU,[HO3"Wa`f]/c19[L?19=">t<tR*f`A[
%,.Cd9V]LMeX7qPdbQFRe4V2RC;*NZ7fn3&b?'@9f-;M`$I`_[%,iI3JOtk+LWJ=^-)$-80\:^j,Tb$I)P%n4,*?osk1"Dh#EdfHJ
%s'ED7/:r2-#[]*6f8T4,,C0g`)39d!qVZ-d=73NG>9V>GcegaBHL,1sna$/*?4FI=ikVl1C>`NR]u(/\:OVT6q?rA5gi.9SrR]("
%2r8QpkK8pM.gMfP*iK:tp!AheX2jSgq_"#<J0pW4j+hT4l0<%kFCRQWf2,,Z`Mb,?_77,,<4T2m=!toX!*UDX:=p4jbuh.Z>^NkD
%SZB\]cX>taK:.$>q8#a@6H:od;kcnWn.@h%OIunN_nkU4Ps4:<c]4`NAQgnd(p,WFN"^#Tl5=Lqi(XG=>bk@TIVH3FQW3LO<BS@Y
%)`40#<Muq7\-Bu#$9f/?\"/:@(PB+AN,FA[Rj-cO)=]g'p`SqZ0_7ULm+S/"(VLDWeo'Sg@b\MH>R1.Hh2Z,fe2pE?!&gti*k6e-
%4#XaPK0)!Te#3Ot&/e(#M):;=%"V.abPuGTaE]uWHXN$@-escgI/N?MA5DBRI=P1?XPk?[m_`..U\X-cgs=Y)&NhO-5P?"jnK83G
%ESi;Z*%huRQ[AN00O5;4O@sdje/-gL]H(]k32\-3[V+oV;Tm]1j4uNbb2ZgEp?^/_*.*I)G<pMP'R*KbB*[l-Y]$-3pO'.8MZ7#,
%%daX-&FGtMCZ3:`ETF:Y2@<NJH$[jj;=>ZYbGZTep'`/ZaVI>gf46'+qck<!nc9h)3;0's5Cmh9ZF;6E++u]O)Q_dU]^d20i%+2]
%WX)/u".=,`pWch'&p5/\e!c%;s,f46=0%o,i7".kU]=cU5:YjDl"0>TZc(n;8j!Kc<?`OCf2"9[n\"R\*GOhF[-NduCclD70.c/*
%0B8m@Ia-PjnbLik^Zug/X4[`LAMKc7Hi?5)PuH5RcOA\,SB[2:bDn^'o7E/B][)(EkF_0r*5>j$VpdR`h^m_BUrUfUhL:@F^j2"D
%[g*E!6D/BGLX2k<\d,"&S3q/_MW&Ekd@d75LL*WgE\44)S7?ID#6anub_@$&SM'3Sd_37`_Bf=qR12M*/h.uJh;Ci.?g0TAg(,0J
%jb*QnZ0>+'7uq(q*?uTd,35D,6TZ!_90h+!&'jb)>3pfg7tNq=Ns;QA!nhN<*&/\b*Vo<O2l<r)jD.V?Fc$\WTsBa)abl0fAd%r5
%Y:HihA_31Kf*TMA7n5@\!TD"+X$hC.C-3Qon%ZSdp\bWKM!EUhDTi].im[q!fI*<BnrjT*OG70Rc7kmN$GDK\ia4Vdhss6Mms]Lj
%j@S]&B3KQ4#KO31qNXO&(67>f%9iP(j2A=s9h0-K_B&*?6-BZ9'@X8"hA\9knKJl0<KNOFjaoe99+je=kfl,?!CU3="2X4o)Z[N8
%@K;&K3!McmiS=)1i:Z"G5c9C0!End55R&?6Cbu1?r0`BZOBjhR-P&0F_dEIb,R6K\+-oim?[#:hee/14(irN=Bc)/gA(Gg/+7e0(
%Ict:cJWZ:sgubNj>R=`KoSIf`W;ltqPlZ[=b44?bfP,nuBea-A(pmtbb[8*=LRH3%'*<Vfkr/u%6`T8W"AJ)3:7lhQ.(lq.O5!B6
%3!B=Cb,I<#^"kXAjj]-=]bUW)gESk(H7T3tU!=>a`c_A,p(7>=/dA'K(<lNalP8#`TMP%p!keN8lF9KX@]JImTG1*CEd^A5o`Z1S
%k8?O8qW_bZMFfIdT0sWL^WQ#-ek@+53Y*j.QLeKn>)cU@"s=;EH&lVL,p9nGB8)Yd:Q#.%ge^()EC6._<uJ?rSMbJ@m!n#T!LLJ#
%7S%to0T2HV4g_tZrooV46^._L>n:T8(m)/NCE`ebs2m83kV*AGZ7G'&TgXf^jaKL!adZF=PlVF>Q=s-)KYX20"k>CLF@=\>&C:Kj
%X=f2e?nG2<QKL%)4fg=AJ."uQf*a6#qkX>lhIn5IC1VVr(j01)5h)Q_@Sc]94TnBIl#m">Xd^:&?;dJfXr#KY0^*#]U_s;3Gf"E1
%TSuIDQ>qtD1oi8.8uL;4<S)nV>bl_moMskD(\&cGf3^#Siu115@WphKLcedC:B9ZC$sZeRj:'1h'*2jUlG#+)NH*<TWJmasTXQd+
%P#Pe46T9Z<IPCJ8o_GLbS6^#<IMmEk;E/1He!KuYIq^ce4(\,C)4/m#g"s@a+X#t/&8VZNFRd?SarKZLki/Da=-X/[:g,!T*\a>=
%goK82<Ki=q[NCEkDjR>U<<!AmjBGWlS!D6`46>a2f7a;nqZ[/lRVmQ(qEmX4W%iCX'gm9OSGC^$7pD@FCSJ.c!:iebFWO0n3DV6g
%5jPW"@kApjQu-;6H@+$%"_&=eFB'D^lgsICG$"P*OO$3oFj?i5P/OIM3p9J8Wa<j"VV!>9=0_fT=*g)n4_gZnjX&h#*SAl9Q"pq:
%LS/":l]=5]k`R.9?tfcG!W8Po!/n8dm'&X@jEf%M`ocs45YimZ]r7WMRM\r;W(PtR:/7P"`<i0$H?@W:[i)R"TY0QF,.#ouT@D37
%O\6Xk\'/c+9p6Ng<eRP!\UFr[I/@WHDftAJcEKBLd*HcsP>,gb;Y<Om)saK!aeGrM3fugcOr?Vu)]Ns2qN:/@h>oIe/>H?>&<\an
%Kh+t4,U6HI1[BQA(bMm$5L\@B9hn?Q6T1PF>(9G=M\f$)5bB"ljNo@"M?Bj^jK'PL(+TmQ3ah+P.7e"DJmhpIGgdCrhA&*lQ3#,O
%+G.ie["CDnPdZ*+7.`3sSO\tgfo"iI-dOF@IaM2Q"q@.pE:0DuSa:R)n(Hs%c&4Iaf*sGFgQ/546&^B&0I];<IRj+Ld]fHcLV'^O
%C&"LXik#'3E4MFTVDl>!S#g@H>#Rh3J9Rn^FTge]f2l/:XhJ>?/"\Q`d=G<T]JRbpVu8td_,/4I8RHTLj`&WX,'G*&GBu"^<iRf`
%-)/;,1+#64,H1*"DqbFP#:""hQ=!'tME6CHor=r("O1<]gT@dD!gjC:3a'02Z^*<D@!]q9$C2;08fIM8iLIf3@IECmP/%%bRr8h0
%+?B#/2fF3CL[VtUbOIA;5K]0=.Cca$Do[>#b^CN/-Nu;u<UkL(T+gLF/rl]haL_s3++6k0`4`hW*@DMNeW^)[[<u"6(m%nuBEI,3
%0`Z.q0bD/Z@N]*a%"J`*!"q,\!UN,W7'V"S#`(1b(m*!<clX?Q=RpD$JV^4Rrm.csnbXEBs5r'cqs&*KrTdhhi=A.ZIeVY/n)iMF
%nDqpQ&ed,n*VDchC61J_Ls/gAI>Sp\W^8`k10&s+-'5AMU^eOlF&baQkX5WU:uY)LOJ`:c:nl7?+RWnN;O'MEX,q3111#ZVk90@J
%kP=P_HhI$g&>NG?l[:p75g6,"fBGl>PllBN1`sBu^)g`Bj?L0j[kYfK8\$1$1`TO^(rpcFb&hZ5@`rj),!i)s&1/U7I'^&:83bX5
%'nS1m^8]PT%OrKPaHl'V8;L[h%Qpcs3MB(\/+[GS1ommRVLi8b:"<U.cDabn6$,qmSqEK[RSkF3V.p36O=^O6Q684?1UZ/\%c7;/
%G?UnQ8$+U9W.#V?i-8Wp51cOC;&GsALXNgD*B9P@?G<e0!Vs)qc9f>6D\CQt!O-tedV"B@NGT@WP*t)!'8IF%>)E)$!qsG-($L8W
%kmKH&&,<:*ioS#='gJdcrkmLJ>lO\Ws1I<8oDMEBcZ>g&_7eK^i&igrfHap6!1%2("L"$j^mSa9O=oGI!.6`i/.=Kdec;GI\cI?Y
%_Z6>;%06*b)<ejb7=]-%K)YOa[rqTikArEe9N#'UMmM=b,bUbp2B%)J7[r0>IB]5?5/(forMlt_oiRPq?tT6AS-]DX0FIrF%H_+/
%+@<gu!6]rp^p+"E(h"fu:kRj<5^(NQ7^$X2j;B.e&?!_rlk#Q"c#jMOl*BRYK.;6Q'F/28K"st.;^/2ThH+KfKbfKP4'%E>>6.Qa
%@N`>g"-uAA<j)K:%P@eGT/`fr8M!-WA$&cW)G@]VY!6K:"7TW"Ki+%F!$i6\HOOr@#3<`t*f]UkcpXt"rNuL%Dqoj;=nIZGe1cEi
%ktK2Y7]]pL_QQW'0qM4TCF@/fk#rK#Xgul[:?t)WHhUhb(&+-oM;6/J)N#n0?NV@a,E&KaXl=h;%q;#<4KF[RMH'hI;R$RJMjef)
%#N+u<Z)M]uVSJ_#E36$&otjDG/u`8)qT`<4fl"Bu2&g;TBi`X;N#Z]3Nu$Y]Z7qs&Emjq^eEml^-`eg1Rp/R0QL5>mN2X'b(I_2]
%4EYSe=K.mb7iIhn=l4:":SgRiQ16mk.SURud6%)of%b.%`)3+sC=A>P7[b9Qg[f5bV+7]%\*)AIl[+LuWVnN;#$go?m.bVhX#1mk
%HJ`gdia1dp_#7O[ob)kf!(+uma2/[T&Q:"i8-2=/+@6c9h?7ATc33&CGQSL[L=$,lYsYkuoa(J/!q:$=!QYN7K*B=Dm)rnL"F+TD
%!ss^5!?$-U2ZX2o_gi*)1R`j@At1XX+j]_cE<K+Z#/02DcA<+&&.MNM"E76qLu)5lTqn?g!NDCjEIp#<BC%N!HATn"<(<B/%8rJ,
%#u`!lE,FB\kb0mJddPQe)q&ZJi<3m,^&2Y4M$D4VoK/!0#"7o#>7eGl4DmDFL+Dp59s+7=UB)8$2"G8MSPQp%J(IUPS`IhLYuhl:
%d=_l:/O_Ig_V9;C:g#gm&B3'q1dZ[29+`d5UGDq]cib#4:b)r^YS@8UjdcF_8C0,DB)m2pM6KOt1=AI<(s<3WWTK8MC.N?**+[38
%;ecCVD+JO%V(/k^#VpQBOK*sW[?7XNUc-D+jK8r;9SZbEGs'^j58n9']OG'+QD'&/jTC%!UlF"L9@>$QD+IjqHf@:MG87usNrVB(
%XGhAFa0I3[`]g#M$,c!'fiG%L[@>-O^EsB@V/p%S3qOeDkf*#+T:AEs!+_=`A-'Quc*N*)Q)-8;;=*L?5fRUZ/O1(56j&PJ!R(B/
%"Q1cFJ62up?ie-R;J$[H;)dA4+MsKHaFHan$-4N/Ga,-o04ouGbRRpR%R%9)J<piS:sKZlVf2!;hTI=h:KkpUIF_Rg*/!RDK.k&&
%5PR)j:S^*brNtG/a[=R.2J-6MispU`EbDTU;PgTra#o7sJ>f7+lt5&b(Q*Nc=aai2l[mW#"!O%nc?MR]=M>C%N`+H+Y&QGf7c9@b
%LuN_oki>4sLMeJaQBq5s[83gD@^4926LgA`@8ASrX2MXS!;.65aXKCYC2d1dT#$t%S.6NI0F9WZlZHjSC$a6rdIZel^7/STAPU]N
%K$I/+lM?Ue^[B3KSAjs0krKohFPW.@i2d.jWp6mkGH9?*B\X(l\cZa1).)@/le7>e#o3NrAd0BD^2>3V]pIcm_]p*@*lu.6%<_0I
%,9)QDiH=T<4eVl>a^j=odmTb^jhJ1.dWXSB('75k$TcDcfh3i2g+Icp6GOJn[:OB9l5A&pZ2gj^:]@H\h4g@2+KEGr@t0#j4Y<E0
%;'<<ZYNc4E^I1ZD+S%phOFGT,4E$'2)aT(W6J(KkiXETpC:0CKY.>H2O&a`1!_GKOf'Cg,`*fW6g92;!6i>N9YWkb%<f(P*?6h&k
%>H^tPO0po8cX]E!6iuX2CTe2)JMbBP3UT5$ZE?1Z=]_-idEPj*pOq^NGsg=\W#'L0PDF8XC8K+a[/eh720-kXg_4n@dc'8Mi?&t3
%+CQ9d3Otq2l)H$r'P[`3?A6K$PdQjkl3t`S$#]liH@URI*Q^bQ!_Vc$2$AuRTsufK510j2E@'/$<:P4)@=T.B]DbF]Zu##Ggf\hp
%i7=@T#ke<.R[X`D;fHO:V4V@?EuZ$YhX1m[SKko`\[=\O2+Xi&3;"2S\.Rn>!(lL:T_V&TF&Bk5L]ZKQ&9rFre29d8M"qL9:P)]q
%Tt\!0'S\kK0N8;*Ka`s_eFsBRd*QJ9c.>eR8`;n)F*b8Uq?-CG9FR)Mk>,CuU<@5F#LP=tV[_j;B6:G%a0_O%G(,s95%!%3`\;1f
%@uSD$fQDY!+lE)$dB2"^k/@2#^nNtq?L%^JP#jckGL[b"S@FrD'<,$.I"C&sfk.1-U]ciM5WV8nI75*oE!G%K.&M-W<dNIl`Y"n-
%Y6-k1Zs*R+C2>3V7PV'lL+,Gm4fYQYd'Cee8hmClpJ_er/OJ)Ub?M[Dmm\tZh>PA#X,"`e&*W-<fN!1FSG1UVTkkY`k;[.Of:_r#
%eQIDDRF/C#cIlQ%b0'!6N`\7A41=!9Z2s<_6EL^D6M(&cHb3.FE>@3SBar>=d#UbV2KWe7,<,7<6i/W\1t'*OD//`afH:j%W8/f]
%Xph4J']@oK#@jg&=G,2+HAM'Z?"r#kL+UGHLLHZS(5u\bO>V,8A(0FLHf]6uZStI#/*6EW_qN^WchA@gRUkU9j<O"?BWleOc7udG
%[`m%grRs::[GDIj[F;5/VJ5u9)hOjA;m<\d.>kVA?1B>5>l,=,j8Kaqn$sQZhcq'B<;Ot2J1sdsA-(\H>3D(QW%?d.7'ReO7!Q@#
%iU?n:#(f[oH=m;r.-uQia?((6?igA8+<YSjjC0"B`\HDF$Q6`g?pJ8EK?\op2?jg++-"p=LmL^8hJWgI0dYhuP_e?4EEihnL,'5S
%+PB'NqA\HM#L.u-.J3[R7"^^2KX7C>lKMoL)&7a^oJ/8JNu?sS*B6Q\+Ij_m$;/%l9PKSd;K9-E8DaKb):P7o)&^ls4)j==Lmr6I
%SiYSWGgJ!4A]1"d+B8`<9at!m`u.l#h)RHq)WWk&6[I*uFu;fF!7%eUBkG4bVCns'.E6^@i%(W-@@:WqbL@e&MH7CL`sWe;=*PgX
%QRf`.8'@0Q(NYoL7Y"aH;!@Fi2->ACXhHTBJ6<F[b7uUBn6il5>iDeM?ERm*hCQmg5_.&kU'ZWbb?Q5VAf30c/Q^=&*+hK%/Q]<P
%iRm^Q(4[D>YA^UO6)i<q*GJ!q9,c*5N?uhOXS=if[92sa7:WU>3RX3:"4E)BM_AkN)JhqP9UmgH$Cm5%=KIH-NIi1<M\Y,lZkb0Z
%6Zp`a88#l/A1qXVS*\*$B@Oq17JA-C?J.sicE3'PNHrBEdK2-:c8&Y>dW%A;pHQ=frq?5T079?R2aHaT#1rt%ZeYV7W:?&T%!)#5
%(8.sX'+i-/gs>W&Hff:BWrQU'ka_aQh6S0kqXh9Vedj*h0FIplf4kM_E<Zts(E*8^K)pcZR=,r<bD?8id>2XrG\f+m4k,!$O:`!]
%7N@bNitCkl<lD,g!]]#G=1G8E?8lYdK028m=o`h7bi=g?O8Hp<pRXN1JYc#MCK&F-IZIQ(4`5FA.nUQYcF@>0b8qI[7tpSD'5UBq
%oKplN/iYUg@U1eXms;&oh1"4(_Jmk*,DI^C`M(1f]ga62s0TX9:k31CQWdq/goKi42ET+<%V7Sh=1dKto5[dp@MS>$:p@u-_&bMC
%mTD\t]%&2kR/i\ikM.j$YYV\-Ef!&0+MnVVrl1LUDo1AK6OEjT0a,-*VnR06lH)ckM`Gm(.B`a8ANo4/:DViG,(U[G*P-5$-mPY6
%&#C1M)A&T]#'SLs]?cO(cOZj_KkLOt^Oq'*;E3o9GW#B[iGkrY/idl-/3Im[.Xg"[DJb09[@or@R^-Mon0$F?pKeeL(UA<QCBL[[
%Vk&FfK)Y<sCFLA.!u4pC/FGVXgIO3DU$Nl&0.h'$S*sKC\/3:'h,.$i$Laro^g($a1re3@/'4au5HV"D29Z8pZLD?TK&[HP[%2.j
%9K_&1ZYLnZ@CaPD`*)+jIGSr#_#*,(ZL4t4f?efg@9lb<8`_1@7P]M#(*34@>B<FcVr9pKasje%Q*kJT%s2m?)Xd,t4hDeuJ(\MR
%ZhjC<b7]X3O'+SgodN[mWDTb.Nug`;Ds=9'm@KLY*ZeD`QmDs@1X47sqmFrn9u-#Y0q`+s?D/Oa&:,"7(#)#m>1>uCmm(-!Wm\o-
%]bNf<5k_"dTu)?-nk,#LN*Rp,:HY%V@t(\%R*tQ4Q5`.S`A+o3^>Cj7'_<PRF2GmQMF?#N8;_`+H1b$G;q<`%KQY3>:Ek@W?[^u&
%_adc@mi6[Y$f#ll82Ho%K:P_iF+u.-@F>dE6kThY'Pee))ZtDum7-;&$bcX^BF!IcZdAe4-u_-aUoK2;dNI@Fg;H"^&c.%P[?m1V
%800r<nCMT-ps\!Tr9*sl4RYi9]crk++2/dpQd9`/l-hmHCY^$[%sn!1/h!j?\-pIGr>mAfjJH3Zk[rYT#KftIY1j,60&c^\..epS
%p-<o-XC\lW_5NM'-EBLMYVV$O"J[im-E)t'Kj@M-Vg]/@"U1so.k$C7@1SU?dB_M71ob)=;OpI-TK5i*F0dDjk4++I7(dItY+RU&
%qd".B*]'KfpJLO6$-LJO(MqIX0<Z@fE:hOmZ\$`l6`]#Mf&u(mm40S'.Z<&3od?h):p<,2B_6p<S>Q#,h0n=D$>Cbbi!.?7CJ'Tk
%.VXRn/0cZo/G(pn$Z3[q0N]&dHCai9n3*.G=QQ%Z3i`>)(U;*tH/ZnMMbL>jR0KZijS7!RY0h"9BJcEbgGUJ7L#8tC26IaE3kK$`
%0<Cg-[uT>sAX-!L<GG/q5?R:Y7Y1G'*uK[^P)BInU,D:gf@Hi1(,'>*M+5*N:pnIbaTbB:Z8hBlR<u5TI0ZOXlK#_5[C_k0FD^.Z
%d^,0G;9IL$o^A7)"@kU(:c.E.0c7!p"H+^\$ur1i<8HUlAVd=?Gf[TFD*D(gW6:(<(ToK\al4BVQ]K^F)#(daAWjiROndQCR&4b:
%nXV+l[Y;%:0MUEVYE]aG0A64iD+MneV$U<PeR@:>9i%5S=rs&?h#o=O!E4^];`+]k2*I4&C20c'Z)cGG0=KP-K@TBG;ffut<o(k1
%"h)ZjM#q=H!rD&Qj[s59@2G/_NnX`N2$>6c=aak4a888]I<0sQ8uAu@9fq3.I5dC$6ZKfJ3g]ue!gUc:WaV41p0s:rmF!72<83iq
%43DYii&CB5q_M3JC\$Y@l/"RJ8a)i-n&Pb6iU(R`nD1R'\]L+]a$#&phH(,dn1!ujRE+0Yf.!3oMdCn*JjljV4#qp73rOE"Tff'C
%^-o0>cg<$)/T2U<>1?XHhja4h#2qOA6om_TX=>E4!9/6'7-;?@X,(kEi4(A[cs\O/U!aC'>%&O/(QMuoAEc(>$_ggUj*=O-g_$/)
%F`fm_n;=pQ"-rBmZPtlWB'TH'&SEW>`keCgCr4lV_ed3C#/.5*s(6C&%.cA\>h,38Vfd,"]KsS\;,d9L(B`CW>IMYX=07m'bc1\(
%bEu9l@g3nBqm2tD:?U:qS;t:rn:%jPD%"^pm!@YN/;WNc-cDL1k^E6OI`ZVsDoId=["&,32rD@JrU',Sn$QYl45?qV<2R8n1HX!b
%`f^Rukk4\<H'!2YE]SjH:B-o!.$&&?0@B+SF*iaMbKIa>Ba;Mk.;eT]G?J8?/'C'B<eE-UrMl<!%S,6TF&qD;CZEW5V`]-S(CRp6
%X.cl`mHPH*('6X"Vl3&:Nf$BDMf#GL'U[OEMNHaraGJjf(DlLZs%fW_H5,:_,C%@Na1PkW0L$o?R:SP^h8'GY[&cI:VZb8:%(_Mr
%pI((R4JJV=?DJTT<^[>-,oF#a?N*+8,Er_G&>m"O8;lA<@86At?5C7GbPn*I3_=dcSle.uZqLo5/R"n>hmI'2!NQV)[6Bi`*%ZVa
%lnc1O=(*5;?K;U&%t-F2Aq^cIRZWc[+5kmPC8TLa.\WZV!K!(kO*!=N:c$l@\C2T%-%[`g,%tU`7hKq5'gkUCM]m(K_(lh>rerp*
%MA%TnqbT2Fiej7Jn!XP/!*;Hkj_trf<V#!E4DJJl;AuAiY'8j+d8X#tP2a"BiQ;F(rm"DHY'_@gBoVTTqt/`C>c`=_Z9b+U[Xh?T
%N]$-Ec"Q4./:+p(moVA[:fM]ec#kl+6/82#ElXV??+W[fD0\Q#,O"ErFNoME4.j:rh'"kcr7m2Vg!(NM]M=2i:AR7(b7AuNUsDU;
%ao$d?eB.9d^=UKt"#iM$J'9409RZeh9ZHc\REXh?ql#^2CXnQhd&J^^6YiPmL=RY+R6MHJSLas-:6iq+aZKPYR2ZheSLfa2CHp0S
%<ACA9aPHVZGU,njs88u9gP)Rj'B<:'^CZE]j_&%m(SZ@^N:fNeT8E*@`:@UsjpP%tA,2N>UA2)BQIE-Kr"l(9cVdV7"OT2'%&-*G
%&O\!]@emChM1qnY&U[H4V$V`4.^:fl9M![9$F8R=/!I]Zk:=Y?]#QI(A?9Zo58^bHSen7jH<"&SCEY9]2iS"nb3OD,(;DNH#'=n^
%pI'qL?dYSQ>p#l]eqSAam<*mih<Fo,>*N)j%-b16L!buggKW;>B[L/f[RXFB!J=A),Bn$e8ZEJfHS!5d'p100+gY-9`@Dg#7$Wd+
%;l,b>$">*QX/bMp7)dZ42DSYL),WJ+a@I'9fOG-6@F$a(8k5bYLhm5M<^gP;+ELPfeRL5eD%k@Ah&76o)4PBt,p/%$H]3C03"*Xf
%qH;^U19m=&AA9JDKot-P6;t@`CD05a]<P(?OXr`<UEu,)Fs<-N-6n]8A"!?bZMYhdY"[u=\YPG&Da0?*e354CX"Y5Zhm_mlA8G84
%ag!^%-=c?SRI$DV'?P\<:bnH-(mE(9=A:hZ)B[OZ\F2o=dlJDElinF*5&].<.J<N9q@fIV@7+7FlRndpVr2koRElqNeRApE@If%>
%MhO/.F>"DAB@3c]mA!+.39m8)$es2nK,25r_4m]B&(+j[l3pk'\'.4848AdMRtNb]'p2^P30k:V.qgW!?EKmG7cXo6j'!$0om&A+
%n*nMZW*D=%'oCR@"&Wi'B-O?7E4d^L;6H*A;2qO#?U%]d0jF7u1mBuG;jt9K,@'GuLG3>tq7OW6k3"CfhI*`lT%/*-^sa477B_#h
%b(!JIR%<DT\>g"cK8qCY-;Ih`me^![0j>BmK))W]A4:%[44Xfu)EkT+8K=J74Dgij:%V(a\(tZ<,j7NjI$>F&E5kj&Oh>'ilIS":
%c?`Q$JB'B`8hG2O8[Ht\OJO3odZa!X1Tjb%mT,43!+%"tXuK+r>(pt*;TAQ&CZ*k\L\\M\5qgd$0_=9u$iJ*]f2&=R[#-ITd!hL>
%5+dYs`\=Tq@uOtnIBq@W)"Nu7Li2$sSeL_+aLmZcNTa9b)klHgRe;P8"LO6j`U#op32f<)((MI"d6b#I(+ju"=S0%nqq?53STP=j
%I@!QMd/?N4c0i>Rp!iP@Bg'S2GEfNtedN$E"?=Uj276,YF0m"@A.Gi#N$[4Ji@.rkPaPMnP?JL^B9kQ)MUk_enp6,6_b"RjcR_H]
%PXA,'k[Q#p(Jh'>90j1D*a(ss5)'`b,0KdEg5,<q3ZCpsHE\!HCTrqL]Cb.[#gNqA?$H?<Gssb44%B/9fUZ8sPk:h.SkS4&_/XY;
%@3MQaO'&A+hNujT(gJG''uo'%D7PtX=2maA7;-6P()#*!Yl/1;TT"rcMNElRi]:T''t.%;jZ9s3g59"93kDMDp$^FeR([?8oQbpK
%`,Tt9Qb*^C4.i.C>nZLi=%gSFEJmK_53b.6IZO-+/%`QX^fS;Ga7"KPh>9Eap\c2ks06[`hn8jKQbRp"IX(VS^]!uAkd;:Xo?Dct
%s8ASHrVQJ!rpmh<qt?)#IfK@2^:V$b3q1jih,hAdolo<lq(#af07WflJ,\jHs6HlGr2"k_J+\`WIes6Gm'kl$o><NUrqufoq!O4#
%^\d_[ji;lBgMd,Ph4MIX,?.Wkrk%X6IK08\r9%>LmVo>dIJ;d2Ish*Fc8Tp;q`93!Mr23tB=-^t[m.P*rdR&:LqXY`-NA4U#BI#4
%s1/'=g\Oofo^CZ8nXCX#E_E`MBD"3KiRcI5J,Na3J+IT.qVfSXrnhYnpqr_A.^jh-e,2!,aZZ[]GGRaC.PpHp2=`^!<isLD7FV()
%hgPOmns>>#f=If^qpE#15%DV?7GP19V"Ni*WXB.p9?Z0+rP,#5i'*n&$^##<2"dciZ8"IPfgD'R$*nAIs/,J9c_CEt?"@MA?4?Sq
%Zh1kHp[D>+%'UbLgZ&HHI,Dn`ia(Ua%YEO7N7#fZi;_WgJ`V-"8`hhTIlHY'3@"KHc=&buFMRP>RfUs\-i4D&^8*,M:F2PS>tu5$
%fk$6tkEsG2<*Id;V*f$m9]f\ASQ`b)PKPD)Pq)G83`XlJ>On:eFIs5rV4)+0$,<d!89QL&aE/Hj!9s?L!RmXnTIUaZLH[F3GXtmo
%kTF/$b@<RE)n>QGr83Kq%.!BfjFjIq[<.rjF`fa1<jkOL>F>EQ_p>Bo\)H^?61XWV5IUUI6'hHHXcOlp=RJukSlpkqmm=<SUI(dY
%;sfnR;69gA@2e5X2)-sg.M5[!1IsF)<4t46,u147c%$.q,;c\'c=+;4)i8au"Oa[m!RnI<;%S!`jaIj,kALNb4db4bAVtgq3lRjm
%;$ijV/6K=68[=_M/>e4u16n_;`X,&8^DrX32H-^c=_"4;1R0>&AZCchFf[`)_.5%#\5f\07$+Ja/A@!4XE?k([_uT88N'3iHUqg4
%7eF#,d;NI5V`Lj(#SV@EG0F\T7l$3urr?>Bdo.o$7G+^hJkQs)cT+O_9.bkHA@hbP_"=@&G*jmSFC(,@\mL]`K]tp.p5goY;p'#h
%3f#i<FLgIqRjaH](J^glf6"<_m<#@5APoG'9sH#5HDdU1]gKPk5*3Je?bQnJd_2k^AD.?Z7\t`FK0.u8ala,!dHtrhjf"LqHE(l]
%rEZJ0G=:RGYO#dhG[dEUF4A']&X)[Cc7U,?N8Qf-lVq'VF=ks0V#,8kW[t!+Ke(-<FG&eF%b'I/CJda:<*ip(/*W&-\G*3ARF3t,
%=Dn'$<4>Jl47dl4[D)FX`c]"T.q_7@qE%bd\YN=XY`(l$AA8K=rn_H&ef&'R=,/k]rNrk`9]*GtpmTf_U\%O2C.u&l["8\S/UYK5
%Ma8)c(j5E;6QK75,8b6M,`:WgGV*`5Tmo4#48tU\e$n&j_;]b9ND,tRN\*<YVTpr)qTaCh;g^6#ZGX%:7JYg+fWqAIV5^E917_0I
%e"^$o,H[V:b7G)(pGH5O0JSim!$<>3G<&SYX%nTZCYHo:l:tR;]@G+E<ng@p2`S6QGKFA.QO':LeFH@7&*gAZ8>!%-oTQMQ-L.N"
%Rgs`249O\8isOA$L+qagP/ENM]?>'tg#G'&@D6D4bObNFo:0dia^/*`QLQr9C4f`mg\o69Np>PmW/;FE&X$IZbag8iB-Pc#]R0gn
%b)M>$?+VHS3M#&acM,uO6;E>NnN*4jLTSPfXKBH^?/d05\G7@I;-t<'7BrhFgbR8Fol1<ZUJfoMWBeu0bCQYT;=0aNDJ%k7X&Rt]
%abd"Z9(k[K."A4qTPC>Q5DkIt7/`[/o_NDMC5j41lPjc(DCpp$\0%nI*ikX6d*5W0Vct$/\G@]*/)S+=SD#b!WqkYFT^LLMjf4Gb
%rXnT)kseAY:;Ha-lu05[^hk$deXa8BHiB81)>,-(SHn39\sDl[dqCE\0CdOEo=C;EQFLVV-5$p:Rjl4sX7CM#UoReOjJ/IGFT74i
%0.oh-@0*fDC2,l)7`(p)-WDTr=G(c=SM>B+]3C-g`%%WG_-ps^2W<n+(<SP)8'+Dd#_,0P<jSqAd?mG@9t9=GJSg"?NNae"1nQ$,
%C$LWq'd8>FmA3!T6eUfP:\9Fp5]Q<3JkiS*@K9E+&W'FgA+^Z`CQ:ebbJKZp)YU5\IiL((mS=TFJ6:=fAO?6Yd<%?b[;BO.Y+dg.
%Fb31-IEhZ3,$KWIik,5*gGBPF+:@!^fmRLK,Z/8$;3oo_L";V*j.2j*kUEPZk.6og7%GOLKQ$^EGlfmRpXP[h8LHYBK90T3f\uVV
%MNJ0[ku*D)n6MZgkc@/<LjC@IVk93Q3gmZ0I#c:KkM+`UlMnX<o3sqnjZQaph6"6ekX7R4*>4r^)R5D1YK$-dC-Ba)Ef[ptkBRDq
%5*.jJpW58r&'4U&c1uC@)_b__@RE*pn._EP5<:Z0hARWH/1=ZqC!;VSp?akF([UtfU@(4UVDpfWef[*<eFr:m[?h?=Hc6B];u1f6
%h,AfLEB/=K`=%UGmt&0.Q'/^a:e"_.G!V6RL-8@6.Cre]gt<29/gtUiLU[Qn&]Z5WHXLqbFrRfWBnO5=%N?,8LOL$R<D(^].%Anq
%S"T,Z_<T>]'Z367q<"jW^d$[3f]cSm\3:(>V>o%1V-WSL=!l+#X,WI_qXjD@A`RO-i+T?h%A*+,qc]+!7$Xl7Z%C87LCKjFCaN6E
%,))SfaDc2RT>DU!S,-YL[$nYi2")Ub)s`u;Y&],O>h%IRC=b_mi%;PIqWX4oHPfmcAL05C@3DR4>)bW(fj*[dMd57A72d!p"uj@S
%WdO5sGb,UaVEBdSb_^L]d;SWJa\cZ`brKkun'Nn9fpirB*&;X^A*H.'\sT4A^WK1@T0?QU;?#Uf0q]DdR^t1/<_t=XX/9cd68bQW
%Q4@"r)I24.Ic-12W6R9n*(+H8T[\=fM\sTiX`i@J!If)=Mejo_8]j#mTX*1\4g6#M=UBgLgP4Qm:`DN%!B'#W/iX_sAV*O&23cMu
%"u'%2CY:HZ3.!*]VQm7l==TW53:Rh;@n3;t-X::@?d5]](KBqSDKl]KPQM7n:Qekd5f)`r192RVH`1.eg%Y8(\Kr]cf:k&/$):Y"
%%62e*c;p3(8YSB^Y(,8l-e>c1eA[S-F.n>iOg%oj\6IG<qY%>.(m7G+M@hCRUu7`B#eXe@,m@(VT5VN=[s;`k*mGn<i+P#]$QdQq
%g44<e/8:qgeQ%pRg)GB3P,[-kR@OMe_2r<!>e=,Tq<7U22uRFMon6p%fJ;-E[&-O*e>:\OBnGnE95EcK(Kkf>2Abe@'g]#'Rj5Et
%-6"1C0+h7^'g110]`BL%EbrSJ+^TKG>F0W5i94++LHbM,[t"2@gV;P6Mmn(0]JO]%W6B<IkL3)q,-ou7<iPcgo9rjSKlAO+f?:NF
%fo%4'6uoi3lud=t26#[-Z2$G=8;?ff&Xcn-e]QtLR"e:0XZ@XDf8HU`)-\n.ZJBD';p2)58u:72,#t7t=;/4_5pUi+o>]Coa`e8b
%>TRHkdUX\Y\<n4gj>r"<W$=G33\W.Oj>%'58+HJmTL\budS\VOk[$+O86O]gUhFO>Uenm<Y?I)/HG';N9LI,ZJ/"X.q\>M5&hHGM
%75tVhM(7+b+sVN(ObbkOO<,<4J8R`]!7_ar!@S[#7S'^9Y7Qk!0B.;?cF!mt>ma.p.$m4gT.J<F8EL(nND(hJW#UFY.`dGJ1Lh\.
%DcNc6?Z(hGBaN6"B.<>o#FP;Zp8\f/3:Tj"BNDgkp."ug2(TTY"d$=>Y+EkRCgh.H%o-5Yicgh'3+o\BKV:%ZomES"7hZT7n7H+E
%),&PjpFSaAOAsmc:GYbj477RBP%,p+[Rtq<+K\89?`M[%=&ok&+;o8+^IMJ1oRfGfhrf+eBd(op1MH=UOiZq?oi6.#&+ZP9+U47q
%0m/O#Xa3D0fEX#%=bJl22A_;_>%0/B;XA?sdfBJ5CAAmX1kjJ2[47Et:.t%Q$ZB,f9I4T+*t6<V=EJVnRDmYpoiB!?b5oo%j^&+(
%<$"IRbeT*XP`$-Uo*m%@EkuRnLg$Pn/Ro9W.@?CD@DZ<Pl6GT%+H\CI-;NKFDKEV]Ad#[X]6gSdR,>n=Nm55:=_nigM'\!'O!rP6
%3Y\C-Ou)NSb1,tU<q&t%$u,qf@4>e'@`.K`=hdJ'0rPNjPV0BS@G4'&Rhr7EOAQ=CqI5u#A33n^#D6'(A<28"k6*LIV[$b&@m3).
%Qp$%gI/uXXUj!89gu?]_LJUM;c<qiOi_;W=11$/U_aB_QAD'>9h)umUZ:M"]L\/,]ot,'B&FX0q"\^H>"nHlp,(AsgE!_(Tn%@Ma
%nTou[60"mZVbnDOJZ'S*&@chDb^5?@pI-QM2GR#E`41c$U"bL1L:T$g*&I4;TUftf\7Cp]YWPO_[Ui#`QQ"KLPdKGW&KM:3AY(71
%Uk^m&hN+q3bRIL;8hplP_sWa&[eX6J*RCO[@7c\HhoX!ikl[-"*a1=@U1_)Np$B'0`q`YV(mbU2;b6#Co,-VZ!HZl<\,Z&sF`;4h
%HEVW-luG+)!_gtG=/Es@oBW228WLPk:&(&^r.YH-Kth3X5iM)I[gj]4VsNS]^q3BDl$^uNcW>F`^J_utXRXRp.GPNCGC&JdT;16n
%mmkXG95*X$BPUeL<^TUKLUHu'ZDm^6ACK!7H_t<lSsK/DJ7NuS!?[KhZ^"4JfO/4>*Rn:iIj_oipDJmg:Y9SFFtl2YL(D&X:KpHU
%o-I>F-C0<&4ONDiLQjhe8mTngmNA>AF8ZK4;X#PXV8Ci:laPBbcUCh3c/6(8j3S663kShcPZ/UpM'2:r9od>N<;Q`=0@r@/Y:ieR
%I3H1gE=Vd/k.q#qo_%rs?%4t[R6FEJ^%oiH=+l!g+HKRG1``=g<0+)-db_6akPjGNIn2eD5.R0@r-WSL0DiONlj:i;)L1otXM=]^
%ip#F7IlQm=cMK7p3.XTW3!Vg+<p3WnGkO@A3V?=[+<TJ;LR@r9`"ZMqSa\V1.@&E!aN;*ap^g@7p\i!Xs)?kfmCqK-^6D_%YJ/u=
%!meS(k8n+"'@sl=rqe?JXF84EfA@YCiZARZe]DT1q*CW0\<J(EoNd>/Pd"%79kh<GiTgk8T`me7%u9[lrK-Is>cp4(=T3DY+8!jA
%nr(#KRU/8\]XFU)&<dVZq6@m!9C?I&=Un`qjjNMT+%2k$koldm/#%c"GRS+u%Y*aFC<Q0q#cKCF5i(VgohbB6RtPO;/.XL50-37t
%2EFFc3nl@e]JhMddd.@.B&`%+YTBPN-R5'^.R+KdO*Pj,Mi^*"lVS2Go8l,-Yj>M_<m>'<+3I]Xoj+2FY[UWq?@4k:35tMLG5;bF
%5@*6DSe\;HaZ/@Qphcs05!?9J(Kb;J6NB7Pcqd^C.IH=FgNY>DV@.*7*;(gFr8O?U0.@u`GY"ok`;2;:etJ1jIsUk0n,@XRLm>`(
%p\c,Ip?%hTn)+-D&+BMqrb]=82:gkP`OeRU9JmGpD"0/IWl;^eWAXUM8>\9BV+AT`r2!)ii@eb_%=]giBaoP@P/A4;;C:#bQSQ++
%^Qck5j^4,ifC5+^\V@k`aVOns9b#@6+B!&&'WJYXY)0`Lg_-SU_G$js_MgMgB$t+`OG##[6phY;U^)^'8MiiL,T7jD&Ih$iLt4k\
%J4r!H'TtNL-'1t/kDE=b@7H3/R4pl;!u)iu5U\f-,D1G[\2+_SHYFT:lbu+;!f_b=:`KNL`oph2"()ZP0gnt<\</J/MM*FV=jNn$
%KUL?-j=M!V>2Kb6H#t<*afU[sMM+!k8"-amlaM>(o1"eu#FL9>kVG4N@2e,V"ePMi'>K8c)og,R//U4EhAchXabSaocIC\P+;/;?
%M4J3H_A$LlHk7N2C4<&uJTGEV'':<4Zbt^*duPh(:>t#"R"L9j255UDEPN3>UrmR#b^gsH%MT3_A/*3AP]`T`,YU4,Zdo5@0U4ak
%"qBN%Lka!;6pp$.U*9(Rd5pnGOP?i%X6M5c&uH3B7B;-`QUn.ud671hMgZB"Ni:2+j+EZMbI80I>gmd[J<*l_7kIGDF^V<YV74q%
%HdonO<X2Q[j%,O^7)Br"Aen<`*+'Bd;bKfOI1$)h4.-Anr@ee?HYFT:pX2;Tm\PJBi(F.F[Ao:df,fd%WRc'Z_Fo)/!aUZ=]b^u2
%H,V/X#]/X'c!i==-Enb8j:S6b:ksXE=E7jrbj.=hh?pD1@1F+\F21>6LTHNROYB:_KK2pUbTjRCpo-Zu9P`">D!WTD[Y(E%0^)"P
%bZAcS^Hs2>5<Ng=*\R0FkC5WZs,/+1$5'al[(mj7OhNW=a<M>[B+bO"5Mj>(aKdHcQJEMe;`Z,L<V%d?DVGn:8&Ec1'O.OiOMCZ.
%n]N.c^@esh[(B6j9X-d@g*R:tm<F2tX+Or@!%:_s!oTL[6SjaWH4M_He_3'Y7?=ST1t<$cQV:<^6i]oG('-+#=u"cf5))-(_]1_f
%-UW)h4B4)Z<.eVFD;W1QPkaLim10V)@KEV@$j=IACG<t@$%TQeW2*FZ!U'.3K4,8,F*;ik";j1bnu\Ng8oK2"%>K/'j>].:VXVE\
%g''6LSP+21_`[fRU/uS;4+,%<M]Y`0J(^hT"N*nb(hO+LfhgW\JI8$JCjNalI7,j`TCJ2na*ZN)$->#\4Z54;^i0:k@ab-pT<Xd[
%KO'A:nt>$\Fnh%rT<sj27nfe!9e6T,GbP:6%k2XUPWJh!7K7U,qob4%5LJ)iV4ah`.if$s32e1Ej?oqq!P2?W4Jr'g9!p<?pNf+Z
%9_X-HR-I*$Ldr@bO8e]cR=5:VI!G'D*WOd0F8n6n^FR,SP6co2K%Opqi0Qi]bSM9AcMNCgro(Ni;M>d/oSirFF<$)H$r)!<k*)*0
%5BRA)iOs_sWR"@6iN:K6O5lX+8KEb[bWCjr1%fMC5MYuDp\dSiL8i,FLf]#HQSmah>`s.=Z1\K>?P!28(Fn"MAF8]-0[.#XSG99$
%%s+]>0R')r*$4W(?Q^n,,p&q5`5?snb"l#8^+^Vj:ubuen!@W>ru_rl,9H!*7+<a*_t9"7Qk'5jBaUfN`PYA,*bH!XmA]25-L0E^
%a7DbJWEZR11CtVmejGmSU=)`U_b=i.b^)7CM5BbFOo1TE-b]l>o*TfnkBqa<+a^qBfji"=*7i/Yf,#X4a;'b[+3tZsY7M4#9Fp+S
%&5JjrE.W>%K7$^%SoY]&0NIsj3;WVG$_URWL\WqPI=DNq03eM51EP]*iaM8prd)N#r7$-di=QUl+gF42M01p%k10&3[t_hKgY_UT
%+t@4"\5=uY)AR=0YqSVH`PN=g2&)oY:2;7OOW;tLQnl4,_N`/"'W+DrCFDl=FPRiC;lA5\Qo_q#_pmrD0jp8iCJ7Em?DCupF:4$V
%P?i5`W+9*T<O/ci10&Ocf@3c0APT/CarGQ*bXi&.65&9O&Ii`WOEMWIa#!c%O(eS=IZshgY%.MnSeKP9%N^>"%[.4[Vuq=)=/';e
%(c?BO?pY8u/0P+h=@.tf<\FtcRh1:q1a*29@mUm:`e6%/%O2WVp0ds=AJ-\+@&NPT`m:/Sr(K-DH6uYibXjs1hVr0ClSHF=O,fh]
%q)1!"nMAoB>cN&7[rUCHJg(&BoC>e/'0#OP]LD8aJF_XHIPbs*1*d(nm`iR)-i%qu_[5+&!!Lc@G/A0#_)0+r0-A,?R[X%dHJeq[
%$`5BKTO`c@8[FQA.o#9aGaadiC1`F'#ur[t#Rd-XTUM%%>&F\JM:0S/E?kiTJ]O9p.MoK!@V[GrOUN-0.M*&o1l6rhRRBLo9qlba
%9d$psi7HM!<,bPT(5d,@_).9T?)"stK3f3n^,r&I=-F.;bqE'keIU!pX$eAl7hG)#A1T>TL(6\Ih195]6*fMPZD%)6UeU"pe7Jfa
%>T5`%HVq:IOJt2c(C6g_1(ajH@NZ@kdm,=oVL_Qg9`r6,RKVuX@38Do4q_j6/bV0-Qi:S"q@`[P0B2-T'rO;Irr;\pY!mLZ\\9``
%J(U(k@p#Le<%@LeL,BePCp;fP_0^OBYWZK.4C7sS?2DXdL_EXKWk)03;TF3r&^dGY<9DS*A1A'qk:6F4;V]2s.6HW,,/10R&MheC
%.(d%Oj^@U5++RRgoHl]^-/5s+f!8G-P6+M5\eY@;)dfT0UM+VdU=D$533r;<$6J0>igU/8'.+KdTY]<jp&X:;_qNn_oB$fPXMIIN
%DU+8.;Q19CW)k4@_>,8nSDHm.(m^]obAPnhV"k?kl.j8HY,@5#%8Qn;-!snAJA98\aUcbVFJ#;D8Y/_/^Eu&$/L66.pETVf^<+SM
%^I_+>K0iC*4t(EV-Z$S"IEX_041t.X/)OI:#SGttLIcA>LNU7[.>VbcSAVFEn%q%Ue2C%UNJZH9=8eN$m@.f6.ErW^4Kn3,s8)7L
%]?"/iFI2DOe)lT\Rrb06mM]]c+%NtHA,l.15.U>d1G0,p_09c\_/;q9%uKH-)LO\q>s8,IEXB,q:VA"KK(o0>SVpmaj\iD+kHD<H
%rTF_;J4]>U!>5uQ@G-42@.%<TkR"Z(q\NR8CpgXr9g1iH1M.BGkjj@tl!Au)%Z3t]8:(_"Xd588"#="&m8lcS8ERVHb7N$CT_";l
%RCt:J*B8?=PY-t%]JGd51ePU,O6G/6M7sQl\_+uRC(Huk^P\bp9%rG2W\7OIRmC%L?8[hWl2]Pb2eY8R#OAL\p,Si6,TQ0"29bgr
%0hf=0&`GE4fWn$0Qm/D=nW/kaZRl)+,N+G'AgE8$d?46B:r!eEB@_137(su</WkN`E.[GjZ;=(Ca:V'g,(:DNBUnqaDip@-2jenS
%QkCKa6A#4E/F`n$R-$?'Z;eQ7nt1tB?Sn$tQ%3jb_[O;GeA<cOL3A;g#A.D1b<IGaSXG2fTT$GTdE[>!B%'fP=$)cKW\B^fD.Dmd
%00K*)lIYOMLMPU]XPd2TT1P"!F%i2X]Pf2)3<.O/lJ>fHpBgcD">L?.Ns^sjs+H<^rTGVNHH4I1A*UfV`r%b_Y'Z;s$2RERF>=<7
%NepsNe&dP?-Z_VO>\:OE7f#0f8eCC._Og=qC+RTUm$MJ+FY[ISa\5>S1+Z-a+Qd=>WAk(T4Fp#9nu<&7Ss*ZFVNX$A/U^^C8Ef=R
%<hOG>KR/5PAlp9cL/<V$#@L%)SCCR.6mEA8='-AjBG>cE@cf0oNAhP43=:=Hk5EbU6KMiFWcs.uBrYPfU1oH2"#0n_rC&ObWd-U(
%;VYLWogTP<p8K7)!t$tY2m]Zn>UD85?m[[f@OAFNU7'-i\u94]]BEjI]-q;I]-5mre8C+d-F8PP-F8PP-F6?2?Y2BoS]P]BS]U4B
%Sk7/7U`ZO<*g>*tcUhU-V)$#)P*"gBmA6U]f3CqSDRcp8oKcVP$)"_k#dgP&.0HN@.0HM[,Qk!>,Qf1GKRO#L;8VK?R_l8=KGX;]
%=\X2uk"(-!6!?[T#,rcF)l/-j?=p^Y&s?.]>"IqmBH\fsUP4A+Nf5e]`(,ZWSu*.";9F_cT!,D%2b[bGNQFZ]REd.%WR,6pSODgY
%pVuW[h&T\n%7X/\'0;k,"Q9W=S,.lW2T_lE@>ps^$u>3*D[7.^5-78e9a2C8:nTc)XLCdiko;t1.kLgkRlmo@FHbSRZqlqBKHVLo
%N>PiWb*stgEf[n#*N4!4MZLSo^"G/40'G,AIOH<`TkISUZ^'76Xjl21Cf:mAi8bKW2sJ,LW"s&bEqJj9TYaDk!!G6G!(^uW!>+'d
%!aKqJp^</Mc_*g&O-@H#bdB`f;[->;5pO+[,=Heme;AVO!L/g/=bjimZ@Q5rPCS\Pr,Co'DPGQ>Hjn@6RNF0@l8I6bUnZ,u:n,q-
%2Wm,LFW])pjJ[u(2MD/.rKWI@*`59kN`-An5u'9_,WXBdWcBSO'f,OZ,^YGU-RT:2go!6,KV32$*EWsAUnFB#"`_?t=NmL[-hLQp
%AOU\*,_&bi,,D#OKm)XF=-"Yr!8=!Gd-b_(G3?khU@$[*:24u6WSP,PL!:W,]/'u5,i6XM^ajg+pM.JH4J+=,Z+kg%>t+Y9F7WgW
%?K6>&)BTaaUc=\rE0.K-`02"b:8ML0eDtL4gV4)*[.6KeBVtj;RoMRRQ:#2;m\Y:<q'TIl'Ag?cfA$mgn]Hd_"#N/Z'F0#IVC-e&
%"aH_aMS#6m_UO_;Mjc"NMm+Q`afPn9U]2J(ae-7k.H=J_8mq<D=h`K;&M!%e*NJSM*7ben!d@Z>C`RGq<kHW7HL>C5cY4<1mC>f;
%hE#ZB55piBF:b>AH!a>ec]4H2\X[."fs@e2<;L*=I?OM"JAalY=;kUOT6hATg:p7)?+o`*BWDbpDMed)T0j(#bX>]]pfI@o"Kjg7
%5ZsZI:#ClBn/&3--i?WQ;kt(=b*s"VGbk*H-JVoEWt(ZdHV0Pq9D06&*?(qc9hBFGTS^<&8%GS?TP>"9g:pa#Zsr"WKW6\//=]"+
%:1SqD-V7I[>4W3W?Cur%Q.64+-a]FtL#&s0\U!$se,<gX,S:MbKIrU&Np2!r7fPFs1X#!s1'4WBIa3fL2#$D$6o[_c.Y5ns<,"pP
%9Bo_Zs/ZK[R=9!%O^,%6Qh4\*s57;X`SW$pX)D,5Jlj<_+2qdj<FfQs(bt,j=Cl2p9C"eaX1i7Ns#L[#fS8(./]!,YIgtcRgQ'Ip
%/?aP(CcaE`]0QPKJ!L:PRl*Htb8Iac!VuhUI#8,A1_!7`aJ/gt*ZC\gec7"-=2ub?Slr1pJ:7d9StKD4F\_DhaCQioB1K+[WIW8m
%Rg#W\RHU5Hl+85lB!`3hHbp0VR\&)M+jJ*\fcc>JJ`\6pF9tCPVYN1#rlephVZ<A;0WJ2\BOLm_EWB#15[.,'R$=&d<B.):j1Yf,
%^E2V#O^\T-#^&ss69W\]Po+,6j/E/0G@"_"r1Qu$Im)/F?8?FIFE/)L;%L#cHD#'=Au5fZphZ/YJJs=b'uY":")T-^#J.@Hia+dp
%k372b?.K+#70JjD70JjD6j&\-*ROk`[Nc]`bU+7$bU+7$eF&+s.()4c!+e(9!+e(9!+e'f$;BiYBRhk-BRhkMLk$,eQh1A;b@?^(
%q)M$J4<7_/0'e(3qs&_nci`Z#ge.@?D']:_D']6)jZd;VjZd;VooindQ():a"Ja?45bgsHT`9k_"!KD.V?cC>*bZpSM3NhG-.5+X
%QUhF.?C&+4&sD7H>"EDMBH\gHUP4@(O,S0I(eBJhohQHF686Q1Z6!]"og%c/Cc%dMJTe-]H-l`]9'tYQ1XH6#h&3gd[-ellTS+Y6
%7,\Eg&I(2e%>Se`Cnnlb8$*WZfUq"30!]#W7m0ZQ(BRF+2rCbCg<igiE*#uiPS)CIm2!XR<'=&ue'gL7*[i*CEnH2A[AX>ql102f
%($\&LK38WXAN`l9AA4_cW;*':N.dp:4]!g)5eYYL"`.*K:uLCHoK_ZVSu<FiJMQleC&moDA,t^UAH:gVAH:gVAH;?ed9h-7Ig/@$
%HCtC!B!.-aT-D(>#T>G^JT`WU^\ib"`P)6N8p[/3_dIuI^ocNd5f[hm\9(e2;<]&a#3Z?;&!q6XRqj9Id0&c5&%"hicuo3=InUB;
%UFm&0'E[Xq=$ffn6jlTV:G!j25IHRes3sA%rDQ0daP>sBlqMf!N%Bd)TC.4BK!lD<?r7HACKVarM\-c<J]02*JO5uo>uie[:@^?O
%01&:b<p5*PH1b:6$(qOgKc[0/HCu57M72`$p/2F.Q[5=Z?J,+lk^dnGIV*mZAM;sV55T[a@!\JAR+-A4*iSDkS'T?7[<[bpc"h]3
%&!Z!Wb.p<oWY/*66p$Zsfi"$G!H%l%N/\Pc1-do)T\ZaU9!]K]1NYS+>KB$7d0&M!?-6sN#JkZH`VKU]TUVjd+0,W=*a&MMW1Dp#
%At(Js,lAhf9$JO]8ka9+6I=p\l@H6R04)fniJS,G^*Uts=sZK]5e06.5afN9,$s2M4j[OXOXR@qDm%2h^@,;=[*+?"dmSF$\Oh7q
%%]8&E4I[$f^Ngk&IBf]6\a1i@_`#E=_j2s^L*)u6T8q/b9^`l`j!dp5/U*kTI*)t'*)>Sr?([WdEa!bkW.Pa]Uq-BW<WU0LBs*U=
%<Ij.,=BL#]R]CcOZ?eikp@a3,Rp1U?F2%pPk%[sS=$'Ih()L+Bf,YQuX??@qGcG-GX'mO)r[$JOdRd$lD%p??n22]4Uui%peU\C6
%:T4\9#uuVX6UMTigPKeM1m+-f-l7m]<:']d],0Y3)_93_:8n#``Ru,.j[9ktY*,#LX>Sn.m0"uA[G(!1KXR)KYkp:Z]8pX.ZB_?o
%LFL*+V)$(J="U1sS<TFQoNrI:f/-PjWk$hD]%@!/<b:2FMh,&0hidi%e3>HM@A[C9XsKE&a^nD<nNT!8IJ*>+bN^$I]cL42:NS>E
%IheC(C,nu`)cg*FhpVAIa/Ue]f"]MJ(q*k]?V>?H`a;(p_mT[=0[&dS'\gpW_f!h+%<lKg'%tgU'ST3Q&)?gM_u#`tP!3Tb>&f0X
%_"B-fk;s?l0P!<rZBBLXJkP^U?KhhLo!t8X]7#6Eb@:Y$'Actg/_U3gVuT4LolL`AZF6B5l<RBO*bR0RB)0Rtf"MF!s8/k_?PMBk
%;u5kU"p1k>.S1hLelMENVr&?-\efhh(LX?aPI*:D3@=Y8HIWURoam8_/rSL\LfLfXH>Y`Q=>/")f(*@l"Z^pb4?LUba6JK%IH"-.
%S*&VXP&D5Y3\\U#jcuqP5UQdZ<TN!M[0ome9:(sN,3JbHe.Y7<4%ln!66-f7:upIhh$j!;,1X*ac7=:;G\@e;_J4^)r^P:3ki=.F
%4Qul^X6L"fhA&e^an9u?=o7ck\3J;[L2_ld#=UUU;`c4f8uCh;.Va;T=W\nl:K]>h&7c>o9F-e3WjXIC^[1/[5Q0tr\$Z^keq3g8
%9CHfQiHKcsqtC!'s5soBrUtYfRl&8mj1i98D)^_o`m?TfW*\,3]()PSiAA_\%F^nC0m$Rm:o>'+IE7Y:Rb_W]0W-#B2;"UoC^5.[
%9oo"Tb>ED:g%,MpYigEm&aWVbh_;YoqdfCoY:Hu:<"H7'Wl`l0m4Ma-\!tlH`(YOE^arHWR[NIT.k^lRf$k&'mGAuX63:V__`7n#
%Lc!m)U@K9<57k)pWI'F$aAr\@W`D2=&94$RL`L:U!c4',%BQ0,$=&KSO.+]F5W>+B]*Lg["9Xc9X&Ni,K+jFLe:GV);h:7A#d@$T
%k(@W]n3J3%rP/SKd&l6XM^hrDCX8-7#oNt*&t!hXG4?Ob6I&2VlSuL,TdY+;6a7:D.O!HK^Co7D?;f`b$2%17=pa^.E>[b5PT.bA
%jJkDoPu&i'<=;A5@Mtp#@(mXR#W<*;7#4)Y&YWAR,6>cEA=sRi>S2Lu:pFu+!aPac$?-"[hu]8E6?a#>ec7-7ff*X]ff*@E:k/ph
%$?/9Z^]i3rPC_7'^SUfq.f..*.f./T+;EbN7Kp<8FfZeN=@LTA]#)ffa(k)&!)KP>l!J[)af8ZrOd*nf@hjl]<H.%S_1er:FU&'u
%.s\Z/T%j],%()1a?NQfCI@F4r2,ZR_K+Zsp?PogR4EL.Z8kY^T]JQQJ1/p:)2Oefiet=IDN`@p@Qee?Ms0<f='tcXV<.3/GQOKm7
%+q&Lo,3W&6hk9?>/Bh>3bB$#)8QaXD3`bW<FKD4`Z&1lgMU/&'SRstUo#3sDbUfN-)1=lf2'&__Ff^1i;l1sI,m0e8]tYld/ZEY[
%rNd[^B)8o(-ZWXN>l9-js+>sS=+?jLXM/,nlX:O(qWGp8A;W^o.[nqHV=fn$<L23c=ho?ZN`?cS<`/'_7A3n]6k%gVKSN]:s.n:j
%Afc,JN`BA58BC)6+,B?()uH.\.p9:NBk>Vm[)gf*YO$hC:T8Ze^Mm)rT_7Bm$8m>9W<&O[r<8\Qhba2+k6+N\5Yn<Zr5u>I#!aO@
%+LMDm/2_tBGEI45MJ*]<=+kld%H.#u.k;%%:6&.Q]-G`B^jIRIX]3?3='4@&BG>bZ%H(;ohdn3XEYMtFl%[?&h4lLLXX;Nb/PT=6
%ZJ/`(WW_oDXUJ+p;]0,5phaKb^(kEmcT[_XIa,SAU]0$G+oa5NdoN<Le?E6PQ2M3-8"]e[D6EEZ<qTFDD7!UE.5C#>G\sn<`_GrJ
%j!L#N;UafgBDZPK5M!cMC`FDbZagR+#CH<l><0]M]$.%Y5V^7R]ZgWZk2m-%d:7'l5Ro(A2$lYlGf-Z?kJ5m0JM\GO(6ABjY'Idj
%=<0J0MY&TDVaY?&\\KFS:.Mk'ne?H5Zr>]1Ziah<K`*GCR!.9O3P$$he;:35`*;$kgon%Sc^?kdloTRGpKb@Yg1KWSGU2#=a``Sh
%-_hkCDaRa$3pIGc5A_5o3E5ii5"R&"ZV\Te8o++dYV<*J>ns'`PIl"j@E=9CUOD9^dX?C:Agk`k9a-"/$`'^eD$$OH<Y:r-FtVo\
%`8'*![Fg3]Wsc$KX2mahed/tE%d2X:o_aKIo>-J;k,tk6cc+)*'6G+&k"BimCg+Be&b._f$^-5jbtW'W45SI:__c\oL2K-,k[NX$
%Zg0:#@^q`N]5IDYp/N3i9rD:WBk&9=gi]MV#X0,'"OaJZMLKdLDR_@;^TFP12Nu:=daX+LG'>XT^]/F(_UmB#,I,X7#be:6^F!=7
%3pnf@f9EEomDiMgn+:u!fkm?N5gpIbf+aUGAgs<6gNhhj.N?uVhL_1rfm'e95AFt02YQ3ED&s&>:4+c:j#rgEZm7BrHkPD-S$rsC
%\Xa(@b!=\A45:(STS=(NTA,hH4rIH^o'M*kG.]i`0JZ_1Od[lbEZ!Irpdi_)LN/4W`r6;Afg,>0Ngm^IpVNG\;M4$^n%5ad^?_*O
%N]S!3G?q?<]6*q_NG!TO#sgjqKhde.OW7/8139fQ=sSK;d%jLUWLVR-A>J.t2RHN&Gp\KMHrlT[b/kZWnBKct)B_bj>[e'8SaD0)
%#-f&1$<S&<N7`CpiU]hhI!mlB@,T6X#66mn^QX5R"appDfRDjHLe2c>-fNg)g&u<VHR/_fm^hEb$bqY!l'U\@96iGSH`1Dn7/5Q2
%#[\N2iH)XWMX]@u/t$R;K[5pd1[QPph='u_o\")R\rqu*G'*t#M!7INF+!$!Q&XN^Da@*!2JugWGj+:MYXM',iO&:M)f!"'(Xk)O
%iLBg#[6QIcq..?$2(p,#Nm]qk"k"aTiBGlt;'P7GHP:iU!t.W5KCG"`2b+jjbuZ)@Xk&IPE#[a\4Yn**/05Z*-gYIJ.<CUaVlh1i
%@?/NVZBfaYqedG1pXFWRh/UK_ICF*2hkf)jo3mk<m@8?KZJ@S#RmoiXnqsk>FjqpF-@B@NUlaV9cKcW/;K,uI>)VuG(fe*]Q-d[q
%*JNuWh-i'[0n3dBpml7t:kRI)8gUP_4q$_iNUUf1h2K\69AB73J_Kt#M5+TXn=:M`UV-&M5T%Sj5l5pl&A[6XQfbr"d@pBkG^\Zm
%V>5_B4@6U)[&HH$.V4V%fS[t,am,3u/u%`=(r_IejKKX]NFLXJ38V_dqdpI+8h*=S.qACu^]'P"BL-Q,$2E;JSa)PMk.K]c%@,W?
%@tC-8/o>6Pm@dXT01?<sT<Pt3o1STT[QUq3T%"[\M6H8ir&sm>]BrNulJ'1pqLUl[/=L1WSN#t'g";W"3\`]_Gre]h4J@k.O@<NC
%Ttp"_,1A7Z$_72M[/_rOHnl)"R[:6D:H>"J""g`B&pV<ro#U5<Z;mq/QB$=t$hUfp#'R\J!@SO`3s.S&2AXrO:ZJ-eC'VcX$2`Dk
%eG>K:WSZ+;0IJ6o>2h.&]*i`<^8C'eSW4;CDA05DN+%%P,CQ/Ip<m1(Qt0/Aa3iINNcmk7/<C:/*9-nA?O=+k'JZuC>+BuWW60<a
%L=T,f-nK?&%b$N=$K_t"_!c(U#teec-l&tDpaiZ@2AWe_U%8g2Gi;Sfdk!7So*#eq6unn+>nV^f*U=!nfS\]TM!:=FecT%4euNKS
%.R]r2DA^],pgogea$cP*fs=gho6;&'*/XoST!Q4'=C/-)JZSilgh//lQEE%2a'[ZkoR$5`D4eC;ln]H!<Q6(h%_qe!r0hLCb(@;M
%/Y9DDAm'%-gR0l%66QG>7\M>"J_>l!V.1bd(d_q.@cI2o()Z88]U7H1E%qq1FB)Z.JN)@6O6l)P<im9B3:\(@OEA,q&fJTfeOX*6
%ru=M:YeWdE"L2l[#KH`Lqq8d7@SbY+gg?tm0PBgZA?-1:%Wk.rgjS>@EJL^IbMG"X$&i9s7U8?PW:nYDTeBqU,U^s.bT-#-Q<@VR
%bO/cjUm"bEJM4Wn(g:gZaN5fgWdIm5d)sHNK`t6-@2^8"Kf(^kr6D_qW'P5(V#j[$4sP7-`WA(HFHZ30m9CX]_Y[qE$]gWem`>&R
%nSXlnc0a*ms7dT'n8VGIWD9rN!<?!6QXjK=a:?G))8TQTGGZaP]:.(\k$TQ3$h9(D>&s32U2[:!kmip-KS*?CLj_(bege1lEd-=b
%hHj3!h`3TGIHg$gcX^s1r.#/+AUl=_l85+sC_^=4O9ZBMqsGt]<f/EQ+gsM0dj#h]eHk$t#@0CT1@E0NKBgL`q>+,M^DiG^2?.X9
%ebhcTl15F0W)'D*C\WZHfiRl/rZ;#mNIcog2<D^rf=:BM@[>R(Z^j%X4F%Gca.[*J8Mo1Yq$una2m++jZ[rS/Y3C^'_dD9LAN$@g
%MCHgu;>IbJ$^I@=.?HoR!.;:D")k\LK"8G*")0q-/04P0.Si-4MVr,.=p.(FiK4RKT(^BRVbORD@-jMiT67_.GMMOF\ejMU%sP=g
%]^O"Lf*$DSgnCc&ZaWJ#kAHp#W>i8NqN(]\hXKLL4=X8#2RN.VUL)=lQ)B6]LW$YVC.N`^_a>rV,sL+XK.,VW)-T,4S#H7&Fl(QK
%8Vg^9jn$ud#WuH="V,8\1mQ.>&1ug=&6<h;aWW12\YBZoHG92u"Kd#(%1>/reLo/#Ci_+hGiUg'2go$1h*50Hs7e8'pOE,2:Z)-?
%J)>_S_]LL^huDFAJ,]-`5QC5>^OH(U\%hb100fC'\)7/Rj,X9eqtAp65Q1#r5C`RlIt%7ig[BUeYFkeP7#$]l#/C3:+92#+J,>`8
%#OX#"Gl~>
%AI9_PrivateDataEnd
